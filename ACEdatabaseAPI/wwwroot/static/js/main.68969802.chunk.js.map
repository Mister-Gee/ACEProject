{"version":3,"sources":["Pages/components/Breadcrumb.js","utils/Functions.js","services/httpService.js","services/userServices.js","Pages/SuperAdmin/subcomponent/SideMenu.js","Pages/Student/subcomponents/Hambuger.js","store/store.js","Pages/components/TopMenu.js","Pages/components/Footer.js","Pages/SuperAdmin/subcomponent/DashboardFrame.js","Pages/SuperAdmin/subcomponent/Status.js","services/institutionServices.js","Pages/components/ContentLoader.js","Pages/SuperAdmin/Dashboard.js","Pages/components/LoginBtns.js","Pages/components/StyledTextField.js","Pages/components/LoginForm.js","Pages/components/Alert.js","utils/enums.js","Pages/SuperAdmin/Login.js","Pages/SuperAdmin/subcomponent/PaginationComponent.js","services/commonServices.js","Pages/SuperAdmin/subcomponent/NewInstitutionModal.js","Pages/SuperAdmin/subcomponent/EditInstitutionModal.js","Pages/SuperAdmin/subcomponent/DeleteInstitutionModal.js","Pages/SuperAdmin/Institutions.js","Pages/SuperAdmin/subcomponent/NewUserManagerModal.js","Pages/SuperAdmin/subcomponent/EditUserManagerModal.js","Pages/SuperAdmin/subcomponent/DeleteUserManagerModal.js","Pages/SuperAdmin/UserManager.js","Pages/SuperAdmin/subcomponent/SelectedSchool.js","Pages/SuperAdmin/subcomponent/LinkInstitutionModal.js","Pages/SuperAdmin/subcomponent/AddModuleModal.js","Pages/SuperAdmin/subcomponent/ViewEditModules.js","Pages/SuperAdmin/Modules.js","Pages/SuperAdmin/subcomponent/AddLicenseManagerModal.js","Pages/SuperAdmin/subcomponent/DeleteLicenseModal.js","Pages/SuperAdmin/LicenseManager.js","Pages/components/AdminLoginForm.js","Pages/Admin/AdminLogin.js","Pages/components/WelcomeNote.js","services/StudentServices.js","Pages/components/StudentLoginForm.js","Pages/Student/StudentLogin.js","Pages/Student/subcomponents/CloseIcon.js","Pages/Student/subcomponents/SideMenu.js","Pages/Student/subcomponents/Dashboard.Frame.js","Pages/Student/subcomponents/StudentInfo.js","services/biodataService.js","Pages/Student/subcomponents/RegistrationProgress.js","services/sessionServices.js","services/flagServices.js","Pages/Student/subcomponents/SchoolYear.js","services/annoucementService.js","Pages/Student/subcomponents/PublicAnnouncement.js","services/courseServices.js","Pages/Student/subcomponents/Table.js","Pages/Student/StudentDashboard.js","Pages/Student/subcomponents/BiodataForm/StudentProfileData.js","Pages/Student/StudentProfile.js","Pages/Student/subcomponents/AcademicsSub.js/RegisterationRequirment.js","Pages/Student/subcomponents/AcademicsSub.js/EduObjective.js","Pages/Student/subcomponents/AcademicsSub.js/ModalTable.js","Pages/Student/subcomponents/AcademicsSub.js/AcademicsModal.js","Pages/Student/subcomponents/AcademicsSub.js/Data.js","Pages/Student/subcomponents/AcademicsSub.js/StudentTable.js","Pages/Student/subcomponents/AcademicsSub.js/Truncate.js","Pages/Student/subcomponents/AcademicsSub.js/EduTable.js","Pages/Student/Academics.js","Pages/Student/Courses.js","Pages/Student/subcomponents/ResultTable.js","Pages/Student/Results.js","Pages/components/ForgotPasswordForm.js","Pages/SuperAdmin/ForgotPassword.js","Routing/ProtectedRoute.js","Pages/Admin/subcomponent/DropdownIcons.js","Pages/Admin/subcomponent/SideMenu.js","Pages/Admin/subcomponent/Dashboardframe.js","Pages/Admin/subcomponent/DashboardCard.js","Pages/Admin/subcomponent/LineChart.js","Pages/Admin/subcomponent/RecentStudentComponent.js","Pages/Admin/AdminDashboard.js","services/institutionAdminServices.js","Pages/Admin/subcomponent/NewSession.js","Pages/Admin/subcomponent/EditSession.js","Pages/Admin/subcomponent/DeleteSession.js","Pages/Admin/subcomponent/NewSemester.js","Pages/Admin/subcomponent/EditSemester.js","Pages/Admin/subcomponent/DeleteSemester.js","Pages/Admin/subcomponent/PaginationComponent.js","Pages/Admin/subcomponent/SemesterTable.js","Pages/Admin/subcomponent/SessionTable.js","Pages/Admin/subcomponent/UpdateCurrentSession.js","Pages/Admin/SessionManagement.js","Pages/Admin/subcomponent/NewSchool.js","Pages/Admin/subcomponent/EditSchool.js","Pages/Admin/subcomponent/DeleteSchool.js","Pages/Admin/SchoolManagement.js","Pages/Admin/subcomponent/NewFaculty.js","Pages/Admin/subcomponent/EditFaculty.js","Pages/Admin/subcomponent/DeleteFaculty.js","Pages/Admin/FacultyManagement.js","Pages/Admin/subcomponent/NewDept.js","Pages/Admin/subcomponent/DeleteDept.js","Pages/Admin/subcomponent/EditDept.js","Pages/Admin/DeptManagement.js","Pages/Admin/subcomponent/NewProgram.js","Pages/Admin/subcomponent/EditProgram.js","Pages/Admin/subcomponent/DeleteProgram.js","Pages/Admin/ProgramManagement.js","Pages/Admin/CourseManagement.js","Pages/Admin/subcomponent/NewStudent.js","Pages/Admin/StudentManagement.js","Pages/Admin/subcomponent/NewStaff.js","Pages/Admin/StaffManagement.js","Pages/Admin/StaffRoles.js","Pages/Admin/subcomponent/NewDesignation.js","Pages/Admin/StaffDesignation.js","Pages/Admin/LectureManagement.js","Pages/Admin/subcomponent/NewLevels.js","Pages/Admin/subcomponent/EditLevels.js","Pages/Admin/subcomponent/DeleteLevels.js","Pages/Admin/ProgramLevels.js","Pages/Admin/subcomponent/NewCourseGrade.js","Pages/Admin/subcomponent/EditCourseGrade.js","Pages/Admin/subcomponent/DeleteCourseGrade.js","Pages/Admin/CourseGrade.js","services/attendanceService.js","Pages/Student/subcomponents/ClassAttendanceTable.js","Pages/Student/subcomponents/AttendanceStatus.js","Pages/Student/subcomponents/ExamAttendanceTable.js","Pages/Student/Attendance.js","services/examTimetableService.js","Pages/Student/Timetable.js","services/examRecordService.js","Pages/Student/StudentExamRecords.js","Pages/components/Annoucement.js","Pages/Student/StudentAnnoucement.js","Routing/routes.js","App.js","index.js"],"names":["Breadcrumb","title","subTitle","className","href","data-icon","data-inline","dateConverter","format","date","result","Date","year","getFullYear","month","getMonth","rawDate","getDate","toString","padStart","lastDateDigit","charAt","firstDateDigit","dateTimeConverter","hour","getHours","min","getMinutes","timeConverter","tableIndex","index","realIndex","getUserRole","token","jwt_decode","search","array","value","key","filter","a","toLowerCase","includes","getInstitutionId","localStorage","getItem","getWebUserId","dateToInputDate","monthRaw","dayRaw","day","getTokenFromLocalStorage","err","console","log","instance","axios","create","baseURL","process","timeout","headers","interceptors","request","use","config","Authorization","userDetails","get","loginUser","data","post","SideMenu","history","useHistory","logout","status","clear","push","pathname","message","src","alt","exact","to","onClick","Hambuger","store","createState","role","userId","alertNotification","alertMessage","alertType","email","firstName","lastName","phoneNumber","deptID","TopMenu","open","openMenu","React","useState","inputClose","setInputClose","placeholder","type","aria-label","aria-describedby","id","toUpperCase","memo","Footer","currentYear","DashboardFrame","children","StatusActive","StatusInactive","http","getInstitution","addNewInstitution","updateInstitution","put","deleteInstitution","getInstitutionType","addInstitutionAdmin","updateInstitutionAdmin","deleteInstitutionAdmin","getModules","linkModules","editModules","deleteInstitutionLicense","createLicense","ContentLoader","color","size","Dashboard","totalInstitution","setTotalInstitution","recentInstitution","setRecentInstitution","isLoading","setIsLoading","useEffect","res","length","reverse","slice","fetchData","Helmet","Container","Row","Col","lg","Card","Body","Text","Table","map","name","noOfModules","address","createDate","isDeleted","Loading","disabled","Spinner","as","animation","aria-hidden","SubmitBtn","StyledTextField","withStyles","root","borderBottomColor","borderColor","TextField","LoginForm","initialValues","onSubmit","validationSchema","btnState","formik","useFormik","handleSubmit","label","margin","fullWidth","InputLabelProps","shrink","variant","values","onChange","handleChange","error","touched","Boolean","errors","helperText","password","PopupAlert","setShowAlert","Alert","onClose","dismissible","predefinedUserRole","staff","mis","health","student","security","er","cafe","Login","userRole","set","isLoggedIn","setBtnState","user","setItem","userID","departmentID","setTimeout","Yup","required","motion","div","initial","x","animate","transition","duration","delay","style","display","justifyContent","flexWrap","width","marginTop","opacity","PaginationComponent","pageCount","handlePageClick","previousLabel","nextLabel","breakLabel","onPageChange","previousClassName","nextClassName","pageLinkClassName","previousLinkClassName","nextLinkClassName","activeLinkClassName","activeClassName","containerClassName","getState","countryId","getCountry","getGender","GetCommonData","NewInstitutionModal","props","webUser","showAlert","setAlertType","setMessage","isSubmit","setIsSubmit","institutionType","setInstitutionType","stateId","setStateId","setCountryId","images","setImages","append","setContentLength","contentLength","institutionTypeId","instituionEmail","principalName","principalPhoneNumber","addressLine1","addressLine2","city","createdBy","countries","Modal","aria-labelledby","centered","Header","closeButton","Title","select","MenuItem","multiple","imageList","addUpdateIndex","maxNumber","dataURLKey","onImageUpload","onImageUpdate","onImageRemoveAll","onImageRemove","isDragging","dragProps","image","data_url","Button","onHide","EditInstitutionModal","InstitutionEmail","enableReinitialize","DeleteInstitutionModal","addressLine3","fluid","Institutions","showAddNew","setAddNew","showAddEdit","setAddEdit","showAddDelete","setAddDelete","offset","setOffset","content","setContent","perPage","setPerPage","setPageCount","setRealIndex","institutions","setInstitutions","searchObj","setSearchObj","slicedData","setSlicedData","Math","ceil","show","htmlFor","e","target","event","searchText","responsive","bordered","hover","institution","license","expiryDate","primaryAdminName","class","selectedPage","selected","NewUserManagerModal","pryAdmin","setPryAdmin","setInstitution","gender","setGender","genders","isPrimary","otherNames","administratorUserName","administratorPassword","genderId","institutionId","matches","md","sm","FormGroup","FormControlLabel","control","Switch","checked","EditUserManagerModal","userName","DeleteUserManagerModal","UserManager","institutionAdmin","setInstitutionAdmin","institutionName","Selected","schoolProp","setInstitutionName","then","catch","NoneSelected","LinkInstitutionModal","addedInstitution","setAddedInstitution","add","setAdd","modules","setModules","modulesArray","setModulesArray","preventDefault","moduleIds","checkboxes","newArray","AddModuleModal","code","ViewEditModules","editInstitutionId","editInstitutionName","Modules","showAddModule","setAddModule","showEditModule","setEditModule","setEditInstitutionName","setEditInstitutionId","modulesTable","setModulesTable","updateDate","AddLicenseManagerModal","licenseType","setLicenseType","licenseKey","setLicenseKey","lisenceTypeId","generateLicense","DeleteLicenseModal","editData","LicenseManager","licenseState","setLicenseState","licenseTypeName","dateCreated","AdminLoginForm","AdminLogin","isValid","refreshToken","webUserId","admin","superAdmin","WelcomeNote","getStudentLogin","StudentLoginForm","marginBottom","StudentLogin","CloseIcon","CloseMenu","padding","removeItem","setOpen","fetch","studentInfo","matricNumber","programme","currentLevel","school","department","jambRegNumber","RegistrationProgress","progress","setProgress","styles","buildStyles","pathColor","textColor","progressPercent","text","completedRegProcess","totalRegProcess","getCurrentSessionSemester","SchoolYear","schoolYear","setSchoolYear","flag","setFlag","StudentID","textAlign","academicYear","semester","flagLevel","PublicAnnouncement","annoucements","setAnnoucements","splice","getStudentRegCourses","registerCourse","RegisteredCourses","regCourses","setRegCourses","scope","course","courseUnit","StudentDashboard","setUser","StudentInfo","StudentProfileData","studentProfile","setStudentProfile","fetchStudentProfileData","userImageURL","REACT_APP_ACE_URL","StudentProfile","RegisterationRequirment","EduObjective","ModalTable","handleDelete","userData","courseCode","courseTitle","courseDescription","leadLecturer","useStyles","makeStyles","theme","spacing","AcademicsModal","closeModal","classes","alertMsg","setAlertMsg","courses","setCourses","selectedCourse","setSelectedCourse","selectedCourseIDs","setSelectedCourseIDs","selectedViewCourseList","setSelectedViewCourseList","selectedDTOCourseList","setSelectedDTOCourseList","currentSemesterID","setCurrentSemesterID","currentSessionID","setCurrentSessionID","DepartmentID","semesterID","academicYearID","studentId","noValidate","autoComplete","SelectProps","native","courseIdDTO","courseID","prevArray","courseDetail","find","studentAcademicsData","ProgramStudy","unit","eligibility","Lecturer","Start","CourseType","Completion","Semester","session","MaximumCreditUnitAllowed","NoOfRegisteredCourses","totalUnit","StudentTable","SD","cursor","ReadMore","header","subHeader","isTruncated","setIsTruncated","openTable","setOpenTable","resultString","EduTable","modalIsOpen","setIsOpen","isOpen","onRequestClose","overlay","background","backdropFilter","border","backgroundColor","top","left","right","bottom","marginRight","D","Academics","Courses","setAcademicYear","selectedAcademicYear","setSelectedAcademicYear","setSemester","selectedSemester","setSelectedSemester","pastCourses","setPastCourses","SemesterID","AcademicYearID","courseRegisterationDate","ResultTable","Results","ForgotPasswordForm","ForgotPassword","ProtectedRoute","rest","auth","useLocation","render","location","state","from","Up","positionClass","Down","academicDropdownState","setAcademicDropdownState","staffDropdownState","setStaffDropdownState","Dashboardframe","DashboardCard","icon","iconClassName","LineChart","chartData","setChartData","labels","datasets","maleStudents","registeredStudentPerSession","pointBackgroundColor","pointBorderColor","femaleStudents","height","options","maintainAspectRatio","legend","scales","yAxes","ticks","max","stepSize","RecentStudentComponent","dateTime","dp","AdminDashboard","userCount","setUserCount","totalActiveStudent","totalInactiveStudent","totalStudent","totalStaff","autoHide","autoHeight","autoHeightMin","autoHeightMax","getDepartment","schoolId","facultyId","createDepartment","editDepartment","departmentId","headId","getFaculty","createFaculty","editFaculty","getSchool","createSchool","createSemester","editSemester","Id","createSession","editSession","getProgram","createProgram","editProgram","programId","getProgramLevel","createProgramLevel","getCourseGrade","createCourseGrade","NewSession","EditSession","editdata","contenthLength","DeleteSession","delete","NewSemester","EditSemester","DeleteSemester","SemesterTable","sessionId","handleSemesterEdit","sessionName","handleSemesterDelete","setSemesterEditData","semesterData","setSemesterData","searchData","setSearchData","SessionTable","setSessionData","sessionData","setSessionEditData","handleAddEdit","handleAddDelete","UpdateCurrentSession","SessionManagement","addNew","addEdit","addDelete","addNewSemester","setAddNewSemester","addEditSemester","setAddEditSemester","addDeleteSemester","setAddDeleteSemester","updateSchoolYear","setUpdateSchoolYear","recentSessionId","setRecentSessionId","recentSessionName","setRecentSessionName","sessionEditData","semesterEditData","reversedData","Tabs","defaultActiveKey","Tab","eventKey","NewSchool","EditSchool","DeleteSchool","SchoolManagement","schoolData","setSchoolData","schoolEditData","setSchoolEditData","NewFaculty","setSchool","EditFaculty","DeleteFaculty","FacultyManagement","facultyData","setFacultyData","facultyEditData","setFacultyEditData","NewDepartment","faculty","setFaculty","DeleteDepartment","EditDepartment","DeptManagement","departmentData","setDepartmentData","departmentEditData","setDepartmentEditData","NewDept","NewProgram","setDepartment","EditProgram","DeleteProgram","ProgramManagement","programData","setProgramData","programEditData","setProgramEditData","CourseManagement","field","NewStudent","handleFileInput","useRef","handleClick","current","click","setTitle","maritalStatus","setMaritalStatus","religion","setReligion","country","setCountry","setState","lga","setLga","program","setProgram","titles","religions","titleId","otherName","maritalStatusId","emergencyContact","dateOfBirth","maidenName","bloodGroup","genotype","weight","lgaId","residentAddress","matricNo","photo","countyId","Input","inputProps","MatricNo","inputRef","visibility","accept","InputProps","startAdornment","InputAdornment","position","endAdornment","StudentManagement","NewStaff","staffId","designation","employmentStartDate","contactAddress","StaffManagement","StaffRoles","description","designationCategory","StaffDesignation","NewDesignation","LectureManagement","NewLevel","levelCode","step","EditLevel","programLevelId","DeleteProgramLevel","ProgramLevels","programLevelData","setProgramLevelData","programLevelEditData","setProgramLevelEditData","NewLevels","EditLevels","DeleteLevels","NewCourseGrade","remark","gradeScore","minimumScore","maximumScore","EditCourseGrade","courseGradeId","minScore","maxScore","DeleteCourseGrade","CourseGrade","courseGradeData","setCourseGradeData","courseGradeEditData","setCourseGradeEditData","ClassAttendanceTable","attendance","totalClassesAttended","totalClassesHeld","attendancePercent","Present","Absent","Completed","Incomplete","ExamAttendanceTable","startTime","endTime","startAttendance","endAttendance","isCommence","supervisor","Attendance","classAtt","setClassAtt","examAtt","setExamAtt","Timetable","timetable","setTimetable","examStartTime","examDateTime","examDuration","venue","getStudentCurrentExamRecords","StudentExamRecords","setResult","otherAssessmentScore","examScore","totalScore","letterGrade","gradePoint","Annoucement","StudentAnnoucement","Routes","path","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68969802.chunk.js","sourcesContent":["const Breadcrumb = ({title, subTitle}) => {\r\n\r\n    // let monthArray = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']\r\n\r\n    // const currentDate = new Date()\r\n    // const date = currentDate.getDate().toString().padStart(2, \"0\")\r\n    // const month = currentDate.getMonth()\r\n    // const year = currentDate.getFullYear()\r\n\r\n    return (\r\n        <div className=\"breadcrumbs\">\r\n            <div className=\"title-section\">\r\n                <div className=\"section\"> <span className=\"title\"><a href=\"/\">{title}</a></span> <span className=\"iconify\" data-icon=\"eva:arrow-ios-forward-outline\" data-inline=\"false\"></span> {subTitle} </div>\r\n            </div>\r\n            <div className=\"last-login-section\">\r\n                <div className=\"last-login-detail\">\r\n                    {/* <div className=\"last-login\">\r\n                        <span className=\"iconify\" data-icon=\"typcn:time\" data-inline=\"false\"></span>\r\n                          Last Login: 01-March-2021\r\n                    </div>\r\n                    <div className=\"vl\"></div>\r\n                    <div className=\"today-date\">\r\n                        <span className=\"iconify\" data-icon=\"bx:bx-calendar\" data-inline=\"false\"></span>\r\n                           Today's Date: {`${date}-${monthArray[month]}-${year}`}\r\n                    </div> */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Breadcrumb;","import jwt_decode from 'jwt-decode';\r\n\r\nexport const dateConverter = (format) => {\r\n    if (!format) return \"\";\r\n\r\n    let monthArray = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']\r\n    let result = new Date(format)\r\n    let year = result.getFullYear()\r\n    let month = result.getMonth()\r\n    let date\r\n\r\n    let rawDate = result.getDate().toString().padStart(2, \"0\")\r\n\r\n    let lastDateDigit = rawDate.charAt(1)\r\n    let firstDateDigit = rawDate.charAt(0)\r\n\r\n    if (lastDateDigit === \"1\") {\r\n        if (firstDateDigit === \"1\") {\r\n            date = `${rawDate}th`\r\n        } else if (firstDateDigit === \"0\") {\r\n            date = `${rawDate}st`\r\n        } else {\r\n            date = `${rawDate}st`\r\n        }\r\n    } else if (lastDateDigit === \"2\") {\r\n        if (firstDateDigit === \"1\") {\r\n            date = `${rawDate}th`\r\n        } else {\r\n            date = `${rawDate}nd`\r\n        }\r\n    } else if (lastDateDigit === \"3\") {\r\n        if (firstDateDigit === \"1\") {\r\n            date = `${rawDate}th`\r\n        } else {\r\n            date = `${rawDate}rd`\r\n        }\r\n    } else {\r\n        date = `${rawDate}th`\r\n    }\r\n\r\n    return `${date} ${monthArray[month]}, ${year}`\r\n}\r\n\r\nexport const dateTimeConverter = (format) => {\r\n    if (!format) return \"\";\r\n\r\n    let monthArray = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']\r\n    let result = new Date(format)\r\n    let year = result.getFullYear()\r\n    let month = result.getMonth()\r\n    let date\r\n\r\n    let rawDate = result.getDate().toString().padStart(2, \"0\")\r\n\r\n    let lastDateDigit = rawDate.charAt(1)\r\n    let firstDateDigit = rawDate.charAt(0)\r\n\r\n    if (lastDateDigit === \"1\") {\r\n        if (firstDateDigit === \"1\") {\r\n            date = `${rawDate}th`\r\n        } else if (firstDateDigit === \"0\") {\r\n            date = `${rawDate}st`\r\n        } else {\r\n            date = `${rawDate}st`\r\n        }\r\n    } else if (lastDateDigit === \"2\") {\r\n        if (firstDateDigit === \"1\") {\r\n            date = `${rawDate}th`\r\n        } else {\r\n            date = `${rawDate}nd`\r\n        }\r\n    } else if (lastDateDigit === \"3\") {\r\n        if (firstDateDigit === \"1\") {\r\n            date = `${rawDate}th`\r\n        } else {\r\n            date = `${rawDate}rd`\r\n        }\r\n    } else {\r\n        date = `${rawDate}th`\r\n    }\r\n\r\n    let hour = result.getHours()\r\n    let min = result.getMinutes()\r\n\r\n    return `${hour}:${min} ${date} ${monthArray[month]}, ${year}`\r\n}\r\n\r\nexport const timeConverter = (format) => {\r\n    if (!format) return \"\";\r\n\r\n    let result = new Date(format)\r\n   \r\n    let hour = result.getHours()\r\n    let min = result.getMinutes()\r\n\r\n    return `${hour}:${min}`\r\n}\r\n\r\nexport const getUserFromLocalStorage = (token) => {\r\n    try {\r\n        const decoded = jwt_decode(token);\r\n        const user = decoded\r\n        return user\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const getFromLocalStorage = (value) => {\r\n    const result = localStorage.getItem(value);\r\n    return result\r\n}\r\n\r\nexport const getCurrentYear = () => {\r\n    const newDate = new Date()\r\n    const currentYear = newDate.getFullYear()\r\n    return currentYear\r\n}\r\n\r\nexport const tableIndex = (index, realIndex) => {\r\n    const value = index + realIndex\r\n    const result = value.toString().padStart(3, \"0\")\r\n    return result\r\n}\r\n\r\nexport const getUserRole = (token) => {\r\n    const decodedToken = jwt_decode(token)\r\n    const userRole = decodedToken[\"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\"]\r\n    return userRole\r\n}\r\n\r\nexport const search = (array, value, key) => {\r\n    return array.filter(a => a[key].toLowerCase().includes(value.toLowerCase()))\r\n}\r\n\r\nexport const getInstitutionId = () => {\r\n    const institutionId = localStorage.getItem(\"institutionId\")\r\n    return institutionId\r\n}\r\n\r\nexport const getWebUserId = () => {\r\n    const webUserId = localStorage.getItem(\"webUserId\")\r\n    return webUserId\r\n}\r\n\r\nexport const dateToInputDate = (format) => {\r\n    let result = new Date(format)\r\n    let year = result.getFullYear()\r\n    let monthRaw = result.getMonth() + 1\r\n    let dayRaw = result.getDate()\r\n\r\n    let month = monthRaw.toString().padStart(2, \"0\")\r\n    let day = dayRaw.toString().padStart(2, \"0\")\r\n\r\n    return `${year}-${month}-${day}`\r\n}\r\n\r\nexport const getTokenFromLocalStorage = () => {\r\n    try {\r\n        const token = localStorage.getItem(\"token\");\r\n        return token;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}","import axios from 'axios';\r\nimport { getTokenFromLocalStorage } from '../utils/Functions';\r\n\r\n\r\nconst { REACT_APP_ACE_URL } = process.env;\r\n\r\nexport const instance = axios.create({\r\n    baseURL: REACT_APP_ACE_URL,\r\n    timeout: 100000,\r\n    headers: {\r\n        'Accept': 'application/json',\r\n        // 'Authorization': `Bearer ${token}`,\r\n        'Access-Control-Allow-Origin': '*',\r\n    }\r\n})\r\n\r\ninstance.interceptors.request.use(function(config) {\r\n    const token = getTokenFromLocalStorage();\r\n    config.headers.Authorization = token ? `Bearer ${token}` : '';\r\n    return config;\r\n});","import { instance } from './httpService';\r\n\r\n\r\nexport const userDetails = () => {\r\n    return instance.get(\"/Account/LoggedIn/User\")\r\n}\r\n\r\nexport const loginUser = (data) => {\r\n    return instance.post(\"/Account/login\", data)\r\n}\r\n\r\nexport const getUserCount = () => {\r\n    return instance.get(\"/Account/UserCount\")\r\n}\r\n\r\nexport const logoutUser = () => {\r\n    return instance.post(\"/api/sme/authentication/logout\")\r\n}","import { IoMdLogOut } from 'react-icons/io';\r\nimport {NavLink, useHistory} from 'react-router-dom';\r\nimport {logoutUser} from '../../../services/userServices';\r\n\r\nconst SideMenu = () => {\r\n\r\n    const history = useHistory()\r\n\r\n    const logout = async () => {\r\n        try{\r\n            let res = await logoutUser()\r\n            if(res.status === 200){\r\n                localStorage.clear()\r\n                history.push({\r\n                    pathname: \"/\"\r\n                })\r\n            }\r\n        }\r\n        catch(err) {\r\n            console.log(err.message)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"side-menu\">\r\n            <div className=\"side-menu-content\">\r\n                <div className=\"logo-section\">\r\n                    <img src=\"/assets/images/Turon_Logo.png\" alt=\"logo\" />\r\n                    <div className=\"logo-txt\">iEduCare Tech</div>\r\n                </div>\r\n                <div className=\"nav-links\">\r\n                    <ul>\r\n                        <li>\r\n                            <NavLink exact to=\"/turon-dashboard\" > \r\n                            <span className=\"iconify\" data-icon=\"zmdi:view-dashboard\" data-inline=\"false\"></span>\r\n                                Dashboard\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                           <NavLink exact to=\"/institutions\" >\r\n                           <span className=\"iconify\" data-icon=\"gridicons:institution\" data-inline=\"false\"></span>\r\n                                Institutions\r\n                           </NavLink> \r\n                        </li>\r\n                        <li>\r\n                            <NavLink exact to=\"/user-manager\"> \r\n                            <span className=\"iconify\" data-icon=\"fluent:patient-32-filled\" data-inline=\"false\"></span> \r\n                                User Manager\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink exact to=\"/modules\"> \r\n                            <span className=\"iconify\" data-icon=\"ion:logo-buffer\" data-inline=\"false\"></span> \r\n                                Modules\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink exact to=\"/license-manager\"> \r\n                                <span className=\"iconify\" data-icon=\"uil:lock-access\" data-inline=\"false\"></span> \r\n                                License Manager\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink exact to=\"/support\">\r\n                            <span className=\"iconify\" data-icon=\"ant-design:notification-outlined\" data-inline=\"false\"></span> Notification\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink exact to=\"/logout\" onClick={logout}>\r\n                                <span className=\"iconify\" data-icon=\"ls:logout\" data-inline=\"false\"></span> \r\n                                Logout\r\n                            </NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideMenu;","import React from 'react'\r\n\r\nfunction Hambuger() {\r\n\r\n    return (\r\n        <div className=\"HambugerBody\">\r\n                <span className=\"iconify Hambuger\" data-icon=\"gg:menu-left\" data-inline=\"false\"></span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Hambuger\r\n","import { createState } from '@hookstate/core';\r\n\r\nconst store = createState({\r\n    role: '',\r\n    userId: '',\r\n    alertNotification: false,\r\n    alertMessage: '',\r\n    alertType: '',\r\n    email: '',\r\n    firstName: '',\r\n    lastName: '',\r\n    phoneNumber: '',\r\n    deptID: ''\r\n\r\n})\r\n\r\nexport default store;","import React from 'react';\r\nimport Hambuger from '../Student/subcomponents/Hambuger';\r\nimport store from '../../store/store';\r\nimport { useState } from '@hookstate/core';\r\n\r\nconst TopMenu = ({ open, openMenu, token }) => {\r\n\r\n    const [inputClose, setInputClose] = React.useState(true)\r\n\r\n    const {firstName} = useState(store)\r\n    const {lastName} = useState(store)\r\n    return (\r\n        <div className=\"top-menu\">\r\n            <div className=\"menu-btn menu-btnFlex\">\r\n                <button className=\"HambugerButton\" onClick={openMenu}>\r\n                    <Hambuger />\r\n                </button>\r\n                {inputClose ? <><div><span className=\"iconify\" data-icon=\"whh:student\" data-inline=\"false\"></span></div>\r\n                    <div><span className=\"user-name\"><strong>Welcome,</strong> {lastName.get() + \" \" + firstName.get()}</span></div>\r\n\r\n                </> : \"\"}\r\n\r\n            </div>\r\n            {!inputClose ? <div className=\"TopMenuInputContainer\"><input className=\"TopMenuInput\" placeholder=\"Search here\" /></div> : \"\"}\r\n\r\n            <div className=\"user-group\">\r\n                <div className=\"search\">\r\n                    <div className=\"input-group\">\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Search\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" />\r\n                        <span className=\"input-group-text\" id=\"basic-addon1\"><span className=\"iconify\" data-icon=\"akar-icons:search\"></span></span>\r\n                    </div>\r\n                </div>\r\n                {inputClose ? <div className=\"notification2\">\r\n                    <span onClick={() => setInputClose(false)}><span className=\"iconify Bellnotification\" data-icon=\"bx:bx-search\" data-inline=\"false\"></span></span>\r\n                </div> : \"\"}\r\n\r\n                <div className=\"notification\">\r\n                    <span className=\"iconify Bellnotification\" data-icon=\"clarity:notification-solid\"></span>\r\n                </div>\r\n                <div className=\"user-dp\">\r\n                    <span>\r\n                        {lastName.get().charAt(0).toUpperCase()}{firstName.get().charAt(0).toUpperCase()}\r\n                    </span>\r\n                </div>\r\n                {/* <div className=\"user-dropdown\">\r\n                    <span className=\"iconify\" data-icon=\"bx:bxs-down-arrow\" data-inline=\"false\"></span>\r\n                </div> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(TopMenu);","import {getCurrentYear} from '../../utils/Functions';\r\n\r\nconst Footer = () => {\r\n    let currentYear = getCurrentYear()\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"txt\">© {currentYear} Adeyemi College of Education. All Rights Reserved.</div>\r\n        </div>\r\n    )\r\n}\r\nexport default Footer;","import React from 'react';\r\nimport Breadcrumb from \"../../components/Breadcrumb\";\r\nimport SideMenu from \"./SideMenu\";\r\nimport TopMenu from \"../../components/TopMenu\";\r\nimport Footer from \"../../components/Footer\";\r\nimport {getFromLocalStorage} from '../../../utils/Functions'\r\n\r\n\r\nconst DashboardFrame = ({children, title, subTitle}) => {\r\n\r\n   let token = getFromLocalStorage(\"token\")\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <SideMenu/>\r\n            <div className=\"topbar\">\r\n                \r\n                <TopMenu token={token} />\r\n                <Breadcrumb title={title} subTitle={subTitle}/>\r\n                {children}\r\n                <Footer />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(DashboardFrame);\r\n","\r\nexport const StatusActive = () => {\r\n    return (\r\n        <div className=\"status-active\">\r\n            Active\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const StatusInactive = () => {\r\n    return (\r\n        <div className=\"status-inactive\">\r\n            Inactive\r\n        </div>\r\n    )\r\n}\r\n","import { instance } from './httpService';\r\n\r\nconst http = instance;\r\n\r\nexport const getInstitution = () => {\r\n    return http.get(\"/api/ieducare/institution/get\")\r\n}\r\n\r\nexport const addNewInstitution = (data) => {\r\n    return http.post(\"/api/ieducare/institution/post\", data)\r\n}\r\n\r\nexport const updateInstitution = (data) => {\r\n    return http.put(`/api/ieducare/institution/edit/${data.id}`, data)\r\n}\r\n\r\nexport const deleteInstitution = (data) => {\r\n    return http.put(`/api/ieducare/institution/edit/${data.id}`, data)\r\n}\r\n\r\nexport const getInstitutionType = () => {\r\n    return http.get(\"/api/ieducare/institutiontype/get\")\r\n}\r\n\r\nexport const getInstitutionAdmin = () => {\r\n    return http.get(\"/api/ieducare/institutionadministrator/get\")\r\n}\r\n\r\nexport const addInstitutionAdmin = (data) => {\r\n    return http.post(\"/api/ieducare/institutionadministrator/post\", data)\r\n}\r\n\r\nexport const updateInstitutionAdmin = (data) => {\r\n    return http.put(`/api/ieducare/institutionadministrator/edit/${data.id}`, data)\r\n}\r\n\r\nexport const deleteInstitutionAdmin = (data) => {\r\n    return http.put(`/api/ieducare/institutionadministrator/edit/${data.id}`, data)\r\n}\r\n\r\nexport const getModules = () => {\r\n    return http.get(\"/api/ieducare/module/get\")\r\n}\r\n\r\nexport const linkModules = (data) => {\r\n    return http.post(\"/api/ieducare/modulesubscription/post/range\", data)\r\n}\r\n\r\nexport const editModules = (data) => {\r\n    return http.put(\"api/ieducare/modulesubscription/edit/range\", data)\r\n}\r\n\r\nexport const getInstitutionLicense = () => {\r\n    return http.get(\"/api/ieducare/institutionlicense/get\")\r\n}\r\n\r\nexport const deleteInstitutionLicense = (id, data) => {\r\n    return http.put(`/api/ieducare/institutionlicense/edit/${id}`, data)\r\n}\r\n\r\nexport const getLicenseType = () => {\r\n    return http.get(\"/api/ieducare/licensetype/get\")\r\n}\r\n\r\nexport const createLicense = (data) => {\r\n    return http.post(\"/api/ieducare/institutionlicense/post\", data)\r\n}\r\n\r\nexport const generateLicenseKey = () => {\r\n    return http.get(\"/api/sme/admin/user/generatelicensekey\")\r\n}","import {PropagateLoader} from 'react-spinners';\r\n\r\nconst ContentLoader = () => {\r\n    return (\r\n        <div className=\"loader\">\r\n            <PropagateLoader \r\n                color=\"#16BC5D\"\r\n                size={15}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContentLoader\r\n","import DashboardFrame from './subcomponent/DashboardFrame';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Container, Col, Row, Card, Table } from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport {StatusActive, StatusInactive} from './subcomponent/Status';\r\nimport {useEffect, useState} from 'react';\r\nimport {dateConverter} from '../../utils/Functions';\r\nimport {getInstitution} from '../../services/institutionServices';\r\nimport ContentLoader from '../components/ContentLoader';\r\n\r\nconst Dashboard = () => {\r\n    const [totalInstitution, setTotalInstitution] = useState(0)\r\n    const [recentInstitution, setRecentInstitution] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n\r\n    useEffect(()=>{\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getInstitution()\r\n                setTotalInstitution(res.data.length)\r\n                let data = res.data\r\n                let result = data.reverse().slice(0, 5)\r\n                setRecentInstitution(result)\r\n                setIsLoading(false)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    return (\r\n        <DashboardFrame title=\"Administrator\" subTitle=\"Dashboard\">\r\n            <Helmet>\r\n                <title>Admin Dashboard | iEduCare</title>\r\n            </Helmet>\r\n            <div className=\"content-page\">\r\n                \r\n                {isLoading ? \r\n                <ContentLoader />\r\n                :\r\n                <Container>\r\n                    <Row>\r\n                        <Col lg={4}>\r\n                            <Card className=\"detail-card\">\r\n                                <Card.Body>\r\n                                    <Card.Text>\r\n                                        <div className=\"card-content\">\r\n                                            <div className=\"desc\">\r\n                                                <div className=\"icon\">\r\n                                                    <span className=\"iconify\" data-icon=\"gridicons:institution\" data-inline=\"false\"></span>\r\n                                                </div>\r\n                                                <div className=\"text\">\r\n                                                    Total Number of Institutions\r\n                                            </div>\r\n                                            </div>\r\n                                            <div className=\"vl\"></div>\r\n                                            <div className=\"value\">\r\n                                                {totalInstitution}\r\n                                        </div>\r\n                                        </div>\r\n                                    </Card.Text>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>\r\n                        <Col lg={4}>\r\n                            <Card className=\"detail-card\">\r\n                                <Card.Body>\r\n                                    <Card.Text>\r\n                                        <div className=\"card-content\">\r\n                                            <div className=\"desc\">\r\n                                                <div className=\"icon\">\r\n                                                    <span className=\"iconify\" data-icon=\"clarity:users-solid\" data-inline=\"false\"></span>\r\n                                                </div>\r\n                                                <div className=\"text\">\r\n                                                    Total number of student population\r\n                                            </div>\r\n                                            </div>\r\n                                            <div className=\"vl\"></div>\r\n                                            <div className=\"value\">\r\n                                                210\r\n                                        </div>\r\n                                        </div>\r\n                                    </Card.Text>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>\r\n                        <Col lg={4}>\r\n                            <Card className=\"detail-card\">\r\n                                <Card.Body>\r\n                                    <Card.Text>\r\n                                        <div className=\"card-content\">\r\n                                            <div className=\"desc\">\r\n                                                <div className=\"icon\">\r\n                                                    <span className=\"iconify\" data-icon=\"ri:hand-coin-fill\" data-inline=\"false\"></span>\r\n                                                </div>\r\n                                                <div className=\"text\">\r\n                                                    Total Payment Profit\r\n                                            </div>\r\n                                            </div>\r\n                                            <div className=\"vl\"></div>\r\n                                            <div className=\"value\">\r\n                                                ₦255, 000\r\n                                        </div>\r\n                                        </div>\r\n                                    </Card.Text>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col lg={12}>\r\n                            <div className=\"table-section\">\r\n                                <div className=\"header\"> Recently Added Institutions </div>\r\n                                <Table className=\"border\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Name of Institution</th>\r\n                                            <th>Number of Modules</th>\r\n                                            <th>Date Created</th>\r\n                                            <th>Status</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {recentInstitution.map((data) => (\r\n                                            <tr key={data.id}>\r\n                                                <td className=\"school\">{data.name}</td>\r\n                                                <td className=\"module\"> <Link to=\"/modules\"> {data.noOfModules} </Link></td>\r\n                                                <td>{dateConverter(data.address.createDate)} </td>\r\n                                                <td> { data.address.isDeleted ? <StatusInactive /> : <StatusActive />} </td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        \r\n                                    </tbody>\r\n                                </Table>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            }\r\n            </div>\r\n        </DashboardFrame>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","import { Spinner } from 'react-bootstrap';\r\n\r\nexport const Loading = () => {\r\n    return (\r\n        <button type=\"submit\" className=\"login-btn\" disabled>\r\n            <Spinner\r\n                as=\"span\"\r\n                animation=\"border\"\r\n                size=\"sm\"\r\n                role=\"status\"\r\n                aria-hidden=\"true\"\r\n            />\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport const SubmitBtn = () => {\r\n    return (\r\n        <button type=\"submit\" className=\"login-btn\">\r\n            Sign In\r\n            <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span>\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\n","import { withStyles } from '@mui/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst StyledTextField = withStyles({\r\n    root: {\r\n      '& label.Mui-focused': {\r\n        color: '#16BC5D',\r\n      },\r\n      '& .MuiInput-underline:after': {\r\n        borderBottomColor: '#16BC5D',\r\n      },\r\n      '& .MuiOutlinedInput-root': {\r\n        '& fieldset': {\r\n          borderColor: '#333333',\r\n        },\r\n        '&:hover fieldset': {\r\n          borderColor: '#16BC5D',\r\n        },\r\n        '&.Mui-focused fieldset': {\r\n          borderColor: '#16BC5D',\r\n        },\r\n      },\r\n    },\r\n  })(TextField);\r\n\r\n  export default StyledTextField;","import { Row, Col, Container } from 'react-bootstrap';\r\nimport { useFormik } from 'formik';\r\nimport { Link } from 'react-router-dom';\r\nimport { Loading, SubmitBtn } from './LoginBtns';\r\nimport StyledTextField from './StyledTextField';\r\n\r\n\r\nconst LoginForm = ({ initialValues, onSubmit, validationSchema, btnState }) => {\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        onSubmit: onSubmit,\r\n        validationSchema: validationSchema\r\n    })\r\n\r\n    return (\r\n        <section>\r\n            <form onSubmit={formik.handleSubmit} id=\"\">\r\n                <Container>\r\n                    <div>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <StyledTextField\r\n                                    label=\"UserID\"\r\n                                    type=\"email\"\r\n                                    name=\"userId\"\r\n                                    id=\"userId\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth \r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    placeholder=\"Email\"\r\n                                    value={formik.values.userId}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.userId && Boolean(formik.errors.userId)}\r\n                                    helperText={formik.touched.userId && formik.errors.userId}\r\n                                    className=\"login-input\"\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                    <div>\r\n                        <Row>\r\n                            <Col lg={12} >\r\n                                <StyledTextField\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    fullWidth \r\n                                    id=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    margin=\"normal\"\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.password}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.password && Boolean(formik.errors.password)}\r\n                                    helperText={formik.touched.password && formik.errors.password}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                    <Row>\r\n                        <Col lg={6}>\r\n                            <Link to=\"/forgot-password\" className=\"forgot-pwd\">Forgot Password</Link>\r\n                        </Col>\r\n                        <Col lg={6}>\r\n                            {btnState ? <Loading /> : <SubmitBtn />}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </form>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default LoginForm\r\n","import {Alert} from 'react-bootstrap';\r\n\r\nexport const PopupAlert = ({alertType, setShowAlert, message}) => {\r\n    return (\r\n      <Alert variant={alertType} onClose={() => setShowAlert(false)} dismissible>\r\n        <p>\r\n          <b>{message}</b>\r\n        </p>\r\n      </Alert>\r\n    );\r\n  }","export const predefinedUserRole = {\r\n    staff: \"Staff\",\r\n    mis: \"MIS\",\r\n    health: \"Health\",\r\n    student: \"Student\",\r\n    security: \"Security\",\r\n    er: \"Exams&Records\",\r\n    cafe: \"Cafe\",\r\n}","import {Helmet} from 'react-helmet';\r\nimport LoginForm from '../components/LoginForm';\r\nimport * as Yup from 'yup';\r\nimport {useHistory} from 'react-router-dom';\r\nimport React, {useEffect} from 'react';\r\nimport {loginUser} from '../../services/userServices';\r\nimport {PopupAlert} from '../components/Alert';\r\nimport {getTokenFromLocalStorage, getUserRole} from '../../utils/Functions';\r\nimport {predefinedUserRole} from '../../utils/enums';\r\nimport { useState } from '@hookstate/core';\r\nimport store from '../../store/store';\r\nimport { motion } from 'framer-motion';\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\n\r\n\r\nconst Login = () => {\r\n\r\n    let history = useHistory()\r\n\r\n    const {role} = useState(store)\r\n    const {alertType} = useState(store)\r\n    const {alertNotification} = useState(store)\r\n    const {alertMessage} = useState(store)\r\n    const {firstName} = useState(store)\r\n    const {lastName} = useState(store)\r\n    const {phoneNumber} = useState(store)\r\n    const {email} = useState(store)\r\n    const {userId} = useState(store)\r\n    const {deptID} = useState(store)\r\n    \r\n    useEffect(() => {\r\n        try{\r\n            const isLoggedIn = async () => {\r\n                const token = getTokenFromLocalStorage()\r\n                if(token){\r\n                    const userRole = getUserRole(token)\r\n                    role.set(userRole)\r\n                    if (userRole === predefinedUserRole.student){\r\n                        history.push({\r\n                            pathname: \"/mydashboard\"\r\n                        })\r\n                    }\r\n                    else {\r\n                        history.push({\r\n                            pathname: \"/dashboard\"\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            isLoggedIn()\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }, [])\r\n    \r\n    const[btnState, setBtnState] = React.useState(false)\r\n\r\n    const initialValues = {\r\n        userId: '',\r\n        password: ''\r\n    }\r\n\r\n    const onSubmit = async (user) => {\r\n        setBtnState(true)\r\n        try{\r\n            const res = await loginUser(user)\r\n            const status = res.status\r\n            const data = res.data\r\n            if(status === 200){\r\n                localStorage.setItem(\"token\", data.token)\r\n                role.set(data.role)\r\n                userId.set(data.userID)\r\n                firstName.set(data.firstName)\r\n                lastName.set(data.lastName)\r\n                phoneNumber.set(data.phoneNumber)\r\n                email.set(data.email)\r\n                deptID.set(data.departmentID)\r\n                alertType.set(\"success\")\r\n                alertMessage.set(\"Login Successful\")\r\n                alertNotification.set(true)\r\n                if (data.role === predefinedUserRole.student){\r\n                    setTimeout(() => {\r\n                        setBtnState(false)\r\n                        alertNotification.set(false)\r\n                        history.push({\r\n                            pathname: \"/mydashboard\"\r\n                        })\r\n                    }, 1000)\r\n                }\r\n                else {\r\n                    setTimeout(() => {\r\n                        setBtnState(false)\r\n                        alertNotification.set(false)\r\n                        history.push({\r\n                            pathname: \"/dashboard\"\r\n                        })\r\n                    }, 1000)\r\n                }\r\n                \r\n            }\r\n            else{\r\n                setBtnState(false)\r\n                alertType.set(\"danger\")\r\n                alertMessage.set(\"Invalid Email or Password\")\r\n                alertNotification.set(true)\r\n            }\r\n        }\r\n        catch(err) {\r\n            setBtnState(false)\r\n            alertType.set(\"danger\")\r\n            alertMessage.set(\"Invalid Email or Password\")\r\n            alertNotification.set(true)\r\n        }\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        userId: Yup.string().email(\"Invalid Email Format\").required(\"Student Email is required\"),\r\n        password: Yup.string().required(\"Password is required\")\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Login | Adeyemi College Of Education</title>\r\n            </Helmet>\r\n            <div className=\"content-page admin\">\r\n                <Container>\r\n                    <Row>\r\n                    <Col lg={6}>\r\n                            <motion.div \r\n                                className=\"uni-landing\"\r\n                                initial={{x: 800}}\r\n                                animate={{x: 0}}\r\n                                transition={{duration: 1.5, delay: 0.5}}\r\n                            >\r\n                                <div className=\"uni-logo-section\">\r\n                                    <div style={{ display: \"flex\", justifyContent: \"center\", flexWrap: \"wrap\", }}>\r\n                                        <img src=\"./assets/images/logo.png\" style={{ width: \"15%\", marginTop: \"30px\" }} alt=\"Logo\" />\r\n                                        <div className=\"logo-txt\">Adeyemi College of Education</div>\r\n                                        {/* <div style={{ width: \"100%\" }} className=\"uni-name\"><img style={{ width: \"20%\", margin: \"0\" }} src=\"./assets/images/Vector(2).png\" alt=\"Login Logo\" /></div> */}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"login-img\">\r\n                                    <img src=\"./assets/images/login-img.png\" alt=\"Login\" />\r\n                                </div>\r\n                            </motion.div>\r\n                        </Col>\r\n                        <Col lg={6}>\r\n                            <motion.div \r\n                                className=\"sch-admin\" \r\n                                id=\"sch-admin\"\r\n                                initial={{opacity: 0}}\r\n                                animate={{opacity: 1}}\r\n                                transition={{duration: 2.5, delay: 1.5}}\r\n                            >\r\n                                <div className=\"admin-login\">\r\n                                    <div className=\"header\">Login</div>\r\n                                    {alertNotification.get() && <PopupAlert alertType={alertType.get()} setShowAlert={alertNotification.set} message={alertMessage.get()} />}\r\n                                    <LoginForm initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema} btnState={btnState} />\r\n                                </div>\r\n                                <div className=\"login-footer\">Copyright © 2021.  All Rights Reserved - Powered by Adeyemi College of Education </div>\r\n                            </motion.div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import ReactPaginate from 'react-paginate';\r\n\r\n\r\nconst PaginationComponent = ({pageCount, handlePageClick}) => {\r\n  \r\n    return(\r\n        <ReactPaginate \r\n            previousLabel=\"Previous\"\r\n            nextLabel=\"Next\"\r\n            breakLabel=\"...\"\r\n            pageCount={pageCount}\r\n            onPageChange={handlePageClick}\r\n            previousClassName=\"page-item\"\r\n            nextClassName=\"page-item\"\r\n            pageLinkClassName=\"page-link\"\r\n            previousLinkClassName=\"page-link\"\r\n            nextLinkClassName=\"page-link\"\r\n            activeLinkClassName=\"activeLabelClass\"\r\n            activeClassName=\"page-item active\"\r\n            containerClassName=\"pagination pagination-sm\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default PaginationComponent;","import { instance } from './httpService';\r\n\r\nconst http = instance;\r\n\r\nexport const getLGA = (stateId) => {\r\n    return http.get(`/api/ieducare/common/lga/get/${stateId}`)\r\n}\r\n\r\nexport const getState = (countryId) => {\r\n    return http.get(`/api/ieducare/common/state/get/${countryId}`)\r\n}\r\n\r\nexport const getCountry = () => {\r\n    return http.get(\"/api/ieducare/common/get\")\r\n}\r\n\r\nexport const getGender = () => {\r\n    return http.get(\"/api/ieducare/common/get\")\r\n}\r\nexport const GetCommonData = () => {\r\n    return http.get(\"/api/ieducare/common/get\")\r\n}\r\nexport const getAcademicYears = () => {\r\n    return http.get(\"/ControlledData/AcademicYear/All\")\r\n}\r\n\r\nexport const getSemesters = () => {\r\n    return http.get(\"/ControlledData/Semester/All\")\r\n}","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport {useState, useEffect} from 'react';\r\nimport * as Yup from 'yup';\r\nimport {addNewInstitution, getInstitutionType} from '../../../services/institutionServices';\r\nimport {getState, getCountry} from '../../../services/commonServices';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ImageUploading from \"react-images-uploading\";\r\nimport {PopupAlert} from '../../components/Alert';\r\n\r\n\r\nconst NewInstitutionModal = (props) => {\r\n    const webUser = localStorage.getItem(\"webUserId\")\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false) \r\n\r\n    const [institutionType, setInstitutionType] = useState([])\r\n    const [stateId, setStateId] = useState([])\r\n    const [countryId, setCountryId] = useState([])\r\n\r\n    const [images, setImages] = useState([]);\r\n    \r\n    const onSubmit = async (data) => {\r\n        if(images.length > 0){\r\n            data.append(\"file\", images)\r\n        }\r\n        setIsSubmit(true)\r\n\r\n        try{\r\n            const res = await addNewInstitution(data)\r\n            if (res.status === 204 || res.status === 200){\r\n                setAlertType(\"success\")\r\n                setMessage(`${data.name} successfully Added`)\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength + 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(`Failed to add ${data.name}`)\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n        \r\n    }\r\n\r\n    const initialValues = {\r\n        name: '',\r\n        institutionTypeId: '',\r\n        instituionEmail: '',\r\n        principalName: '',\r\n        principalPhoneNumber: '0',\r\n        addressLine1: '',\r\n        addressLine2: 'null',\r\n        city: '',\r\n        countryId: '',\r\n        stateId: '',\r\n        createdBy: webUser\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Institution Name is Required\"),\r\n        institutionTypeId: Yup.string().required(\"Type of Institution is Required \"),\r\n        instituionEmail: Yup.string().email(\"Invalid Email Entered\").required(\"Principal Email is Required\"),\r\n        principalName: Yup.string().required(\"Principal Name is Required\"),\r\n        principalPhoneNumber: Yup.string().min(11).required('A phone number is required'),\r\n        addressLine1: Yup.string().required(\"Institution Address Required\"),\r\n        addressLine2: Yup.string(),\r\n        city: Yup.string().required(\"City is Required\"),\r\n        countryId: Yup.string().required(\"Country is Required\"),\r\n        stateId: Yup.string().required(\"State is Required\"),\r\n        createdBy: Yup.string()\r\n    })\r\n\r\n    const formik = useFormik({\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n    const maxNumber = 1;\r\n    const onChange = (imageList, addUpdateIndex) => {\r\n        // data for submit\r\n        console.log(imageList, addUpdateIndex);\r\n        setImages(imageList);\r\n    };\r\n\r\n    useEffect(()=> {\r\n        const fetchData = async () => {\r\n            try{\r\n                let res = await getState(formik.values.countryId)\r\n                setStateId(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }  \r\n        }\r\n        fetchData()\r\n    }, [formik.values.countryId])\r\n\r\n    useEffect(()=> {\r\n        const fetchData = async () => {\r\n            try{\r\n                let res = await getCountry()\r\n                setCountryId(res.data.countries)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }  \r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    useEffect(()=> {\r\n        const fetchData = async () => {\r\n            try{\r\n                let res = await getInstitutionType()\r\n                setInstitutionType(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }  \r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"lg\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Add New Institutions\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Modal.Body className=\"\">\r\n                        <Container> \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={6}>\r\n                                <Row>\r\n                                    <TextField \r\n                                        type=\"text\" \r\n                                        name=\"name\" \r\n                                        id=\"name\" \r\n                                        placeholder=\"Name of Institution\" \r\n                                        label=\"Name of Institution\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.name}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                        helperText={formik.touched.name && formik.errors.name}\r\n                                    />\r\n                                </Row>\r\n                                <Row>\r\n                                    <TextField \r\n                                        label=\"Institution Type\" \r\n                                        select \r\n                                        name=\"institutionTypeId\"\r\n                                        placeholder=\"Name of Institution\" \r\n                                        id=\"institutionTypeId\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.institutionTypeId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.institutionTypeId && Boolean(formik.errors.institutionTypeId)}\r\n                                        helperText={formik.touched.institutionTypeId && formik.errors.institutionTypeId} \r\n                                    >\r\n                                        <MenuItem value=\"\"> Type of Institution </MenuItem>\r\n                                        {institutionType.map((data)=>(\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name} </MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </Row>\r\n                                <Row>\r\n                                <TextField \r\n                                    type=\"text\" \r\n                                    name=\"addressLine1\" \r\n                                    id=\"addressLine1\"\r\n                                    placeholder=\"Address of Institution\"\r\n                                    label=\"Address of Institution\" \r\n                                    margin=\"normal\"\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.addressLine1}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.addressLine1 && Boolean(formik.errors.addressLine1)}\r\n                                    helperText={formik.touched.addressLine1 && formik.errors.addressLine1}\r\n                                />\r\n                                </Row>\r\n                                <Row id=\"select-input\">\r\n                                    <TextField \r\n                                        label=\"State\" \r\n                                        select \r\n                                        name=\"stateId\"\r\n                                        id=\"stateId\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.stateId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.stateId && Boolean(formik.errors.stateId)}\r\n                                        helperText={formik.touched.stateId && formik.errors.stateId} \r\n                                    >\r\n                                         <MenuItem value=\"\"> Select State </MenuItem>\r\n                                        {stateId.map((data)=>(\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name} </MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </Row>\r\n                                <Row>\r\n                                    <TextField  \r\n                                        type=\"text\" \r\n                                        name=\"principalName\" \r\n                                        id=\"principalName\"\r\n                                        placeholder=\"Name of Principal\"\r\n                                        label=\"Name of Principal\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.principalName}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.principalName && Boolean(formik.errors.principalName)}\r\n                                        helperText={formik.touched.principalName && formik.errors.principalName}\r\n                                    />\r\n                                </Row>\r\n                            </Col> \r\n                            <Col lg={6}>\r\n                                <Row>\r\n                                    <ImageUploading\r\n                                        multiple\r\n                                        value={images}\r\n                                        onChange={onChange}\r\n                                        maxNumber={maxNumber}\r\n                                        dataURLKey=\"data_url\"\r\n                                    >\r\n                                        {({\r\n                                        imageList,\r\n                                        onImageUpload,\r\n                                        onImageRemoveAll,\r\n                                        onImageUpdate,\r\n                                        onImageRemove,\r\n                                        isDragging,\r\n                                        dragProps\r\n                                        }) => (\r\n                                        // write your building UI\r\n                                        <div className=\"upload__image-wrapper additional\">\r\n                                            {images.length !== 0 ? imageList.map((image, index) => (\r\n                                            <div key={index} className=\"image-item add\">\r\n                                                <img src={image.data_url} alt=\"\" width=\"100\" />\r\n                                                <div className=\"image-item__btn-wrapper\">\r\n                                                <button type=\"button\" className=\"updateBtn\" onClick={() => onImageUpdate(index)}>Update <span className=\"iconify\" data-icon=\"bx:bx-image-add\" data-inline=\"false\"></span></button>\r\n                                                <button type=\"button\" className=\"deleteBtn\" onClick={() => onImageRemove(index)}><span className=\"iconify\" data-icon=\"fluent:delete-24-filled\" data-inline=\"false\"></span></button>\r\n                                                </div>\r\n                                            </div>\r\n                                            ))\r\n                                            :\r\n                                            <div className=\"image-item\">\r\n                                                <img src=\"./assets/images/placeholder.png\" alt=\"School Placeholder\" />\r\n                                            </div>\r\n                                            }\r\n                                            <div className=\"uploadLabel\">\r\n                                                You can change your profile picture\r\n                                            </div>\r\n                                            {images.length === 0 && \r\n                                                <button \r\n                                                type=\"button\"\r\n                                                className=\"uploadBtn\"\r\n                                                style={isDragging ? { color: \"red\" } : null}\r\n                                                onClick={onImageUpload}\r\n                                                {...dragProps}\r\n                                                >\r\n                                                Upload <span className=\"iconify\" data-icon=\"bx:bx-image-add\" data-inline=\"false\"></span>\r\n                                                </button>\r\n                                            }\r\n                                            {/* &nbsp;\r\n                                            <button onClick={onImageRemoveAll}>Remove all image</button> */}\r\n                                        </div>\r\n                                        )}\r\n                                    </ImageUploading>\r\n                                </Row>\r\n                                <Row>\r\n                                    <TextField \r\n                                        type=\"text\" \r\n                                        name=\"city\" \r\n                                        id=\"city\"\r\n                                        placeholder=\"City\"\r\n                                        label=\"City\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.city}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.city && Boolean(formik.errors.city)}\r\n                                        helperText={formik.touched.city && formik.errors.city}\r\n                                    />\r\n                                </Row>\r\n                                <Row id=\"select-input\">\r\n                                <TextField \r\n                                        label=\"Country\" \r\n                                        select \r\n                                        name=\"countryId\"\r\n                                        id=\"countryId\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.countryId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.countryId && Boolean(formik.errors.countryId)}\r\n                                        helperText={formik.touched.countryId && formik.errors.countryId} \r\n                                    >\r\n                                         <MenuItem value=\"\"> Select Country </MenuItem>\r\n                                        {countryId.map((data)=>(\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name} </MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </Row>\r\n                                <Row>\r\n                                    <TextField \r\n                                        type=\"email\" \r\n                                        name=\"instituionEmail\" \r\n                                        id=\"instituionEmail\" \r\n                                        placeholder=\"Institution  Email\"\r\n                                        label=\"Institution  Email\"\r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.instituionEmail}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.instituionEmail && Boolean(formik.errors.instituionEmail)}\r\n                                        helperText={formik.touched.instituionEmail && formik.errors.instituionEmail}    \r\n                                    />\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            {/* <   Col lg={6} md={12} sm={12}>\r\n                                    <label htmlFor=\"file\">Upload School Profile Picture</label>\r\n                                    <TextField type=\"file\" name=\"file\" id=\"file\" className=\"form-control\" />\r\n                                    <small id=\"passwordHelpBlock\" className=\"form-text text-danger\">\r\n                                       \r\n                                    </small>\r\n                            </Col> */}\r\n                            {/* <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"custom-file\">\r\n                                        <input type=\"file\" className=\"custom-file-input\" id=\"validatedCustomFile\" required />\r\n                                        <label className=\"custom-file-label\" htmlFor=\"validatedCustomFile\">Upload ...</label>\r\n                                        <small id=\"passwordHelpBlock\" className=\"form-text text-danger\">\r\n                                            \r\n                                        </small>\r\n                                    </div>\r\n                            </Col> */}\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit ? true : false}>{\r\n                        isSubmit ? \"Submitting...\" : \"Submit\"\r\n                    }</button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default NewInstitutionModal\r\n","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {useState, useEffect} from 'react';\r\nimport * as Yup from 'yup';\r\nimport ImageUploading from \"react-images-uploading\";\r\nimport {updateInstitution, getInstitutionType} from '../../../services/institutionServices';\r\nimport {getState, getCountry} from '../../../services/commonServices';\r\nimport {PopupAlert} from '../../components/Alert';\r\n\r\n\r\nconst EditInstitutionModal = (props) => {\r\n\r\n    const {data} = props\r\n\r\n    const [institutionType, setInstitutionType] = useState([])\r\n    const [images, setImages] = useState([]);\r\n    const [stateId, setStateId] = useState([])\r\n    const [countryId, setCountryId] = useState([])\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n\r\n    const maxNumber = 1;\r\n    const onChange = (imageList, addUpdateIndex) => {\r\n        // data for submit\r\n        console.log(imageList, addUpdateIndex);\r\n        setImages(imageList);\r\n    };\r\n    \r\n    const webUser = localStorage.getItem(\"webUserId\")\r\n\r\n    useEffect(()=> {\r\n        const fetchData = async () => {\r\n            try{\r\n                let res = await getInstitutionType()\r\n                setInstitutionType(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }  \r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const onSubmit = async (data) => {\r\n        if (images.length > 0){\r\n            data.append(\"file\", images)\r\n        }\r\n        setIsSubmit(true)\r\n        try{\r\n            let res = await updateInstitution(data)\r\n            if (res.status === 204 || res.status === 200){\r\n                setAlertType(\"success\")\r\n                setMessage(\"Institution Edited Successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Edit Institution\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Failed to Connect to Server\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        name: data.name,\r\n        institutionTypeId: data.institutionTypeId,\r\n        instituionEmail: data.InstitutionEmail,\r\n        principalName: data.principalName,\r\n        principalPhoneNumber: data.principalPhoneNumber,\r\n        addressLine1: '',\r\n        addressLine2: '',\r\n        city: '',\r\n        countryId: '',\r\n        stateId: '',\r\n        createdBy: webUser,\r\n        isDeleted: false\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Institution Name is Required\"),\r\n        institutionTypeId: Yup.string().required(\"Type of Institution is Required \"),\r\n        instituionEmail: Yup.string().email(\"Invalid Email Entered\").required(\"Principal Email is Required\"),\r\n        principalName: Yup.string().required(\"Principal Name is Required\"),\r\n        principalPhoneNumber: Yup.string().min(11).required('A phone number is required'),\r\n        addressLine1: Yup.string().required(\"Institution Address Required\"),\r\n        addressLine2: Yup.string(),\r\n        city: Yup.string().required(\"City is Required\"),\r\n        countryId: Yup.string().required(\"Country is Required\"),\r\n        stateId: Yup.string().required(\"State is Required\"),\r\n        createdBy: Yup.string()\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n    useEffect(()=> {\r\n        const fetchData = async () => {\r\n            try{\r\n                let res = await getState(formik.values.countryId)\r\n                setStateId(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }  \r\n        }\r\n        fetchData()\r\n    }, [formik.values.countryId])\r\n\r\n    useEffect(()=> {\r\n        const fetchData = async () => {\r\n            try{\r\n                let res = await getCountry()\r\n                setCountryId(res.data.countries)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }  \r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"lg\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Edit Institution\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Modal.Body className=\"\">\r\n                        <Container>    \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}  \r\n                        <Row>\r\n                        <Col lg={6}>\r\n                                <Row>\r\n                                    <TextField \r\n                                        type=\"text\" \r\n                                        name=\"name\" \r\n                                        id=\"name\" \r\n                                        placeholder=\"Name of Institution\" \r\n                                        label=\"Name of Institution\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.name}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                        helperText={formik.touched.name && formik.errors.name}\r\n                                    />\r\n                                </Row>\r\n                                <Row>\r\n                                    <TextField \r\n                                        label=\"Institution Type\" \r\n                                        select \r\n                                        name=\"institutionTypeId\"\r\n                                        placeholder=\"Name of Institution\" \r\n                                        id=\"institutionTypeId\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.institutionTypeId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.institutionTypeId && Boolean(formik.errors.institutionTypeId)}\r\n                                        helperText={formik.touched.institutionTypeId && formik.errors.institutionTypeId} \r\n                                    >\r\n                                        <MenuItem value=\"\"> Type of Institution </MenuItem>\r\n                                        {institutionType.map((data)=>(\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name} </MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </Row>\r\n                                <Row>\r\n                                <TextField \r\n                                    type=\"text\" \r\n                                    name=\"addressLine1\" \r\n                                    id=\"addressLine1\"\r\n                                    placeholder=\"Address of Institution\"\r\n                                    label=\"Address of Institution\" \r\n                                    margin=\"normal\"\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.addressLine1}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.addressLine1 && Boolean(formik.errors.addressLine1)}\r\n                                    helperText={formik.touched.addressLine1 && formik.errors.addressLine1}\r\n                                />\r\n                                </Row>\r\n                                <Row id=\"select-input\">\r\n                                <TextField \r\n                                        label=\"State\" \r\n                                        select \r\n                                        name=\"stateId\"\r\n                                        id=\"stateId\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.stateId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.stateId && Boolean(formik.errors.stateId)}\r\n                                        helperText={formik.touched.stateId && formik.errors.stateId} \r\n                                    >\r\n                                         <MenuItem value=\"\"> Select State </MenuItem>\r\n                                        {stateId.map((data)=>(\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name} </MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </Row>\r\n                                <Row>\r\n                                    <TextField  \r\n                                        type=\"text\" \r\n                                        name=\"principalName\" \r\n                                        id=\"principalName\"\r\n                                        placeholder=\"Name of Principal\"\r\n                                        label=\"Name of Principal\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.principalName}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.principalName && Boolean(formik.errors.principalName)}\r\n                                        helperText={formik.touched.principalName && formik.errors.principalName}\r\n                                    />\r\n                                </Row>\r\n                            </Col> \r\n                            <Col lg={6}>\r\n                                <Row>\r\n                                    <ImageUploading\r\n                                        multiple\r\n                                        value={images}\r\n                                        onChange={onChange}\r\n                                        maxNumber={maxNumber}\r\n                                        dataURLKey=\"data_url\"\r\n                                    >\r\n                                        {({\r\n                                        imageList,\r\n                                        onImageUpload,\r\n                                        onImageRemoveAll,\r\n                                        onImageUpdate,\r\n                                        onImageRemove,\r\n                                        isDragging,\r\n                                        dragProps\r\n                                        }) => (\r\n                                        // write your building UI\r\n                                        <div className=\"upload__image-wrapper additional\">\r\n                                            {images.length !== 0 ? imageList.map((image, index) => (\r\n                                            <div key={index} className=\"image-item add\">\r\n                                                <img src={image.data_url} alt=\"\" width=\"100\" />\r\n                                                <div className=\"image-item__btn-wrapper\">\r\n                                                <button type=\"button\" className=\"updateBtn\" onClick={() => onImageUpdate(index)}>Update <span className=\"iconify\" data-icon=\"bx:bx-image-add\" data-inline=\"false\"></span></button>\r\n                                                <button type=\"button\" className=\"deleteBtn\" onClick={() => onImageRemove(index)}><span className=\"iconify\" data-icon=\"fluent:delete-24-filled\" data-inline=\"false\"></span></button>\r\n                                                </div>\r\n                                            </div>\r\n                                            ))\r\n                                            :\r\n                                            <div className=\"image-item\">\r\n                                                <img src=\"./assets/images/placeholder.png\" alt=\"School Placeholder\" />\r\n                                            </div>\r\n                                            }\r\n                                            <div className=\"uploadLabel\">\r\n                                                You can change your profile picture\r\n                                            </div>\r\n                                            {images.length === 0 && \r\n                                                <button \r\n                                                type=\"button\"\r\n                                                className=\"uploadBtn\"\r\n                                                style={isDragging ? { color: \"red\" } : null}\r\n                                                onClick={onImageUpload}\r\n                                                {...dragProps}\r\n                                                >\r\n                                                Upload <span className=\"iconify\" data-icon=\"bx:bx-image-add\" data-inline=\"false\"></span>\r\n                                                </button>\r\n                                            }\r\n                                            {/* &nbsp;\r\n                                            <button onClick={onImageRemoveAll}>Remove all image</button> */}\r\n                                        </div>\r\n                                        )}\r\n                                    </ImageUploading>\r\n                                </Row>\r\n                                <Row >\r\n                                    <TextField \r\n                                        type=\"text\" \r\n                                        name=\"city\" \r\n                                        id=\"city\"\r\n                                        placeholder=\"City\"\r\n                                        label=\"City\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.city}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.city && Boolean(formik.errors.city)}\r\n                                        helperText={formik.touched.city && formik.errors.city}\r\n                                    />\r\n                                </Row>\r\n                                <Row id=\"select-input\">\r\n                                <TextField \r\n                                        label=\"Country\" \r\n                                        select \r\n                                        name=\"countryId\"\r\n                                        id=\"countryId\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.countryId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.countryId && Boolean(formik.errors.countryId)}\r\n                                        helperText={formik.touched.countryId && formik.errors.countryId} \r\n                                    >\r\n                                         <MenuItem value=\"\"> Select Country </MenuItem>\r\n                                        {countryId.map((data)=>(\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name} </MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </Row>\r\n                                <Row>\r\n                                    <TextField \r\n                                        type=\"email\" \r\n                                        name=\"instituionEmail\" \r\n                                        id=\"instituionEmail\" \r\n                                        placeholder=\"Institution Email\"\r\n                                        label=\"Institution Email\"\r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.instituionEmail}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.instituionEmail && Boolean(formik.errors.instituionEmail)}\r\n                                        helperText={formik.touched.instituionEmail && formik.errors.instituionEmail}    \r\n                                    />\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            {/* <   Col lg={6} md={12} sm={12}>\r\n                                    <label htmlFor=\"file\">Upload School Profile Picture</label>\r\n                                    <TextField type=\"file\" name=\"file\" id=\"file\" className=\"form-control\" />\r\n                                    <small id=\"passwordHelpBlock\" className=\"form-text text-danger\">\r\n                                       \r\n                                    </small>\r\n                            </Col> */}\r\n                            {/* <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"custom-file\">\r\n                                        <input type=\"file\" className=\"custom-file-input\" id=\"validatedCustomFile\" required />\r\n                                        <label className=\"custom-file-label\" htmlFor=\"validatedCustomFile\">Upload ...</label>\r\n                                        <small id=\"passwordHelpBlock\" className=\"form-text text-danger\">\r\n                                            \r\n                                        </small>\r\n                                    </div>\r\n                            </Col> */}\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit ? true : false}>{\r\n                        isSubmit ? \"Submitting...\" : \"Submit\"\r\n                    }</button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default EditInstitutionModal\r\n","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {Formik, Form} from 'formik';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {deleteInstitution} from '../../../services/institutionServices';\r\n\r\n\r\nconst DeleteInstitutionModal = (props) => {\r\n\r\n    const {data} = props\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n\r\n    const webUser = localStorage.getItem(\"webUserId\")\r\n\r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await deleteInstitution(data)\r\n            if (res.status === 204 || res.status === 200){\r\n                setAlertType(\"success\")\r\n                setMessage(\"Institution deleted Successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength - 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Delete to Institution\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false\r\n                )\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        name: data.name,\r\n        institutionTypeId: data.institutionTypeId,\r\n        instituionEmail: data.InstitutionEmail,\r\n        principalName: data.principalName,\r\n        principalPhoneNumber: data.principalPhoneNumber,\r\n        addressLine1: data.addressLine1,\r\n        addressLine2: data.addressLine2,\r\n        city: data.city,\r\n        createdBy: webUser,\r\n        addressLine3: data.addressLine3,\r\n        isDeleted: true\r\n    }\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Delete Institution\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n            <Formik\r\n                onSubmit={onSubmit}\r\n                initialValues={initialValues}\r\n            >\r\n                <Form>\r\n                    <Modal.Body className=\"\">\r\n                        <Container fluid>    \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}  \r\n                        <Row>\r\n                          <Col lg={12}>\r\n                          <span className=\"iconify delete-warning\" data-icon=\"ant-design:warning-filled\" data-inline=\"false\"></span>\r\n                          <b className=\"delete-text\">Are you sure you want to delete {data.name}?</b>\r\n                          </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer className=\"modal-btn\">\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"delete-btn\" disabled={isSubmit ? true : false}>{\r\n                        isSubmit ? \"Deleting...\" : \"Delete\"\r\n                    }</button>\r\n                </Modal.Footer>\r\n                </Form>\r\n            </Formik>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default DeleteInstitutionModal\r\n","import DashboardFrame from './subcomponent/DashboardFrame';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Table, Button } from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport {StatusActive, StatusInactive} from './subcomponent/Status';\r\nimport PaginationComponent from './subcomponent/PaginationComponent';\r\nimport {useState, useEffect} from 'react';\r\nimport NewInstitutionModal from './subcomponent/NewInstitutionModal';\r\nimport EditInstitutionModal from './subcomponent/EditInstitutionModal';\r\nimport DeleteInstitutionModal from './subcomponent/DeleteInstitutionModal';\r\nimport {dateConverter, tableIndex, search} from '../../utils/Functions';\r\nimport {getInstitution} from '../../services/institutionServices';\r\nimport ContentLoader from '../components/ContentLoader';\r\n\r\nconst Institutions = (props) => {\r\n\r\n    const [showAddNew, setAddNew] = useState(false)\r\n    const [showAddEdit, setAddEdit] = useState(false)\r\n    const [showAddDelete, setAddDelete] = useState(false)\r\n\r\n    const [offset, setOffset] = useState(0)\r\n    const [content, setContent] = useState([])\r\n    const [perPage, setPerPage] = useState(5)\r\n    const [pageCount, setPageCount] = useState(0)\r\n    const [contentLength, setContentLength] = useState(0)\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [realIndex, setRealIndex] = useState(1)\r\n\r\n\r\n    const [institutions, setInstitutions] = useState([])\r\n    const [searchObj, setSearchObj] = useState([])\r\n    const [slicedData, setSlicedData] = useState([])\r\n\r\n    const handlePageClick = (e) => {\r\n        const selectedPage = e.selected;\r\n        setRealIndex(offset * perPage + 1)\r\n        setOffset(selectedPage)\r\n    }\r\n\r\n    const handleSearch = (array, searchText) => {\r\n        if (searchText === ''){\r\n            setInstitutions(slicedData)\r\n        }\r\n        else{\r\n            setInstitutions(search(array, searchText, 'name'))\r\n        } \r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getInstitution()\r\n                const data = res.data\r\n                const slicedData = data.slice(offset * perPage, offset + perPage)\r\n                setSearchObj(data)\r\n                setSlicedData(slicedData)\r\n                setInstitutions(slicedData)\r\n                setContentLength(data.length)\r\n                setPageCount(Math.ceil(data.length / perPage))\r\n                setIsLoading(false)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [offset, perPage, contentLength])\r\n\r\n    return (\r\n        <DashboardFrame title=\"Administrator\" subTitle=\"Institutions\">\r\n            <Helmet>\r\n                <title>Institutions | iEduCare</title>\r\n            </Helmet> \r\n            <NewInstitutionModal show={showAddNew} onHide={() => setAddNew(false)} contentLength={contentLength} setContentLength={setContentLength}/>\r\n            <EditInstitutionModal show={showAddEdit} onHide={() => setAddEdit(false)}  data={content}  contentLength={contentLength} setContentLength={setContentLength}/>\r\n            <DeleteInstitutionModal show={showAddDelete} onHide={() => setAddDelete(false)} data={content} contentLength={contentLength} setContentLength={setContentLength}/>\r\n            <div className=\"content-page\">\r\n            {isLoading ? \r\n                <ContentLoader />\r\n                :\r\n                <div className=\"institution-section\">\r\n                    <div className=\"header border-bottom\">\r\n                        <Button className=\"add-new-btn\" onClick={() => setAddNew(true)}><span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span> Add New </Button>\r\n                    </div>\r\n                    <div className=\"table-header\">\r\n                        <div className=\"entries\">\r\n                            <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                            <div className=\"entries-input\">\r\n                                <select className=\"entries-box\" id=\"entries\" onChange={(e) => setPerPage(e.target.value)}>\r\n                                    {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                        <option value={value} key={value}>{value}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"entries-label\"> entries </div>\r\n                        </div>\r\n                        <div className=\"search\">\r\n\r\n                            <label htmlFor=\"search\" className=\"search-label\">Search: </label>\r\n                            <input type=\"search\" className=\"search-box\" id=\"search\" onChange={(event) => handleSearch(searchObj, event.target.value)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"institution-table\">\r\n                        <Table responsive bordered hover size=\"lg\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>S/N</th>\r\n                                    <th>Name of Institution</th>\r\n                                    <th>Modules No.</th>\r\n                                    <th>License Type</th>\r\n                                    <th>Date Created</th>\r\n                                    <th>Expiry Date</th>\r\n                                    <th>Admin User</th>\r\n                                    <th>Status</th>\r\n                                    <th>Action</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {institutions.map((institution, index)=>(\r\n                                   <tr key={institution.id}>\r\n                                    <td className=\"id\">{tableIndex(index, realIndex)}</td>\r\n                                    <td className=\"uni-name\"><span>{institution.name}</span></td>\r\n                                    <td><Link to=\"/institutions\">{institution.noOfModules}</Link></td>\r\n                                    <td>{institution.license }</td>\r\n                                    <td>{dateConverter(institution.address.createDate)}</td>\r\n                                    <td>{institution.expiryDate}</td>\r\n                                    <td>{institution.primaryAdminName }</td>\r\n                                    <td> { institution.address.isDeleted ? <StatusInactive /> : <StatusActive /> }</td>\r\n                                    <td>\r\n                                        <span \r\n                                            className=\"edit-icon-section\"\r\n                                            onClick={() => {\r\n                                            setAddEdit(true)\r\n                                            setContent(institution)\r\n                                            }}\r\n                                        > \r\n                                        <span className=\"iconify edit\" data-icon=\"ls:edit\" data-inline=\"false\" >\r\n                                        </span> \r\n                                        <span class=\"edittext\">Edit</span>\r\n                                        </span>\r\n                                        <span\r\n                                            className=\"delete-icon-section\"\r\n                                            onClick={() => {\r\n                                            setAddDelete(true)\r\n                                            setContent(institution)\r\n                                            }}\r\n                                        >\r\n                                        <span className=\"iconify delete\" data-icon=\"ant-design:delete-filled\" data-inline=\"false\">\r\n                                        </span> \r\n                                        <span class=\"deletetext\">Delete</span>\r\n                                        </span>\r\n                                    </td>\r\n                                </tr>\r\n                                ))}\r\n                            </tbody>\r\n                            </Table>\r\n                        </div>\r\n                        <div className=\"pagination-section\">\r\n                            <div className=\"page-entry\">\r\n                                Showing {offset * perPage + 1} to {offset + perPage} of {contentLength} entries\r\n                            </div>\r\n                            <div className=\"page-nav\">\r\n                                <PaginationComponent \r\n                                    pageCount={pageCount} \r\n                                    handlePageClick={handlePageClick} \r\n                                />\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n            }\r\n            </div>\r\n        </DashboardFrame>\r\n    )\r\n}\r\n\r\nexport default Institutions;","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport {useState, useEffect} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {addInstitutionAdmin, getInstitution} from '../../../services/institutionServices';\r\nimport {getGender} from '../../../services/commonServices';\r\n\r\n\r\nconst NewUserManagerModal = (props) => {\r\n    const [pryAdmin, setPryAdmin] = useState(true)\r\n    const [institution, setInstitution] = useState([])\r\n    const [gender, setGender] = useState([])\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n\r\n    const webUser = localStorage.getItem(\"webUserId\")\r\n\r\n    useEffect(()=>{\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getInstitution()\r\n                setInstitution(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        const fetchData = async () => {\r\n            try{\r\n                let res = await getGender()\r\n                setGender(res.data.genders)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }  \r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const onSubmit = async(data) => {\r\n        data.isPrimary = pryAdmin\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await addInstitutionAdmin(data)\r\n            if (res.status === 204 || res.status === 200){\r\n                setAlertType(\"success\")\r\n                setMessage(\"User Manager successfully Added\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength + 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to add User Manager\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    const initialValues = {       \r\n        firstName: '',\r\n        lastName: '',\r\n        otherNames: '',\r\n        email: '',\r\n        phoneNumber: '',\r\n        administratorUserName: '',\r\n        administratorPassword: '',\r\n        genderId: '',\r\n        institutionId: '',\r\n        createdBy: webUser\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        firstName: Yup.string().required(\"First Name is Required\"),\r\n        lastName: Yup.string().required(\"Last Name is Required\"),\r\n        otherNames: Yup.string(),\r\n        email: Yup.string().email(\"Enter Valid Email Format\").required(\"Email is Required\"),\r\n        phoneNumber: Yup.string().min(10).required(\"Phone Number is Required\"),\r\n        administratorUserName: Yup.string().required(\"Admin User Name is Required\"),\r\n        administratorPassword: Yup.string().min(8).required(\"Password is required\").matches(\r\n            /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/,\r\n            \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and One Special Case Character\"\r\n          ),\r\n        institutionId: Yup.string().required(\"Institution Name is Required\"),\r\n    })\r\n    const formik = useFormik({\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"lg\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Add New User Manager\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Modal.Body className=\"\">\r\n                        <Container>    \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}  \r\n                        <Row>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                <div className=\"form-group\">\r\n                                    <TextField \r\n                                        type=\"text\" \r\n                                        name=\"firstName\" \r\n                                        id=\"firstName\" \r\n                                        placeholder=\"First Name\"\r\n                                        label=\"First Name\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.firstName}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.firstName && Boolean(formik.errors.firstName)}\r\n                                        helperText={formik.touched.firstName && formik.errors.firstName}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                <div className=\"form-group\">\r\n                                    <TextField \r\n                                        type=\"text\" \r\n                                        name=\"lastName\" \r\n                                        id=\"lastName\"\r\n                                        placeholder=\"Last Name\"\r\n                                        label=\"Last Name\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.lastName}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.lastName && Boolean(formik.errors.lastName)}\r\n                                        helperText={formik.touched.lastName && formik.errors.lastName}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\">\r\n                                    <TextField \r\n                                        type=\"text\" \r\n                                        name=\"otherNames\" \r\n                                        id=\"otherNames\"\r\n                                        placeholder=\"Other Names\"\r\n                                        label=\"Other Names\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.otherNames}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.otherNames && Boolean(formik.errors.otherNames)}\r\n                                        helperText={formik.touched.otherNames && formik.errors.otherNames}\r\n \r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\" id=\"select-input\">\r\n                                    <TextField \r\n                                        select \r\n                                        name=\"genderId\" \r\n                                        id=\"genderId\" \r\n                                        label=\"Gender\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.genderId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.genderId && Boolean(formik.errors.genderId)}\r\n                                        helperText={formik.touched.genderId && formik.errors.genderId}\r\n                                    >\r\n                                        <MenuItem value=\"\"> Select Gender </MenuItem>\r\n                                        {gender.map((data)=>(\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name} </MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\" id=\"select-input\">\r\n                                    <TextField \r\n                                        select \r\n                                        name=\"institutionId\" \r\n                                        id=\"institutionId\" \r\n                                        label=\"Institution\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.institutionId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.institutionId && Boolean(formik.errors.institutionId)}\r\n                                        helperText={formik.touched.institutionId && formik.errors.institutionId}\r\n                                    >\r\n                                        <MenuItem value=\"\"> Select Institution </MenuItem>\r\n                                        {institution.map((data)=>(\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name} </MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                <FormGroup id=\"prySwitch\">\r\n                                <FormControlLabel\r\n                                    label=\"Make as primary Admin\" \r\n                                    control={<Switch checked={pryAdmin} onChange={(e) => setPryAdmin(e.target.checked)} color=\"primary\" name=\"pryAdmin\"/>}\r\n                                    \r\n                                />\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\">\r\n                                    <TextField \r\n                                        type=\"email\" \r\n                                        name=\"email\" \r\n                                        id=\"email\" \r\n                                        placeholder=\"Email Address\"\r\n                                        label=\"Email Address\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.email}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.email && Boolean(formik.errors.email)}\r\n                                        helperText={formik.touched.email && formik.errors.email}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\">\r\n                                    <TextField \r\n                                        type=\"tel\" \r\n                                        name=\"phoneNumber\" \r\n                                        id=\"phoneNumber\" \r\n                                        placeholder=\"Phone Number\"\r\n                                        label=\"Phone Number\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.phoneNumber}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.phoneNumber && Boolean(formik.errors.phoneNumber)}\r\n                                        helperText={formik.touched.phoneNumber && formik.errors.phoneNumber}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\">\r\n                                    <TextField \r\n                                        type=\"text\" \r\n                                        name=\"administratorUserName\" \r\n                                        id=\"administratorUserName\"\r\n                                        placeholder=\"Admin Username\"\r\n                                        label=\"Admin Username\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.administratorUserName}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.administratorUserName && Boolean(formik.errors.administratorUserName)}\r\n                                        helperText={formik.touched.administratorUserName && formik.errors.administratorUserName}    \r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\">\r\n                                    <TextField \r\n                                        type=\"password\" \r\n                                        name=\"administratorPassword\" \r\n                                        id=\"administratorPassword\"\r\n                                        placeholder=\"Admin Password\"\r\n                                        label=\"Admin Password\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.administratorPassword}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.administratorPassword && Boolean(formik.errors.administratorPassword)}\r\n                                        helperText={formik.touched.administratorPassword && formik.errors.administratorPassword}    \r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            {/* <Col lg={6} md={6} sm={12}>\r\n                                <div className=\"form-group\">\r\n                                    <TextField as=\"select\" name=\"genderId\" id=\"genderId\" className=\"form-control\">\r\n                                        <option value=\"\">Select Gender</option>\r\n                                      \r\n                                    </Field>\r\n                                    <small id=\"passwordHelpBlock\" className=\"form-text text-danger\">\r\n                                        <ErrorMessage name=\"genderId\" />\r\n                                    </small>\r\n                                </div>\r\n                            </Col> */}\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit ? true : false}>{\r\n                        isSubmit ? \"Submitting...\" : \"Submit\"\r\n                    }</button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default NewUserManagerModal\r\n","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport * as Yup from 'yup';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport {useState, useEffect} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {updateInstitutionAdmin, getInstitution} from '../../../services/institutionServices';\r\nimport {getGender} from '../../../services/commonServices';\r\n\r\n\r\nconst EditUserManagerModal = (props) => {\r\n    const {data} = props\r\n\r\n    const [pryAdmin, setPryAdmin] = useState(true)\r\n    const [institution, setInstitution] = useState([])\r\n    const [gender, setGender] = useState([])\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n\r\n    const webUser = localStorage.getItem(\"webUserId\")\r\n\r\n    useEffect(()=>{\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getInstitution()\r\n                setInstitution(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        const fetchData = async () => {\r\n            try{\r\n                let res = await getGender()\r\n                setGender(res.data.genders)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }  \r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const onSubmit = async(data) => {\r\n        data.isPrimary = pryAdmin\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await updateInstitutionAdmin(data)\r\n            if (res.status === 204 || res.status === 200){\r\n                setAlertType(\"success\")\r\n                setMessage(\"User Manager Updated successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength + 0)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Updated User Manager\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    const initialValues = {       \r\n        firstName: data.firstName,\r\n        lastName: data.lastName,\r\n        otherNames: data.otherNames,\r\n        email: data.email,\r\n        phoneNumber: data.phoneNumber,\r\n        administratorUserName: data.userName,\r\n        administratorPassword: data.administratorPassword,\r\n        genderId: data.genderId,\r\n        institutionId: data.institutionId,\r\n        createdBy: webUser,\r\n        isDeleted: false\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        firstName: Yup.string().required(\"First Name is Required\"),\r\n        lastName: Yup.string().required(\"Last Name is Required\"),\r\n        otherNames: Yup.string(),\r\n        email: Yup.string().email(\"Enter Valid Email Format\").required(\"Email is Required\"),\r\n        phoneNumber: Yup.string().min(10).required(\"Phone Number is Required\"),\r\n        administratorUserName: Yup.string().required(\"Admin User Name is Required\"),\r\n        administratorPassword: Yup.string().min(8).required(\"Password is required\").matches(\r\n            /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/,\r\n            \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and One Special Case Character\"\r\n          ),\r\n        institutionId: Yup.string().required(\"Institution Name is Required\"),\r\n    })\r\n    \r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"lg\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Edit User Manager\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n        <form onSubmit={formik.handleSubmit}>\r\n                    <Modal.Body className=\"\">\r\n                        <Container>       \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}  \r\n                        <Row>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                <div className=\"form-group\">\r\n                                    <TextField \r\n                                        type=\"text\" \r\n                                        name=\"firstName\" \r\n                                        id=\"firstName\" \r\n                                        placeholder=\"First Name\"\r\n                                        label=\"First Name\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.firstName}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.firstName && Boolean(formik.errors.firstName)}\r\n                                        helperText={formik.touched.firstName && formik.errors.firstName}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                <div className=\"form-group\">\r\n                                    <TextField \r\n                                        type=\"text\" \r\n                                        name=\"lastName\" \r\n                                        id=\"lastName\"\r\n                                        placeholder=\"Last Name\"\r\n                                        label=\"Last Name\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.lastName}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.lastName && Boolean(formik.errors.lastName)}\r\n                                        helperText={formik.touched.lastName && formik.errors.lastName}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\">\r\n                                    <TextField \r\n                                        type=\"text\" \r\n                                        name=\"otherNames\" \r\n                                        id=\"otherNames\"\r\n                                        placeholder=\"Other Names\"\r\n                                        label=\"Other Names\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.otherNames}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.otherNames && Boolean(formik.errors.otherNames)}\r\n                                        helperText={formik.touched.otherNames && formik.errors.otherNames}\r\n \r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\" id=\"select-input\">\r\n                                    <TextField \r\n                                        select \r\n                                        name=\"genderId\" \r\n                                        id=\"genderId\" \r\n                                        label=\"Gender\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.genderId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.genderId && Boolean(formik.errors.genderId)}\r\n                                        helperText={formik.touched.genderId && formik.errors.genderId}\r\n                                    >\r\n                                        <MenuItem value=\"\"> Select Gender </MenuItem>\r\n                                        {gender.map((data)=>(\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name} </MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\" id=\"select-input\">\r\n                                    <TextField \r\n                                        select \r\n                                        name=\"institutionId\" \r\n                                        id=\"institutionId\" \r\n                                        label=\"Institution\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.institutionId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.institutionId && Boolean(formik.errors.institutionId)}\r\n                                        helperText={formik.touched.institutionId && formik.errors.institutionId}\r\n                                    >\r\n                                        <MenuItem value=\"\"> Select Institution </MenuItem>\r\n                                        {institution.map((data)=>(\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name} </MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                <FormGroup id=\"prySwitch\">\r\n                                <FormControlLabel\r\n                                    label=\"Make as primary Admin\" \r\n                                    control={<Switch checked={pryAdmin} onChange={(e) => setPryAdmin(e.target.checked)} color=\"primary\" name=\"pryAdmin\"/>}\r\n                                    \r\n                                />\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\">\r\n                                    <TextField \r\n                                        type=\"email\" \r\n                                        name=\"email\" \r\n                                        id=\"email\" \r\n                                        placeholder=\"Email Address\"\r\n                                        label=\"Email Address\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.email}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.email && Boolean(formik.errors.email)}\r\n                                        helperText={formik.touched.email && formik.errors.email}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\">\r\n                                    <TextField \r\n                                        type=\"tel\" \r\n                                        name=\"phoneNumber\" \r\n                                        id=\"phoneNumber\" \r\n                                        placeholder=\"Phone Number\"\r\n                                        label=\"Phone Number\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.phoneNumber}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.phoneNumber && Boolean(formik.errors.phoneNumber)}\r\n                                        helperText={formik.touched.phoneNumber && formik.errors.phoneNumber}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\">\r\n                                    <TextField \r\n                                        type=\"text\" \r\n                                        name=\"administratorUserName\" \r\n                                        id=\"administratorUserName\"\r\n                                        placeholder=\"Admin Username\"\r\n                                        label=\"Admin Username\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.administratorUserName}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.administratorUserName && Boolean(formik.errors.administratorUserName)}\r\n                                        helperText={formik.touched.administratorUserName && formik.errors.administratorUserName}    \r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\">\r\n                                    <TextField \r\n                                        type=\"password\" \r\n                                        name=\"administratorPassword\" \r\n                                        id=\"administratorPassword\"\r\n                                        placeholder=\"Admin Password\"\r\n                                        label=\"Admin Password\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.administratorPassword}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.administratorPassword && Boolean(formik.errors.administratorPassword)}\r\n                                        helperText={formik.touched.administratorPassword && formik.errors.administratorPassword}    \r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            {/* <Col lg={6} md={6} sm={12}>\r\n                                <div className=\"form-group\">\r\n                                    <TextField as=\"select\" name=\"genderId\" id=\"genderId\" className=\"form-control\">\r\n                                        <option value=\"\">Select Gender</option>\r\n                                      \r\n                                    </Field>\r\n                                    <small id=\"passwordHelpBlock\" className=\"form-text text-danger\">\r\n                                        <ErrorMessage name=\"genderId\" />\r\n                                    </small>\r\n                                </div>\r\n                            </Col> */}\r\n                            {/* <Col lg={6} md={6} sm={12}>\r\n                                <FormGroup>\r\n                                <FormControlLabel\r\n                                    label=\"Make as primary Admin\" \r\n                                    control={<Switch checked={pryAdmin} onChange={(e) => setPryAdmin(e.target.checked)} color=\"primary\" name=\"pryAdmin\"/>}\r\n                                    \r\n                                />\r\n                                </FormGroup>\r\n                            </Col> */}\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit ? true : false}>{\r\n                        isSubmit ? \"Submitting\" : \"Submit\"\r\n                    }</button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default EditUserManagerModal\r\n","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {Formik, Form} from 'formik';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {deleteInstitutionAdmin} from '../../../services/institutionServices';\r\n\r\n\r\nconst DeleteUserManagerModal = (props) => {\r\n    const {data} = props\r\n\r\n    const [pryAdmin, setPryAdmin] = useState(true)\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n\r\n    const webUser = localStorage.getItem(\"webUserId\")\r\n\r\n    const onSubmit = async(data) => {\r\n        data.isPrimary = pryAdmin\r\n        setIsSubmit(true)\r\n\r\n        try{\r\n            const res = await deleteInstitutionAdmin(data)\r\n            if (res.status === 204 || res.status === 200){\r\n                setAlertType(\"success\")\r\n                setMessage(\"User Manager Deleted successfully\")\r\n                setShowAlert(true)\r\n                props.setContentLength(props.contentLength - 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Delete User Manager\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    const initialValues = {       \r\n        firstName: data.firstName,\r\n        lastName: data.lastName,\r\n        otherNames: data.otherNames,\r\n        email: data.email,\r\n        phoneNumber: data.phoneNumber,\r\n        administratorUserName: data.administratorUserName,\r\n        administratorPassword: data.administratorPassword,\r\n        genderId: data.genderId,\r\n        institutionId: data.institutionId,\r\n        createdBy: webUser,\r\n        isDeleted: true\r\n    }\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Delete User Manager\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={onSubmit}\r\n            >\r\n                <Form>\r\n                    <Modal.Body className=\"\">\r\n                        <Container fluid>      \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}    \r\n                        <Row>\r\n                          <Col lg={12}>\r\n                          <span className=\"iconify delete-warning\" data-icon=\"ant-design:warning-filled\" data-inline=\"false\"></span>\r\n                          <b className=\"delete-text\">Are you sure you want to delete User Admin?</b>\r\n                          </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer className=\"modal-btn\">\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"delete-btn\" disabled={isSubmit ? true : false}>{\r\n                        isSubmit ? \"Deleting...\" : \"Delete\"\r\n                    }</button>\r\n                </Modal.Footer>\r\n            </Form>\r\n        </Formik>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default DeleteUserManagerModal\r\n","import DashboardFrame from './subcomponent/DashboardFrame';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Table, Button} from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport {StatusActive, StatusInactive} from './subcomponent/Status';\r\nimport PaginationComponent from './subcomponent/PaginationComponent';\r\nimport {useState, useEffect} from 'react';\r\nimport NewUserManagerModal from './subcomponent/NewUserManagerModal';\r\nimport {getInstitutionAdmin} from '../../services/institutionServices';\r\nimport {dateConverter, tableIndex, search} from '../../utils/Functions';\r\nimport EditUserManagerModal from './subcomponent/EditUserManagerModal';\r\nimport DeleteUserManagerModal from './subcomponent/DeleteUserManagerModal';\r\nimport ContentLoader from '../components/ContentLoader';\r\n\r\n\r\nconst UserManager = () => {\r\n\r\n    const [showAddNew, setAddNew] = useState(false)\r\n    const [institutionAdmin, setInstitutionAdmin] = useState([])\r\n    const [showAddEdit, setAddEdit] = useState(false)\r\n    const [showAddDelete, setAddDelete] = useState(false)\r\n    const [content, setContent] = useState([])\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const [offset, setOffset] = useState(0)\r\n    const [perPage, setPerPage] = useState(5)\r\n    const [pageCount, setPageCount] = useState(0)\r\n    const [contentLength, setContentLength] = useState(0)\r\n    const [realIndex, setRealIndex] = useState(1)\r\n    \r\n    const [searchObj, setSearchObj] = useState([])\r\n    const [slicedData, setSlicedData] = useState([])\r\n\r\n    const handlePageClick = (e) => {\r\n        const selectedPage = e.selected;\r\n        setRealIndex(offset * perPage  + 1)\r\n        setOffset(selectedPage)    \r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let res = await getInstitutionAdmin()\r\n                const data = res.data\r\n                const slicedData = data.slice(offset * perPage, offset + perPage)\r\n                setSearchObj(data)\r\n                setSlicedData(slicedData)\r\n                setInstitutionAdmin(slicedData)\r\n                setContentLength(data.length)\r\n                setPageCount(Math.ceil(data.length / perPage))\r\n                setIsLoading(false)\r\n            }\r\n            catch (err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n       fetchData()\r\n    }, [offset, perPage, contentLength])\r\n\r\n    const handleSearch = (array, searchText) => {\r\n        if (searchText === ''){\r\n            setInstitutionAdmin(slicedData)\r\n        }\r\n        else{\r\n            setInstitutionAdmin(search(array, searchText, 'userName'))\r\n        } \r\n    }\r\n\r\n\r\n    return (\r\n        <DashboardFrame title=\"Administrator\" subTitle=\"User Manager\">\r\n            <Helmet>\r\n                <title>User Manager | iEduCare</title>\r\n            </Helmet> \r\n            <NewUserManagerModal show={showAddNew} onHide={() => setAddNew(false)} contentLength={contentLength} setContentLength={setContentLength}/>\r\n            <EditUserManagerModal show={showAddEdit} onHide={() => setAddEdit(false)} data={content} contentLength={contentLength} setContentLength={setContentLength}/>\r\n            <DeleteUserManagerModal show={showAddDelete} onHide={() => setAddDelete(false)} data={content} contentLength={contentLength} setContentLength={setContentLength}/>\r\n            <div className=\"content-page\">\r\n            {isLoading ? \r\n                <ContentLoader />\r\n                :\r\n                <div className=\"institution-section\">\r\n                    <div className=\"header border-bottom\">\r\n                        <Button className=\"add-new-btn\" onClick={() => setAddNew(true)}><span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span> Add New </Button>\r\n                    </div>\r\n                    <div className=\"table-header\">\r\n                        <div className=\"entries\">\r\n                            <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                            <div className=\"entries-input\">\r\n                                <select className=\"entries-box\" id=\"entries\" onChange={(e) => setPerPage(e.target.value)}>\r\n                                    {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                        <option value={value} key={value}>{value}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"entries-label\"> entries </div>\r\n                        </div>\r\n                        <div className=\"search\">\r\n                            <label htmlFor=\"search\" className=\"search-label\">Search: </label>\r\n                            <input type=\"search\" className=\"search-box\" id=\"search\" onChange={(event) => handleSearch(searchObj, event.target.value)} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"institution-table\">\r\n                        <Table responsive bordered hover size=\"lg\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>S/N</th>\r\n                                    <th>Username</th>\r\n                                    <th>Assigned Institutions</th>\r\n                                    <th>Email</th>\r\n                                    <th>Phone Number</th>\r\n                                    <th>Date Created</th>\r\n                                    <th>Status</th>\r\n                                    <th>Primary</th>\r\n                                    <th>Action</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {institutionAdmin.map((data, index) => (\r\n                                    <tr key={data.id}>\r\n                                        <td className=\"id\">{tableIndex(index, realIndex)}</td>\r\n                                        <td className=\"uni-name\"><span>{data.userName}</span></td>\r\n                                        <td><Link to=\"/institutions\">{data.institutionName}</Link></td>\r\n                                        <td>{data.email}</td>\r\n                                        <td>{data.phoneNumber}</td>\r\n                                        <td>{dateConverter(data.createDate)}</td>\r\n                                        <td>{ data.status.name === \"Active\"? <StatusActive /> : <StatusInactive /> }</td>\r\n                                        <td> {data.isPrimary ? \"Yes\" : \"No\"} </td>\r\n                                        <td> <span \r\n                                            className=\"edit-icon-section\"\r\n                                            onClick={() => {\r\n                                            setAddEdit(true)\r\n                                            setContent(data)\r\n                                            }}\r\n                                        > \r\n                                        <span className=\"iconify edit\" data-icon=\"ls:edit\" data-inline=\"false\" >\r\n                                        </span> \r\n                                        <span className=\"edittext\">Edit</span>\r\n                                        </span>\r\n                                        <span\r\n                                            className=\"delete-icon-section\"\r\n                                            onClick={() => {\r\n                                            setAddDelete(true)\r\n                                            setContent(data)\r\n                                            }}\r\n                                        >\r\n                                        <span className=\"iconify delete\" data-icon=\"ant-design:delete-filled\" data-inline=\"false\">\r\n                                        </span> \r\n                                        <span className=\"deletetext\">Delete</span>\r\n                                        </span> <span className=\"iconify reset\" data-icon=\"bx:bx-reset\" data-inline=\"false\"></span> </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                            </Table>\r\n                        </div>\r\n                        <div className=\"pagination-section\">\r\n                            <div className=\"page-entry\">\r\n                                Showing {offset * perPage + 1} to {offset + perPage} of {contentLength} entries\r\n                            </div>\r\n                            <div className=\"page-nav\">\r\n                                <PaginationComponent \r\n                                    pageCount={pageCount} \r\n                                    handlePageClick={handlePageClick} \r\n                                />\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n            }\r\n            </div>\r\n        </DashboardFrame>\r\n    )\r\n}\r\n\r\nexport default UserManager\r\n","import {useEffect, useState} from 'react';\r\nimport {Spinner} from 'react-bootstrap';\r\nimport {instance} from '../../../services/httpService';\r\n\r\nexport const Selected = ({schoolProp}) => {\r\n    const institutionId = schoolProp\r\n    const [institutionName, setInstitutionName] = useState(null)\r\n\r\n    useEffect(() => {\r\n        instance.get(`/api/ieducare/modulesubscription/get/${institutionId}`)\r\n        .then(res => {\r\n            const data = res.data\r\n            if (data.length < 1){\r\n            }\r\n            else{\r\n                setInstitutionName(data[0].institutionName)\r\n            }\r\n        })\r\n        .catch(err => console.log(err.message))\r\n    }, [institutionId])\r\n\r\n    return(\r\n        <div className=\"selected-school\">\r\n           <div> {institutionName ? `${institutionName} has been selected and made active` : <Spinner animation=\"border\" />}\r\n           </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport const NoneSelected = () => {\r\n    return (\r\n        <div className=\"selected-school\">\r\n            Select an Institution\r\n        </div>\r\n    )\r\n}","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useEffect, useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {getModules, getInstitution, linkModules} from '../../../services/institutionServices';\r\nimport {Selected, NoneSelected} from './SelectedSchool';\r\nimport MultiselectCheckbox from \"react-multiselect-checkbox\";\r\nimport { AllCheckerCheckbox, Checkbox, CheckboxGroup } from '@createnl/grouped-checkboxes';\r\n\r\nconst LinkInstitutionModal = (props) => {\r\n    const [addedInstitution, setAddedInstitution] = useState([])\r\n    const [institution, setInstitution] = useState(\"\")\r\n    const [add, setAdd] = useState(false)\r\n    const [modules, setModules] = useState([])\r\n\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n  \r\n\r\n    const [modulesArray, setModulesArray] = useState([])\r\n\r\n    const onCheckboxChange = (checkboxes) => {\r\n        console.log(checkboxes)\r\n        checkboxes.map(id => {\r\n            if (id.checked){\r\n                let newArray = [...modulesArray, id.value];\r\n                if (modulesArray.includes(id.value)) {\r\n                  newArray = newArray.filter(modules => modules !== id.value);\r\n                }\r\n                setModulesArray(newArray)\r\n                console.log(modulesArray)\r\n            }\r\n        })\r\n    }   \r\n    \r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        let data = {\r\n            institutionId: institution,\r\n            moduleIds: modulesArray\r\n        }\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await linkModules(data)\r\n            if (res.status === 200 || res.status === 204){\r\n                setAlertType(\"success\")\r\n                setMessage(\"Modules successfully Linked to Institution\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength + 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to link Modules to Institution\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n\r\n    // const handleCheckboxChange = event => {\r\n    //     let newArray = [...modulesArray, event.target.id];\r\n    //     if (modulesArray.includes(event.target.id)) {\r\n    //       newArray = newArray.filter(modules => modules !== event.target.id);\r\n    //     }\r\n    //     setModulesArray(newArray)\r\n    //     console.log(modulesArray)\r\n    //   };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getInstitution()\r\n                setAddedInstitution(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getModules()\r\n                setModules(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const addSchool = () => {\r\n        setAdd(true)\r\n    }\r\n\r\n    const removeSchool = () => {\r\n        setAdd(false)\r\n        setInstitution(\"\")\r\n    }\r\n    \r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"lg\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Add New Institution Link\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Container>   \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}  \r\n                    <Row>\r\n                        <Col lg={12}>\r\n                            <div className=\"link-select-section\">\r\n                                <div className=\"link-select\">\r\n                                    <select name=\"institution\" value={institution} onChange={e => setInstitution(e.target.value)}>\r\n                                        <option value=\"\">---- Select Institution ----</option>\r\n                                        {addedInstitution.map((data) => (\r\n                                            <option id={data.value} value={data.id} key={data.id}>{data.name}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                    <Button className=\"add-btn\" onClick={addSchool}>Add</Button>\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col lg={12}>\r\n                            <div className=\"selected-school-section mt-4 border-bottom pb-3\">\r\n                            {add ? <Selected schoolProp={institution} /> : <NoneSelected />}\r\n                            <Button className=\"selected-btn\" onClick={removeSchool}>Remove</Button>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col lg={12} md={12} sm={12}>\r\n                            <div className=\"add-module-section\">\r\n                                <div className=\"table-header\">\r\n                                    Select the modules/features to be activated for the selected Institution\r\n                                </div>\r\n                            </div> \r\n                        </Col>\r\n                    </Row>\r\n                    <Row  className=\"border\" id=\"checkboxes\">\r\n                        <CheckboxGroup onChange={onCheckboxChange}>\r\n                            <Col lg={12}  className=\"module-head\">\r\n                                <label>\r\n                                    <AllCheckerCheckbox />\r\n                                        Select All Modules\r\n                                </label>\r\n                            </Col>\r\n                        \r\n                        {modules.map((data) => (\r\n                            <Col lg={3} md={6} sm={12} key={data.id} className=\"form-group pt-2\">\r\n                                <label> <Checkbox value={data.id}/> {data.name}</label>\r\n                            </Col>\r\n                        ))}\r\n                        </CheckboxGroup>\r\n                    </Row>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                <button type=\"submit\" className=\"submit-btn\" onClick={(event) => onSubmit(event)} disabled={isSubmit ? true : false}>{\r\n                        isSubmit ? \"Linking...\" : \"Link\"\r\n                    }</button>\r\n            </Modal.Footer>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default LinkInstitutionModal\r\n","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {Formik, Field, ErrorMessage, Form} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {useState} from 'react';\r\nimport {instance} from '../../../services/httpService';\r\n\r\nconst AddModuleModal = (props) => {\r\n\r\n    const onSubmit = (data) => {\r\n        instance.post(\"/api/ieducare/module/post\", data)\r\n        .then(res => {\r\n            if(res.status === 200){\r\n                console.log(\"Success\")\r\n            }\r\n            else{\r\n                console.log(\"Fail\")\r\n            }\r\n        })\r\n        .catch(err => console.log(err.message))\r\n    }\r\n\r\n    const initialValues = {\r\n        code: '',\r\n        name: ''\r\n\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        code: Yup.string().required(\"Module Unique Code is Required\"),\r\n        name: Yup.string().required(\" Module Name is Required \"),\r\n    })\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"md\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Create Module\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={onSubmit}\r\n                validationSchema={validationSchema}\r\n            >\r\n                <Form>\r\n                    <Modal.Body className=\"\">\r\n                        <Container>    \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                <div className=\"form-group\">\r\n                                    <Field type=\"text\" name=\"code\" id=\"code\"className=\"form-control\" placeholder=\"Module Code\"/>\r\n                                    <small id=\"passwordHelpBlock\" className=\"form-text text-danger\">\r\n                                        <ErrorMessage name=\"code\" />\r\n                                    </small>\r\n                                </div>\r\n                            </Col>\r\n                            \r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\">\r\n                                    <Field type=\"text\" name=\"name\" id=\"name\" className=\"form-control\" placeholder=\"Module Name\"/>\r\n                                    <small id=\"passwordHelpBlock\" className=\"form-text text-danger\">\r\n                                        <ErrorMessage name=\"name\" />\r\n                                    </small>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\">Create <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </Form>\r\n        </Formik>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default AddModuleModal\r\n","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useEffect, useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {getModules, editModules} from '../../../services/institutionServices';\r\nimport { AllCheckerCheckbox, Checkbox, CheckboxGroup } from '@createnl/grouped-checkboxes';\r\n\r\n\r\nconst ViewEditModules = (props) => {\r\n    const [modules, setModules] = useState([])\r\n\r\n    const [modulesArray, setModulesArray] = useState([])\r\n    \r\n\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n\r\n    const onCheckboxChange = (checkboxes) => {\r\n        checkboxes.map(id => {\r\n            if (id.checked){\r\n                let newArray = [...modulesArray, id.value];\r\n                if (modulesArray.includes(id.value)) {\r\n                  newArray = newArray.filter(modules => modules !== id.value);\r\n                }\r\n                setModulesArray(newArray)\r\n                console.log(modulesArray)\r\n            }\r\n        })\r\n    } \r\n\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        let data = {\r\n            institutionId: props.editInstitutionId,\r\n            moduleIds: modulesArray,\r\n            isDeleted: true\r\n        }\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await editModules(data)\r\n            if (res.status === 200 || res.status === 204){\r\n                setAlertType(\"success\")\r\n                setMessage(\"Modules successfully Unlinked From Institution\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength - 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Failed to unlink Modules to Institution\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n\r\n    // const handleCheckboxChange = event => {\r\n    //     let newArray = [...modulesArray, event.target.id];\r\n    //     if (modulesArray.includes(event.target.id)) {\r\n    //       newArray = newArray.filter(modules => modules !== event.target.id);\r\n    //     }\r\n    //     setModulesArray(newArray)\r\n    //   };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getModules()\r\n                setModules(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"lg\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Edit Institution Modules\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Container>\r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}  \r\n                    <Row>\r\n                        <Col lg={12}>\r\n                            <div className=\"add-module-section\">\r\n                                <div className=\"table-header\">\r\n                                   <strong> Select the modules/features to be deleted for {props.editInstitutionName}</strong>\r\n                                </div>\r\n                            </div> \r\n                        </Col>\r\n                    </Row>\r\n                    <Row  className=\"border\" id=\"checkboxes\">\r\n                        <CheckboxGroup onChange={onCheckboxChange}>\r\n                            <Col lg={12}  className=\"module-head\">\r\n                                <label>\r\n                                    <AllCheckerCheckbox />\r\n                                        Select All Modules\r\n                                </label>\r\n                            </Col>\r\n                        \r\n                        {modules.map((data) => (\r\n                            <Col lg={3} md={6} sm={12} key={data.id} className=\"form-group pt-2\">\r\n                                <label> <Checkbox value={data.id}/> {data.name}</label>\r\n                            </Col>\r\n                        ))}\r\n                        </CheckboxGroup>\r\n                    </Row>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                <button type=\"submit\" className=\"submit-btn\" onClick={(event) => onSubmit(event)} disabled={isSubmit ? true : false}>{\r\n                        isSubmit ? \"Unlinking...\" : \"Unlink\"\r\n                }</button>\r\n            </Modal.Footer>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default ViewEditModules\r\n","import DashboardFrame from './subcomponent/DashboardFrame';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Table, Button} from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport {StatusActive, StatusInactive} from './subcomponent/Status';\r\nimport PaginationComponent from './subcomponent/PaginationComponent';\r\nimport {useState, useEffect} from 'react';\r\nimport LinkInstitutionModal from './subcomponent/LinkInstitutionModal';\r\nimport AddModuleModal from './subcomponent/AddModuleModal';\r\nimport ViewEditModules from './subcomponent/ViewEditModules';\r\nimport {getInstitution} from '../../services/institutionServices';\r\nimport {tableIndex, search} from '../../utils/Functions';\r\nimport ContentLoader from '../components/ContentLoader';\r\n\r\nconst Modules = () => {\r\n\r\n    const [showAddNew, setAddNew] = useState(false)\r\n    const [showAddModule, setAddModule] = useState(false)\r\n    const [showEditModule, setEditModule] = useState(false)\r\n    const [editInstitutionName, setEditInstitutionName] = useState(\"\")\r\n    const [editInstitutionId, setEditInstitutionId] = useState(\"\")\r\n    const [modulesTable, setModulesTable] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    const [offset, setOffset] = useState(0)\r\n    const [perPage, setPerPage] = useState(5)\r\n    const [pageCount, setPageCount] = useState(0)\r\n    const [contentLength, setContentLength] = useState(0)\r\n    const [realIndex, setRealIndex] = useState(1)\r\n\r\n    const [searchObj, setSearchObj] = useState([])\r\n    const [slicedData, setSlicedData] = useState([])\r\n\r\n    const handlePageClick = (e) => {\r\n        const selectedPage = e.selected;\r\n        setRealIndex(offset * perPage + 1)\r\n        setOffset(selectedPage)\r\n    }\r\n\r\n    const handleSearch = (array, searchText) => {\r\n        if (searchText === ''){\r\n            setModulesTable(slicedData)\r\n        }\r\n        else{\r\n            setModulesTable(search(array, searchText, 'name'))\r\n        } \r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getInstitution()\r\n                const data = res.data\r\n                const slicedData = data.slice(offset * perPage, offset + perPage)\r\n                setModulesTable(slicedData)\r\n                setSearchObj(data)\r\n                setSlicedData(slicedData)\r\n                setContentLength(data.length)\r\n                setPageCount(Math.ceil(data.length / perPage))\r\n                setIsLoading(false)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [offset, perPage, contentLength])\r\n\r\n    return (\r\n        <DashboardFrame title=\"Administrator\" subTitle=\"Modules\">\r\n            <Helmet>\r\n                <title>Modules | iEduCare</title>\r\n            </Helmet> \r\n            <LinkInstitutionModal show={showAddNew} onHide={() => setAddNew(false)} contentLength={contentLength} setContentLength={setContentLength} />\r\n            <AddModuleModal show={showAddModule} onHide={() => setAddModule(false)} />\r\n            <ViewEditModules show={showEditModule} onHide={() => setEditModule(false)} editInstitutionName={editInstitutionName} editInstitutionId={editInstitutionId} contentLength={contentLength} setContentLength={setContentLength}/>\r\n            <div className=\"content-page\">\r\n            {isLoading ? \r\n                <ContentLoader />\r\n                :\r\n                <div className=\"institution-section\">\r\n                    <div className=\"header border-bottom\">\r\n                        <Button className=\"add-new-btn\" onClick={() => setAddNew(true)}><span className=\"iconify\" data-icon=\"bx:bx-link\" data-inline=\"false\"></span> Link New Institution </Button>\r\n                        {/* <Button className=\"add-new-btn\" onClick={() => setAddModule(true)}><span className=\"iconify\" data-icon=\"fluent:add-12-filled\" data-inline=\"false\"></span> Create Module </Button> */}\r\n                    </div>\r\n                    <div className=\"table-header\">\r\n                        <div className=\"entries\">\r\n                            <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                            <div className=\"entries-input\">\r\n                                <select className=\"entries-box\" id=\"entries\" onChange={(e) => setPerPage(e.target.value)}>\r\n                                    {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                        <option value={value} key={value}>{value}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"entries-label\"> entries </div>\r\n                        </div>\r\n                        <div className=\"search\">\r\n                            <label htmlFor=\"search\" className=\"search-label\">Search: </label>\r\n                            <input type=\"search\" className=\"search-box\" id=\"search\" onChange={(event) => handleSearch(searchObj, event.target.value)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"institution-table\">\r\n                        <Table responsive hover size=\"lg\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>S/N</th>\r\n                                    <th>Assigned Institutions</th>\r\n                                    <th>Active Modules</th>\r\n                                    <th>Status</th>\r\n                                    <th>Last Edited</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {modulesTable.map((data, index) => (\r\n                                    <tr key={data.id}>\r\n                                        <td className=\"id\">{tableIndex(index, realIndex)}</td>\r\n                                        <td className=\"uni-name\">{data.name}</td>\r\n                                        <td><Link \r\n                                                to=\"/modules\"\r\n                                                onClick={() => {\r\n                                                    setEditModule(true)\r\n                                                    setEditInstitutionName(data.name)\r\n                                                    setEditInstitutionId(data.id)\r\n                                                }}\r\n                                            >\r\n                                                {data.noOfModules}\r\n                                            </Link></td>\r\n                                        <td> {data.isDeleted ? <StatusInactive /> : <StatusActive /> } </td>\r\n                                        <td>{data.updateDate}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                            </Table>\r\n                        </div>\r\n                        <div className=\"pagination-section\">\r\n                            <div className=\"page-entry\">\r\n                                Showing {offset * perPage + 1} to {offset + perPage} of {contentLength} entries\r\n                            </div>\r\n                            <div className=\"page-nav\">\r\n                                <PaginationComponent \r\n                                    pageCount={pageCount} \r\n                                    handlePageClick={handlePageClick} \r\n                                />\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n            }\r\n            </div>\r\n        </DashboardFrame>\r\n    )\r\n}\r\n\r\nexport default Modules\r\n","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport * as Yup from 'yup';\r\nimport {useState, useEffect} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {getInstitution, getLicenseType, generateLicenseKey, createLicense} from '../../../services/institutionServices';\r\n\r\nconst AddLicenseManagerModal = (props) => {\r\n    const [institution, setInstitution] = useState([])\r\n    const [licenseType, setLicenseType] = useState([])\r\n    const [licenseKey, setLicenseKey] = useState(\"\")\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getInstitution()\r\n                setInstitution(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getLicenseType()\r\n                setLicenseType(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        data.license = licenseKey\r\n        console.log(data)\r\n        try{\r\n            const res = await createLicense(data)\r\n            if (res.status === 200 || res.status === 204){\r\n                setAlertType(\"success\")\r\n                setMessage(\"License Created Successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength + 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to create Lcense\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        institutionId: '',\r\n        lisenceTypeId: '',\r\n        expiryDate: ''\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        institutionId: Yup.string().required(\"Institution Name is Required\"),\r\n        lisenceTypeId: Yup.string().required(\" Type of License is Required \"),\r\n        expiryDate: Yup.string()\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit: onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n    const generateLicense = async() => {\r\n        try{\r\n            const res = await generateLicenseKey()\r\n            setLicenseKey(res.data)\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n        }\r\n    \r\n    }\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"lg\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Create New License\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\" id=\"select-input\">\r\n                                    <TextField \r\n                                        select \r\n                                        name=\"institutionId\" \r\n                                        id=\"institutionId\" \r\n                                        label=\"Institution\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.institutionId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.institutionId && Boolean(formik.errors.institutionId)}\r\n                                        helperText={formik.touched.institutionId && formik.errors.institutionId}\r\n                                    >\r\n                                        <MenuItem value=\"\">Select Institution</MenuItem>\r\n                                        {institution.map((data) => (\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\" id=\"select-input\">\r\n                                    <TextField \r\n                                        select \r\n                                        name=\"lisenceTypeId\" \r\n                                        id=\"lisenceTypeId\"\r\n                                        label=\"License Type\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.lisenceTypeId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.lisenceTypeId && Boolean(formik.errors.lisenceTypeId)}\r\n                                        helperText={formik.touched.lisenceTypeId && formik.errors.lisenceTypeId}\r\n                                    >\r\n                                        <MenuItem value=\"\">Choose License Type</MenuItem>\r\n                                        {licenseType.map(data => (\r\n                                            <MenuItem value={data.id} key={data.id}> {data.name} </MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            {formik.values.lisenceTypeId === \"494aae4e-ae84-4568-a79c-3a38b7946b20\" &&\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\">\r\n                                    <TextField \r\n                                        type=\"date\" \r\n                                        name=\"expiryDate\" \r\n                                        id=\"expiryDate\" \r\n                                        placeholder=\"Set License Expiring Date\"\r\n                                        label=\"Expiring Date\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.expiryDate}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.expiryDate && Boolean(formik.errors.expiryDate)}\r\n                                        helperText={formik.touched.expiryDate && formik.errors.expiryDate}\r\n                                    />\r\n                                    </div>\r\n                            </Col>\r\n                            }\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\">\r\n                                    <TextField \r\n                                        type=\"text\" \r\n                                        name=\"license\" \r\n                                        id=\"license\"\r\n                                        placeholder=\"License\"\r\n                                        label=\"License\"\r\n                                        disabled={true} \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={licenseKey}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.license && Boolean(formik.errors.license)}\r\n                                        helperText={formik.touched.license && formik.errors.license}\r\n                                    />\r\n                                </div>\r\n                                <button type=\"button\" className=\"generate-btn\" onClick={generateLicense}>Generate License Key</button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit ? true : false}>\r\n                        {isSubmit ? \"Submitting...\" : \"Submit\"}\r\n                    </button>\r\n                    \r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default AddLicenseManagerModal","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {Formik, Form} from 'formik';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {deleteInstitutionLicense} from '../../../services/institutionServices';\r\n\r\nconst DeleteLicenseModal = (props) => {\r\n\r\n    const {data} = props\r\n\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n\r\n    \r\n    const onSubmit = async(editData) => {\r\n        const institutionId = data.id\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await deleteInstitutionLicense(institutionId, editData)\r\n            if (res.status === 204 || res.status === 200){\r\n                setAlertType(\"success\")\r\n                setMessage(\"Institution License deleted Successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength - 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Delete to Institution License\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        isDeleted: true\r\n    }\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Delete License\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={onSubmit}\r\n            >\r\n                <Form>\r\n                    <Modal.Body className=\"\">\r\n                        <Container>       \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}  \r\n                        <Row>\r\n                        <Col lg={12}>\r\n                          <span className=\"iconify delete-warning\" data-icon=\"ant-design:warning-filled\" data-inline=\"false\"></span>\r\n                          <b className=\"delete-text\">Are you sure you want to delete License?</b>\r\n                          </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer className=\"modal-btn\">\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"delete-btn\" disabled={isSubmit ? true : false}>{\r\n                        isSubmit ? \"Deleting...\" : \"Delete\"\r\n                    }</button>\r\n                </Modal.Footer>\r\n            </Form>\r\n        </Formik>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default DeleteLicenseModal\r\n","import DashboardFrame from './subcomponent/DashboardFrame';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Table, Button} from 'react-bootstrap';\r\nimport PaginationComponent from './subcomponent/PaginationComponent';\r\nimport {useState, useEffect} from 'react';\r\nimport {getInstitutionLicense} from '../../services/institutionServices';\r\nimport AddLicenseManagerModal from './subcomponent/AddLicenseManagerModal';\r\nimport {dateConverter, tableIndex, search} from '../../utils/Functions';\r\nimport DeleteLicenseModal from './subcomponent/DeleteLicenseModal';\r\nimport ContentLoader from '../components/ContentLoader';\r\n\r\nconst LicenseManager = () => {\r\n\r\n    const [showAddNew, setAddNew] = useState(false)\r\n    const [licenseState, setLicenseState] = useState([])\r\n    const [showAddDelete, setAddDelete] = useState(false)\r\n    const [content, setContent] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    const [offset, setOffset] = useState(0)\r\n    const [perPage, setPerPage] = useState(5)\r\n    const [pageCount, setPageCount] = useState(0)\r\n    const [contentLength, setContentLength] = useState(0)\r\n    const [realIndex, setRealIndex] = useState(1)\r\n\r\n    const [searchObj, setSearchObj] = useState([])\r\n    const [slicedData, setSlicedData] = useState([])\r\n\r\n    const handlePageClick = (e) => {\r\n        const selectedPage = e.selected;\r\n        setRealIndex(offset * perPage + 1)\r\n        setOffset(selectedPage)\r\n    }\r\n\r\n    const handleSearch = (array, searchText) => {\r\n        if (searchText === ''){\r\n            setLicenseState(slicedData)\r\n        }\r\n        else{\r\n            setLicenseState(search(array, searchText, 'institutionName'))\r\n        } \r\n    }\r\n\r\n    useEffect(()=>{\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getInstitutionLicense()\r\n                const data = res.data\r\n                const slicedData = data.slice(offset * perPage, offset + perPage)\r\n                setSearchObj(data)\r\n                setSlicedData(slicedData)\r\n                setLicenseState(slicedData)\r\n                setContentLength(data.length)\r\n                setPageCount(Math.ceil(data.length / perPage))\r\n                setIsLoading(false)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [offset, perPage, contentLength])\r\n\r\n    return (\r\n        <DashboardFrame title=\"Administrator\" subTitle=\"License Manager\">\r\n            <Helmet>\r\n                <title>License Manager | iEduCare</title>\r\n            </Helmet> \r\n            <AddLicenseManagerModal show={showAddNew} onHide={() => setAddNew(false)} contentLength={contentLength} setContentLength={setContentLength} />\r\n            <DeleteLicenseModal show={showAddDelete} onHide={() => setAddDelete(false)} data={content} contentLength={contentLength} setContentLength={setContentLength}/>\r\n            <div className=\"content-page\">\r\n            {isLoading ? \r\n                <ContentLoader />\r\n                :\r\n                <div className=\"institution-section\">\r\n                    <div className=\"header border-bottom\">\r\n                        <Button className=\"add-new-btn\" onClick={() => setAddNew(true)}><span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span> Add New </Button>\r\n                    </div>\r\n                    <div className=\"table-header\">\r\n                        <div className=\"entries\">\r\n                            <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                            <div className=\"entries-input\">\r\n                                <select className=\"entries-box\" id=\"entries\" onChange={(e) => setPerPage(e.target.value)}>\r\n                                    {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                        <option value={value} key={value}>{value}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"entries-label\"> entries </div>\r\n                        </div>\r\n                        <div className=\"search\">\r\n                            <label htmlFor=\"search\" className=\"search-label\">Search: </label>\r\n                            <input type=\"search\" className=\"search-box\" id=\"search\" onChange={(event) => handleSearch(searchObj, event.target.value)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"institution-table\">\r\n                        <Table responsive bordered hover size=\"lg\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>S/N</th>\r\n                                    <th>Name of Institution</th>\r\n                                    <th>License Type</th>\r\n                                    <th>Date Created</th>\r\n                                    <th>Expiry Date</th>\r\n                                    <th>Action</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {licenseState.map((data, index)=>(\r\n                                    <tr key={data.id}>\r\n                                        <td className=\"id\">{tableIndex(index, realIndex)}</td>\r\n                                        <td className=\"uni-name\"><span>{data.institutionName}</span></td>\r\n                                        <td>{data.licenseTypeName}</td>\r\n                                        <td>{dateConverter(data.dateCreated)}</td>\r\n                                        <td>{dateConverter(data.expiryDate)}</td>\r\n                                        <td> \r\n                                        <span\r\n                                            className=\"delete-icon-section\"\r\n                                            onClick={() => {\r\n                                            setAddDelete(true)\r\n                                            setContent(data)\r\n                                            }}\r\n                                        >\r\n                                        <span className=\"iconify delete\" data-icon=\"ant-design:delete-filled\" data-inline=\"false\">\r\n                                        </span> \r\n                                        <span className=\"deletetext\">Delete</span>\r\n                                        </span> \r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                            </Table>\r\n                        </div>\r\n                        <div className=\"pagination-section\">\r\n                            <div className=\"page-entry\">\r\n                                Showing {offset * perPage + 1} to {offset + perPage} of {contentLength} entries\r\n                            </div>\r\n                            <div className=\"page-nav\">\r\n                                <PaginationComponent \r\n                                    pageCount={pageCount} \r\n                                    handlePageClick={handlePageClick} \r\n                                />\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n            }\r\n            </div>\r\n        </DashboardFrame>\r\n    )\r\n}\r\n\r\nexport default LicenseManager\r\n","import {Row, Col, Container} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Link} from 'react-router-dom';\r\nimport {Loading, SubmitBtn} from './LoginBtns';\r\n\r\n\r\nconst AdminLoginForm = ({initialValues, onSubmit, validationSchema, btnState}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        onSubmit: onSubmit,\r\n        validationSchema: validationSchema\r\n    })\r\n\r\n    return (\r\n        <section>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Container>\r\n                <Row>\r\n                    <Col lg={12}>\r\n                        <TextField\r\n                            label=\"Username\"\r\n                            type=\"text\" \r\n                            name=\"email\" \r\n                            id=\"email\"\r\n                            margin=\"normal\"\r\n                            InputLabelProps={{\r\n                              shrink: true,\r\n                            }}\r\n                            variant=\"outlined\"\r\n                            placeholder=\"Username\"\r\n                            value={formik.values.email}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.email && Boolean(formik.errors.email)}\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col lg={12}>\r\n                        <TextField \r\n                            label=\"Password\"\r\n                            type=\"password\" \r\n                            name=\"password\" \r\n                            id=\"password\" \r\n                            placeholder=\"Password\" \r\n                            margin=\"normal\"\r\n                            InputLabelProps={{\r\n                              shrink: true,\r\n                            }}\r\n                            variant=\"outlined\"\r\n                            value={formik.values.password}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.password && Boolean(formik.errors.password)}\r\n                            helperText={formik.touched.password && formik.errors.password}\r\n                        />  \r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col lg={6}>\r\n                        <Link to=\"/forgot-password\" className=\"forgot-pwd\">Forgot Password</Link>\r\n                    </Col>\r\n                    <Col lg={6}>\r\n                    {btnState ? <Loading /> : <SubmitBtn />}\r\n                    </Col>\r\n                </Row>\r\n                </Container>\r\n            </form>\r\n    </section>\r\n    )\r\n}\r\n\r\nexport default AdminLoginForm\r\n","import { Container, Col, Row } from 'react-bootstrap';\r\nimport AdminLoginForm from '../components/AdminLoginForm';\r\nimport { Helmet } from 'react-helmet';\r\nimport * as Yup from 'yup';\r\nimport { motion } from 'framer-motion';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { loginUser } from '../../services/userServices';\r\nimport { PopupAlert } from '../components/Alert';\r\nimport { useState } from 'react';\r\nimport { getUserRole } from '../../utils/Functions';\r\nimport { predefinedUserRole } from '../../utils/enums';\r\n\r\nconst AdminLogin = () => {\r\n\r\n    const [showAlert, setShowAlert] = useState(false)\r\n    const [alertType, setAlertType] = useState(\"\")\r\n    const [message, setMessage] = useState(\"\")\r\n    const [btnState, setBtnState] = useState(false)\r\n\r\n    let history = useHistory()\r\n\r\n    const initialValues = {\r\n        email: '',\r\n        password: ''\r\n    }\r\n\r\n    const onSubmit = async (user) => {\r\n        setBtnState(true)\r\n        try {\r\n            let res = await loginUser(user)\r\n            const status = res.status\r\n            const data = res.data\r\n            if (status === 200 && data.isValid) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"refresh\", data.refreshToken)\r\n                localStorage.setItem(\"webUserId\", data.webUserId)\r\n                localStorage.setItem(\"institutionId\", data.institutionId)\r\n                const userRole = getUserRole()\r\n                if (userRole === predefinedUserRole.admin) {\r\n                    setAlertType(\"success\")\r\n                    setMessage(\"Login Successful\")\r\n                    setShowAlert(true)\r\n                    setTimeout(() => {\r\n                        setBtnState(false)\r\n                        history.push('/dashboard')\r\n                    }, 100)\r\n                }\r\n                else {\r\n                    localStorage.clear()\r\n                    setAlertType(\"danger\")\r\n                    setMessage(\"You are not an Institutional Admin\")\r\n                    setShowAlert(true)\r\n                    setBtnState(false)\r\n                    if (userRole === predefinedUserRole.student) {\r\n                        setTimeout(() => {\r\n                            history.push('/student-login')\r\n                        }, 300)\r\n                    }\r\n                    else if (userRole === predefinedUserRole.user || userRole === predefinedUserRole.superAdmin) {\r\n                        setTimeout(() => {\r\n                            history.push('/')\r\n                        }, 300)\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Invalid Username or Password\")\r\n                setShowAlert(true)\r\n                setBtnState(false)\r\n            }\r\n        }\r\n        catch (err) {\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Invalid Username or Password\")\r\n            setShowAlert(true)\r\n            setBtnState(false)\r\n        }\r\n\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().required(\"Username is required\"),\r\n        password: Yup.string().required(\"Password is required\")\r\n    })\r\n\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Admin Login | iEduCare</title>\r\n            </Helmet>\r\n            <div className=\"content-page admin\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col lg={6}>\r\n                            <motion.div \r\n                                className=\"sch-admin\" \r\n                                id=\"sch-admin\"\r\n                                initial={{opacity: 0}}\r\n                                animate={{opacity: 1}}\r\n                                transition={{duration: 1.5, delay: 0.5}}\r\n                            >\r\n                                <div className=\"admin-login\">\r\n                                    <div className=\"header\">Admin Portal</div>\r\n                                    {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message} />}\r\n                                    <AdminLoginForm initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema} btnState={btnState} />\r\n                                </div>\r\n                                <div className=\"login-footer\">Copyright © 2021.  All Rights Reserved - Powered by Turon Technologies Limited </div>\r\n                            </motion.div>\r\n                        </Col>\r\n                        <Col lg={6}>\r\n                            <motion.div \r\n                                className=\"uni-landing\"\r\n                                initial={{x: -700}}\r\n                                animate={{x: 0}}\r\n                                transition={{duration: 1.5, delay: 0.5}}\r\n                            >\r\n                                <div className=\"uni-logo-section\">\r\n                                    <div style={{ display: \"flex\", justifyContent: \"center\", flexWrap: \"wrap\", }}>\r\n                                        <img src=\"./assets/images/IeducareLogo1.png\" style={{ width: \"15%\", marginTop: \"30px\" }} alt=\"Login Logo\" />\r\n                                        <div style={{ width: \"100%\" }} className=\"uni-name\"><img style={{ width: \"20%\", margin: \"0\" }} src=\"./assets/images/Vector(2).png\" alt=\"Login Logo\" /></div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"login-img\">\r\n                                    <img src=\"./assets/images/login-img.png\" alt=\"Login\" />\r\n                                </div>\r\n                            </motion.div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminLogin","import React from 'react'\r\n\r\nfunction WelcomeNote() {\r\n    return (\r\n        <div className=\"StudentLoginForm-Welcome-container\">\r\n            <div className=\"StudentLoginForm-Welcome-wrapper\">\r\n                <div className=\"StudentLoginForm-Welcome\">\r\n                    <div><img src=\"./assets/images/IeducareLogo1.png\" alt=\"student-login-logo\" className=\"StudentLoginForm-Logo-Img\" /> <img src=\"./assets/images/Vector(2).png\" alt=\"student-login-logo\" className=\"\" /></div>\r\n                    <div className=\"StudentLoginForm-Welcome-content\">We welcome you to our association and provide you the new curriculum details for your best studies. We look forward to best results from you and a good association of studies with you. </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"StudentLoginForm-bottom-img-wrapper\">\r\n                <div><img src=\"./assets/images/student.png\" alt=\"UniLogo\" className=\"StudentLoginForm-bottom-Student-img\" /></div>\r\n                <div><img src=\"./assets/images/student-logo.png\" alt=\"UniLogo\" className=\"StudentLoginForm-bottom-img\" /></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WelcomeNote\r\n","import { instance } from './httpService';\r\n\r\nconst http = instance;\r\n\r\n\r\nexport const getStudentLogin = (data) => {\r\n    return http.post(\"/api/sme/authentication/signin/\", data)\r\n}\r\n\r\n\r\nexport const getStudentProfile = (data) => {\r\n    return http.post(`/api/SUDENTPROFILEAPI/${data.id}`, data)\r\n}\r\n\r\nexport const getStudentChart = () => {\r\n    return http.get(\"/Student/RegisteredStudent/LineChart\")\r\n}","import React, { useState } from 'react'\r\nimport LoginForm from '../components/LoginForm';\r\nimport * as Yup from 'yup';\r\nimport { useHistory } from 'react-router-dom';\r\nimport WelcomeNote from './WelcomeNote';\r\nimport { getUserRole } from '../../utils/Functions';\r\nimport { predefinedUserRole } from '../../utils/enums';\r\nimport { getStudentLogin } from \"../../services/StudentServices\"\r\n\r\n\r\nfunction StudentLoginForm() {\r\n\r\n    let history = useHistory()\r\n\r\n    const [showAlert, setShowAlert] = useState(false)\r\n    const [alertType, setAlertType] = useState(\"\")\r\n    const [message, setMessage] = useState(\"\")\r\n    const [btnState, setBtnState] = useState(false)\r\n\r\n    const initialValues = {\r\n        email: '',\r\n        password: ''\r\n    }\r\n\r\n    const onSubmit = async (user) => {\r\n        setBtnState(true)\r\n        try {\r\n            let res = await getStudentLogin(user)\r\n            const status = res.status\r\n            const data = res.data\r\n            if (status === 200 && data.isValid) {\r\n                history.push({\r\n                    pathname: \"/mydashboard\"\r\n                })\r\n            }\r\n        }\r\n        catch (err) {\r\n            setBtnState(false)\r\n            console.log(\"RES\", err)\r\n        }\r\n    }\r\n\r\n    // const onSubmit = async (user) => {\r\n    //     setBtnState(true)\r\n    //     try {\r\n    //         let res = await getStudentLogin(user)\r\n    //         const status = res.status\r\n    //         const data = res.data\r\n    //         if (status === 200 && data.isValid) {\r\n    //             localStorage.setItem(\"token\", data.token)\r\n    //             localStorage.setItem(\"refresh\", data.refreshToken)\r\n    //             localStorage.setItem(\"webUserId\", data.webUserId)\r\n    //             const userRole = getUserRole()\r\n    //             if (userRole === predefinedUserRole.student) {\r\n    //                 setAlertType(\"success\")\r\n    //                 setMessage(\"Login Successful\")\r\n    //                 setShowAlert(true)\r\n    //                 setTimeout(() => {\r\n    //                     setBtnState(false)\r\n    //                     history.push({\r\n    //                         pathname: \"/mydashboard\"\r\n    //                     })\r\n    //                 }, 100)\r\n    //             }\r\n    //             else {\r\n    //                 localStorage.clear()\r\n    //                 setAlertType(\"danger\")\r\n    //                 setMessage(\"You are not a Student\")\r\n    //                 setShowAlert(true)\r\n    //                 setBtnState(false)\r\n    //                 if (userRole === predefinedUserRole.superAdmin) {\r\n    //                     setTimeout(() => {\r\n    //                         history.push('/')\r\n    //                     }, 300)\r\n    //                 }\r\n    //                 else if (userRole === predefinedUserRole.admin) {\r\n    //                     setTimeout(() => {\r\n    //                         history.push('/admin-login')\r\n    //                     }, 300)\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //         else {\r\n    //             setAlertType(\"danger\")\r\n    //             setMessage(\"Invalid Email or Password\")\r\n    //             setShowAlert(true)\r\n    //             setBtnState(false)\r\n    //         }\r\n    //     }\r\n    //     catch (err) {\r\n    //         setAlertType(\"danger\")\r\n    //         setMessage(\"Invalid Email or Password\")\r\n    //         setShowAlert(true)\r\n    //         setBtnState(false)\r\n    //     }\r\n    // }\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().email(\"Invalid Email Format\").required(\"Email is required\"),\r\n        password: Yup.string().required(\"Password is required\")\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"StudentLoginForm-container\">\r\n            <div className=\"StudentLoginForm-wrapper\">\r\n                <WelcomeNote />\r\n                <div className=\"StudentLoginForm-Form-input-container\">\r\n                    <div>\r\n                        <div className=\"\">\r\n                            <div className=\"StudentLoginForm-Form-input-Wrapper\">\r\n                                <div>\r\n                                    <div className=\"StudentLoginForm-Form-input-content-Wrapper\">\r\n                                        <div style={{ marginTop: \"20%\", marginBottom: \"30%\" }}>\r\n                                            <div>\r\n                                                <img src=\"./assets/images/IeducareLogo2.png\" alt=\"student-login-logo\" />\r\n                                            </div>\r\n                                            <div className=\"StudentLoginForm-Form-icon-text\">Student Portal</div>\r\n                                            <div id=\"StudentLoginForm-Login-Form-input-container\">\r\n                                                <LoginForm initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema} btnState={btnState} />\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                        <footer className=\"StudentLoginForm-Form-input-footer\">Copyright © 2021.  All Rights Reserved - Powered by Turon Technologies Limited</footer>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StudentLoginForm\r\n","import {Helmet} from 'react-helmet';\r\nimport StudentLoginForm from '../components/StudentLoginForm';\r\n\r\n\r\nconst StudentLogin = () => {\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title> Login | Adeyemi College of Education</title>\r\n            </Helmet>\r\n            <StudentLoginForm />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default StudentLogin","import React from 'react'\r\n\r\nfunction CloseIcon() {\r\n    return (\r\n        <span className=\"iconify CloseButton\" data-icon=\"ion:close\" data-inline=\"false\"></span>\r\n    )\r\n}\r\n\r\nexport default CloseIcon\r\n","import { NavLink, Link } from 'react-router-dom';\r\nimport CloseIcon from './CloseIcon';\r\nimport store from '../../../store/store';\r\nimport { useState } from '@hookstate/core';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n\r\nconst SideMenu = ({ open, CloseMenu }) => {\r\n\r\n    let history = useHistory()\r\n\r\n    const {role} = useState(store)\r\n    const {alertType} = useState(store)\r\n    const {alertNotification} = useState(store)\r\n    const {alertMessage} = useState(store)\r\n    const {firstName} = useState(store)\r\n    const {lastName} = useState(store)\r\n    const {phoneNumber} = useState(store)\r\n    const {email} = useState(store)\r\n    const {userId} = useState(store)\r\n\r\n\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem(\"token\")\r\n        role.set(\"\")\r\n        firstName.set(\"\")\r\n        lastName.set(\"\")\r\n        phoneNumber.set(\"\")\r\n        email.set(\"\")\r\n        userId.set(\"\")\r\n        alertType.set(\"success\")\r\n        alertMessage.set(\"Logout Successful\")\r\n        alertNotification.set(true)\r\n        setTimeout(() => {\r\n            alertNotification.set(false)\r\n            history.push({\r\n                pathname: \"/\"\r\n            })\r\n        }, 1000)\r\n    }\r\n\r\n    return (\r\n        <div className={open ? \"side-menu side-menuOpen\" : \"side-menu side-menuClose\"} >\r\n            <div className=\"side-menu-content\">\r\n                <div className=\"logo-section\">\r\n                    <img style={{ margin: \"0\", padding: \"0\" }} src=\"/assets/images/logo.png\" alt=\"logo\" />\r\n                    <div className='sidemenu-header-text'>ACE</div>\r\n                    <div><button className=\"CloseButtonBody\" onClick={CloseMenu}><CloseIcon /></button></div>\r\n                </div>\r\n                <div className=\"studentInfoContainer\">\r\n                    <div className=\"studentInfoNameContainer\">\r\n                        <span className=\"studentInfoName\" >{lastName.get().charAt(0).toUpperCase()}{firstName.get().charAt(0).toUpperCase()}</span>\r\n                    </div>\r\n                    <div className=\"studentInfoFullName\" >{lastName.get() + \" \" + firstName.get()}</div>\r\n                </div>\r\n                <div className=\"nav-links\">\r\n                    <ul>\r\n                        <li>\r\n                            <NavLink  to=\"/mydashboard\" >\r\n                                <span className=\"iconify\" data-icon=\"zmdi:view-dashboard\" data-inline=\"false\"></span>\r\n                                Dashboard\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink  to=\"/student-profile\">\r\n                                <span className=\"iconify\" data-icon=\"fluent:patient-32-filled\" data-inline=\"false\"></span>\r\n                                Student Profile\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink  to=\"/courses\" >\r\n                                <span className=\"iconify\" data-icon=\"akar-icons:book\" data-inline=\"false\"></span>\r\n                                Courses\r\n                           </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink  to=\"/attendance\" >\r\n                                <span className=\"iconify\" data-icon=\"mdi:notebook-check-outline\" data-inline=\"false\"></span>\r\n                                Attendance\r\n                           </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <Link  to=\"/timetable\">\r\n                                <span className=\"iconify\" data-icon=\"bx:bx-spreadsheet\" data-inline=\"false\"></span>\r\n                                Exam TimeTable\r\n                            </Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link  to=\"/exam-result\">\r\n                            <span className=\"iconify\" data-icon=\"heroicons-outline:document-report\" data-inline=\"false\"></span>\r\n                                Result\r\n                            </Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link  to=\"/student-annoucement\">\r\n                                <span className=\"iconify\" data-icon=\"ant-design:notification-outlined\" data-inline=\"false\"></span> Annoucements\r\n                            </Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"#\">\r\n                                <span className=\"iconify\" data-icon=\"ic:baseline-support-agent\" data-inline=\"false\"></span>Complaints\r\n                            </Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"#\" style={{ marginBottom: \"30px\" }} onClick={logout}>\r\n                                <span className=\"iconify\" data-icon=\"ls:logout\" data-inline=\"false\"></span>\r\n                                Logout\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideMenu;","import React, {useEffect} from \"react\";\r\nimport Breadcrumb from \"../../components/Breadcrumb\";\r\nimport SideMenu from \"./SideMenu\";\r\nimport TopMenu from \"../../components/TopMenu\";\r\nimport Footer from \"../../components/Footer\";\r\nimport { userDetails } from \"../../../services/userServices\";\r\nimport store from \"../../../store/store\";\r\nimport { useState } from \"@hookstate/core\";\r\nimport { PopupAlert } from \"../../components/Alert\";\r\n\r\n\r\nconst DashboardFrame = ({ children, title, subTitle }) => {\r\n\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const openMenu = () => {\r\n        setOpen(true)\r\n    }\r\n    const CloseMenu = () => {\r\n        setOpen(!true)\r\n    }\r\n\r\n    const {firstName} = useState(store)\r\n    const {lastName} = useState(store)\r\n    const {phoneNumber} = useState(store)\r\n    const {email} = useState(store)\r\n    const {alertType} = useState(store)\r\n    const {userId} = useState(store)\r\n    const {alertNotification} = useState(store)\r\n    const {alertMessage} = useState(store)\r\n    const {deptID} = useState(store)\r\n\r\n\r\n    useEffect(() => {\r\n        try{\r\n            const fetch = async () => {\r\n                if(firstName.get() === \"\"){\r\n                    const user = await userDetails()\r\n                    firstName.set(user.data.firstName)\r\n                    lastName.set(user.data.lastName)\r\n                    phoneNumber.set(user.data.phoneNumber)\r\n                    email.set(user.data.email)\r\n                    userId.set(user.data.id)\r\n                    deptID.set(user.data.departmentID)\r\n                }\r\n            }  \r\n            fetch()\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }, [])\r\n    \r\n    return ( \r\n        <div className=\"wrapper\">\r\n            <SideMenu open={open} CloseMenu={CloseMenu}/>\r\n            <div className=\"topbar\">\r\n                <TopMenu openMenu={openMenu} open={open} />\r\n                <Breadcrumb title={title} subTitle={subTitle}/>\r\n                {alertNotification.get() && \r\n                <PopupAlert \r\n                    alertType={alertType.get()} \r\n                    setShowAlert={alertNotification.set} \r\n                    message={alertMessage.get()}\r\n                />\r\n                }\r\n                {children}\r\n                <Footer />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DashboardFrame;\r\n","import { Card } from \"react-bootstrap\"\r\nimport { AllStudent } from \"./BiodataForm/Data\"\r\n\r\nfunction studentInfo({data}) {\r\n    return (\r\n        <Card style={{ marginBottom: \"20px\" }} className=\"StudentInfoCard\">\r\n            <Card.Body className=\"StudentInfoWrapper\">\r\n                <Card.Text>\r\n                    <div className=\"StudentInfoTitle\">Student Information</div>\r\n                        <div>\r\n                            <div className=\"StudentInfoBody\">\r\n                                <div className=\"StudentInfoBodyTile\">\r\n                                    Matric No:\r\n                            </div>\r\n                                <div className=\"StudentInfoBodyTileAns\">\r\n                                    {data.matricNumber ? data.matricNumber : \"-\"}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"StudentInfoBody\">\r\n                                <div className=\"StudentInfoBodyTile\">\r\n                                    Program:\r\n                            </div>\r\n                                <div className=\"StudentInfoBodyTileAns\">\r\n                                    {data.programme ? data.programme : \"-\"}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"StudentInfoBody\">\r\n                                <div className=\"StudentInfoBodyTile\">\r\n                                    Level:\r\n                            </div>\r\n                                <div className=\"StudentInfoBodyTileAns\">\r\n                                    {data.currentLevel ? data.currentLevel : \"-\"}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"StudentInfoBody\">\r\n                                <div className=\"StudentInfoBodyTile\">\r\n                                    School:\r\n                            </div>\r\n                                <div className=\"StudentInfoBodyTileAns\">\r\n                                    {data.school ? data.school : \"-\"}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"StudentInfoBody\">\r\n                                <div className=\"StudentInfoBodyTile\">\r\n                                    Department:\r\n                            </div>\r\n                                <div className=\"StudentInfoBodyTileAns\">\r\n                                    {data.department ? data.department : \"-\"}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"StudentInfoBody\">\r\n                                <div className=\"StudentInfoBodyTile\">\r\n                                    Gender:\r\n                            </div>\r\n                                <div className=\"StudentInfoBodyTileAns\">\r\n                                    {data.gender ? data.gender : \"-\"}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"StudentInfoBody\">\r\n                                <div className=\"StudentInfoBodyTile\">\r\n                                    Jamb Reg No.:\r\n                            </div>\r\n                                <div className=\"StudentInfoBodyTileAns\">\r\n                                    {data.jambRegNumber ? data.jambRegNumber : \"-\"}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                </Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default studentInfo\r\n","import { instance } from './httpService';\r\n\r\nconst http = instance;\r\n\r\nexport const getRegStatus = () => {\r\n    return http.get(\"/Biodata/Registeration/Progress\")\r\n}\r\n\r\n","import React, {useState, useEffect} from 'react'\r\nimport { Card } from \"react-bootstrap\"\r\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport {getRegStatus} from '../../../services/biodataService';\r\n\r\nfunction RegistrationProgress() {\r\n\r\n    const [progress, setProgress] = useState([])\r\n\r\n    useEffect(() => {\r\n        try{\r\n            const fetch = async () => {\r\n                const res = await getRegStatus()\r\n                setProgress(res.data)\r\n            }\r\n            fetch()\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    ,[])\r\n    return (\r\n        <Card style={{ marginBottom: \"20px\"  }} className=\"ProgressBarCard\">\r\n            <Card.Body className=\"ProgressBarWrapper\">\r\n                <Card.Text>\r\n                    <div className=\"ProgressbarTitle\"> Registration Progress</div>\r\n                </Card.Text>\r\n                <div className=\"ProgressBarDelatils\">\r\n                    <div>\r\n                        <CircularProgressbar\r\n                            styles={buildStyles({\r\n                            pathColor: \"#FDC600\",\r\n                            textColor: '#333333',\r\n                            })} className=\"bar\"\r\n                            value={progress.progressPercent ? progress.progressPercent : 0}\r\n                            text={`${progress.progressPercent ? progress.progressPercent : 0}%`} />\r\n                    </div>\r\n                    <div className=\"ProgressBarDelatils2\">\r\n                        <ul>\r\n                            {progress.progressPercent === 100 ? <li className=\"completed\">Completed</li> : <li className=\"Uncompleted\">Uncompleted</li>}\r\n                            <li className=\"Satisfied\">{progress.completedRegProcess} Satisfied</li>\r\n                            <li className=\"requirements\">Of {progress.totalRegProcess} requirements</li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default RegistrationProgress\r\n","import { instance } from './httpService';\r\n\r\nconst http = instance;\r\n\r\nexport const getCurrentSessionSemester = () => {\r\n    return http.get(\"/Session/Current\")\r\n}\r\n\r\nexport const updateSesssionSemester = (data) => {\r\n    return http.post(\"/Session/Semester/New\", data)\r\n}","import { instance } from './httpService';\r\n\r\nconst http = instance;\r\n\r\nexport const getStudentFlag = (StudentID) => {\r\n    return http.get(`/Flag/Students/Get/StudentID/${StudentID}`)\r\n}\r\n\r\n","import React, {useEffect} from 'react'\r\nimport { Card } from \"react-bootstrap\";\r\nimport {getCurrentSessionSemester} from '../../../services/sessionServices';\r\nimport {getStudentFlag} from '../../../services/flagServices';\r\nimport {dateTimeConverter} from '../../../utils/Functions';\r\nimport store from '../../../store/store';\r\nimport {useState} from '@hookstate/core';\r\n\r\n\r\nfunction SchoolYear() {\r\n    const [schoolYear, setSchoolYear] = React.useState([])\r\n    const [flag, setFlag] = React.useState([])\r\n\r\n    const {userId} = useState(store)\r\n\r\n    useEffect(() => {\r\n        try{\r\n            const fetch = async () => {\r\n                const res = await getCurrentSessionSemester()\r\n                setSchoolYear(res.data)\r\n            }\r\n            fetch()\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    ,[])\r\n\r\n    useEffect(() => {\r\n        try{\r\n            const fetch = async () => {\r\n                const res = await getStudentFlag(userId.get())\r\n                setFlag(res.data)\r\n            }\r\n            fetch()\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    ,[])\r\n    return (\r\n        <Card style={{ textAlign: \"center\", marginBottom: \"20px\"  }} className=\"StudentInfoCard\">\r\n            <Card.Body className=\"StudentInfoWrapper\">\r\n                <Card.Text> \r\n                    <div className=\"StudentInfoTitle\">Current School Year </div>\r\n                    <div className=\"StudentFeesTable\">\r\n                            <div><span className=\"NoPaidFees\">Academic Session: </span><span style={{ color: \"#219653\" }}>{schoolYear.academicYear}</span></div>\r\n                            <div><span className=\"NoUnpaidFees\">Semester: </span><span style={{ color: \"#219653\" }}>{schoolYear.semester}</span> </div>\r\n                    </div>\r\n                    <div className=\"StudentInfoTitle\">Flag </div>\r\n                    <div className=\"StudentFeesTable\">\r\n                            <div><span className=\"NoPaidFees\">Level: </span><span style={{ color: \"#219653\" }}>{flag.flagLevel}</span></div>\r\n                            <div><span className=\"NoUnpaidFees\">Date: </span><span style={{ color: \"#219653\" }}>{dateTimeConverter(flag.date)}</span> </div>\r\n                    </div>\r\n                    {/* <Button className=\"StudentFeesButton\" onClick={LinktoFinace}><span className=\"StudentFeesButtonText\">View All</span></Button> */}\r\n                </Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default SchoolYear\r\n","import { instance } from './httpService';\r\n\r\nconst http = instance;\r\n\r\nexport const getAllAnnoucements = () => {\r\n    return http.get(\"/Annoucement/Get/All\")\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { Card, Button } from \"react-bootstrap\";\r\nimport {getAllAnnoucements} from '../../../services/annoucementService';\r\nimport {dateConverter} from '../../../utils/Functions';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nfunction PublicAnnouncement() {\r\n    let history = useHistory()\r\n\r\n    const [annoucements, setAnnoucements] = useState([])\r\n\r\n    useEffect(() => {\r\n        try{\r\n            const fetch = async () => {\r\n                const res = await getAllAnnoucements()\r\n                setAnnoucements(res.data.splice(0, 5))\r\n            }\r\n            fetch()\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    ,[])\r\n\r\n    const onClick = () => {\r\n        history.push({\r\n            pathname: \"/student-annoucement\"\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Card style={{ margin: \"\" }} className=\"PublicAnnouncementCard\">\r\n            <Card.Body className=\"PublicAnnouncementWrapper\">\r\n                <Card.Text>\r\n                    <div className=\"PublicAnnouncementTitle\"><span class=\"iconify AnnouncementIcon\" data-icon=\"tabler:speakerphone\" data-inline=\"false\"></span> Public Announcement/News</div>\r\n                    <div className=\"PublicAnnouncementBody\">\r\n                        {annoucements.map(data => (\r\n                            <div className=\"pol\" key={data.id}>\r\n                            <div className=\"PublicAnnouncementNote\">\r\n                                {data.title}\r\n                            </div>\r\n                            <div className=\"PublicAnnouncementDate\">\r\n                                {dateConverter(data.date)}\r\n                            </div>\r\n                        </div>    \r\n                        ))}\r\n                    </div>\r\n                </Card.Text>\r\n            </Card.Body>\r\n            <div style={{width:\"100%\"}}>\r\n                <Button \r\n                    className=\"StudentFeesButton PublicAnnouncementButton\"\r\n                    onClick={onClick}\r\n                >\r\n                    <span className=\"StudentFeesButtonText\">View All</span>\r\n                </Button>\r\n            </div>\r\n            \r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default PublicAnnouncement\r\n","import { instance } from './httpService';\r\n\r\nconst http = instance;\r\n\r\nexport const getStudentRegCourses = (id) => {\r\n    return http.get(`/CourseRegisteration/Student/CurrentAcademicYear/CurrentSemester/${id}`)\r\n}\r\n\r\nexport const getStudentRegCoursesBySemesterAndYear = (StudentID, AcademicYearID, SemesterID) => {\r\n    if(!AcademicYearID && !SemesterID){\r\n        return http.get(`/CourseRegisteration/Student/List/${StudentID}`)\r\n    }\r\n    else if(AcademicYearID && !SemesterID){\r\n        return http.get(`/CourseRegisteration/Student/List/${StudentID}?AcademicYearID=${AcademicYearID}/${SemesterID}`)\r\n    }\r\n    else if(!AcademicYearID && SemesterID){\r\n        return http.get(`/CourseRegisteration/Student/List/${StudentID}?SemesterID=${SemesterID}`)\r\n    }\r\n    else{\r\n        return http.get(`/CourseRegisteration/Student/List/${StudentID}?AcademicYearID=${AcademicYearID}&SemesterID=${SemesterID}`)\r\n    }\r\n    \r\n}\r\n\r\nexport const getStudentEligibleCourse = (DepartmentID) => {\r\n    return http.get(`/Course/Get/Student/EligibleCourses/${DepartmentID}`)\r\n}\r\n\r\nexport const registerCourse = (data) => {\r\n    return http.post(\"/CourseRegisteration/Register\", data)\r\n}","import React, {useEffect} from 'react'\r\nimport { Card} from \"react-bootstrap\"\r\nimport {getStudentRegCourses} from \"../../../services/courseServices\";\r\nimport {useState} from \"@hookstate/core\";\r\nimport store from '../../../store/store';\r\n\r\n\r\nfunction RegisteredCourses() {\r\n    const [regCourses, setRegCourses] = React.useState([])\r\n\r\n    const {userId} = useState(store)\r\n\r\n    useEffect(() => {\r\n        try{\r\n            const fetch = async () => {\r\n                const res = await getStudentRegCourses(userId.get())\r\n                setRegCourses(res.data)\r\n            }\r\n            fetch()\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    ,[])\r\n\r\n    return (\r\n        <Card style={{ marginBottom: \"20px\" }} className=\"RegisteredCoursesCard\">\r\n            <Card.Body className=\"\">\r\n                <Card.Text>\r\n                    <div className=\"RegisteredCoursesTitle\">My Registered Courses</div>\r\n                    <div className=\"AccademicstTableWrapper table-wrapper-scroll-y my-custom-scrollbar\">\r\n                          <table className=\"table\">\r\n                            <thead className=\"thead-light\">\r\n                            <tr>\r\n                                <th scope=\"col\" width=\"50\">S/N</th>\r\n                                <th scope=\"col\" width=\"300\">Course</th>\r\n                                <th scope=\"col\" width=\"200\">Unit</th>\r\n                                <th scope=\"col\" width=\"150\">Semester</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {regCourses.map((data, index) => (\r\n                                <tr key={data.id}>\r\n                                        <td className=\"TableContentColor\">{ index + 1}</td>\r\n                                        <td className=\"TableContentColor\">{data.course}</td>\r\n                                        <td>{data.courseUnit}</td>\r\n                                        <td>{data.semester}</td>\r\n                                </tr> \r\n                                    ))}\r\n                        </tbody>\r\n                    </table>\r\n                    </div>\r\n                  \r\n                </Card.Text>\r\n            </Card.Body>\r\n\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default RegisteredCourses\r\n","import DashboardFrame from './subcomponents/Dashboard.Frame';\r\nimport {useState, useEffect} from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Container, Col, Row } from 'react-bootstrap';\r\nimport StudentInfo from './subcomponents/StudentInfo';\r\nimport RegistrationProgress from './subcomponents/RegistrationProgress';\r\nimport SchoolYear from './subcomponents/SchoolYear';\r\nimport PublicAnnouncement from './subcomponents/PublicAnnouncement';\r\nimport RegisteredCourses from './subcomponents/Table';\r\nimport ContentLoader from '../components/ContentLoader';\r\nimport { userDetails } from '../../services/userServices';\r\n\r\nconst StudentDashboard = () => {\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [user, setUser] = useState({})\r\n\r\n    useEffect(() => {\r\n        try{\r\n            const fetch = async () => {\r\n                setIsLoading(true)\r\n                const res = await userDetails()\r\n                setUser(res.data)\r\n                setIsLoading(false)\r\n            }\r\n            fetch()\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n            setIsLoading(false)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <DashboardFrame title=\"Student Portal\" subTitle=\"Dashboard\">\r\n            <Helmet>\r\n                <title>Dashboard | Adeyemi College of Education</title>\r\n            </Helmet>\r\n            {isLoading \r\n            ?\r\n            <ContentLoader />\r\n            :\r\n            <div className=\"content-page\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col lg={4}>\r\n                            <StudentInfo \r\n                                data={user}\r\n                            />\r\n                        </Col>\r\n                        <Col lg={4}>\r\n                            <RegistrationProgress />\r\n                        </Col>\r\n                        <Col lg={4}>\r\n                            <SchoolYear />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col lg={8}>\r\n                            <RegisteredCourses />\r\n                        </Col>\r\n                        <Col lg={4}>\r\n                            <PublicAnnouncement />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            }\r\n        </DashboardFrame>\r\n    )\r\n}\r\n\r\nexport default StudentDashboard;","import React, { useState, useEffect } from 'react'\r\nimport {userDetails} from '../../../../services/userServices';\r\nimport ContentLoader from '../../../components/ContentLoader';\r\n\r\n\r\nfunction StudentProfileData() {\r\n    const [studentProfile, setStudentProfile] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const { REACT_APP_ACE_URL } = process.env;\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchStudentProfileData = async (id) => {\r\n            setIsLoading(true)\r\n            try {\r\n                const res = await userDetails()\r\n                setStudentProfile(res.data)\r\n                \r\n            }\r\n            catch (err) {\r\n                console.log(err.message)\r\n            }\r\n            setIsLoading(false)\r\n        }\r\n        fetchStudentProfileData()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        isLoading ?\r\n        <ContentLoader />\r\n        :\r\n        <div className=\"NewstudentProfileContainer\">\r\n                <div className=\"NewstudentProfileWrapper\">\r\n                    <div className=\"StudentProfileContainer StudentMargin\">\r\n                        \r\n                        <img src={studentProfile.userImageURL ? REACT_APP_ACE_URL + \"/\" + studentProfile.userImageURL : \"./assets/images/passportPhoto.png\"} alt=\"Login Logo\" />\r\n                        \r\n                    </div>\r\n                    <div>\r\n                        <ul>\r\n                            <div>Full Name</div>\r\n                            <li>{studentProfile.lastName} {studentProfile.firstName}</li>\r\n                            <div>Email Address</div>\r\n                            <li>{studentProfile.email}</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div>\r\n                        <ul>\r\n                            <div>Gender</div>\r\n                            <li>{studentProfile.gender ? studentProfile.gender : \"-\"}</li>\r\n                            <div>School</div>\r\n                            <li>{studentProfile.school ? studentProfile.school : \"-\"}</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div>\r\n                        <ul>\r\n                            <div>Program</div>\r\n                            <li>{studentProfile.programme ? studentProfile.programme : \"-\"}</li>\r\n                            <div>Martric No</div>\r\n                            <li>{studentProfile.matricNumber ? studentProfile.matricNumber : \"-\"}</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div>\r\n                        <ul>\r\n                            <div>Current Level</div>\r\n                            <li>{studentProfile.currentLevel ? studentProfile.currentLevel : \"-\"}</li>\r\n                            <div>Department</div>\r\n                            <li>{studentProfile.department ? studentProfile.department : \"-\"}</li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StudentProfileData\r\n","import DashboardFrame from './subcomponents/Dashboard.Frame';\r\nimport { Helmet } from 'react-helmet';\r\nimport StudentProfileData from './subcomponents/BiodataForm/StudentProfileData';\r\n\r\nfunction StudentProfile() {\r\n\r\n    return (\r\n        <DashboardFrame title=\"Student Profile\" subTitle=\"Dashboard\">\r\n            <Helmet>\r\n                <title>Student Profile | Adeyemi College of Education</title>\r\n            </Helmet>\r\n            <div className=\"StudentProfileDetailsCard\">\r\n                <div className=\"StudentProfileBody\">\r\n                    <StudentProfileData />\r\n                </div>\r\n            </div>\r\n        </DashboardFrame>\r\n    )\r\n}\r\n\r\nexport default StudentProfile","import React from 'react'\r\n\r\nfunction RegisterationRequirment() {\r\n    return (\r\n        <div className=\"RegisterContainer\">\r\n            <div className=\"RegisterWrapper\">\r\n                <div className=\"RegisterRequireTitle\">Registration Requirments</div>\r\n                <div>\r\n                    <ul className=\"RegisterRequireUL\">\r\n                        <li >\r\n                            <div className=\"RegisterRequireDIV\">2</div>\r\n                            <div>Uncompleted</div>\r\n                        </li>\r\n                        <li>\r\n                            <div className=\"RegisterRequireDIV\">2</div>\r\n                            <div>Holds</div>\r\n                        </li>\r\n                        <li>\r\n                            <div className=\"RegisterRequireDIV\">2</div>\r\n                            <div>Completed</div>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterationRequirment\r\n","import React from 'react'\r\n\r\nfunction EduObjective() {\r\n    return (\r\n        <div className=\"EduObjectiveContainer\">\r\n            <div className=\"EduObjectiveWrapper\">\r\n                <div className=\"EduObjectiveTitle\">Educational Objective</div>\r\n                <div className=\"table-wrapper-scroll-y my-custom-scrollbar overflow Edu-Table-Height\">\r\n                   <table class=\"table\">\r\n                        <tbody className=\"EduObjectiveTableBody\">\r\n                            <tr>\r\n                                <th scope=\"col\">Program of Study</th>\r\n                                <th scope=\"col\">Start Date</th>\r\n                                <th scope=\"col\">Expected Completion</th>\r\n                                <th scope=\"col\">Status</th>\r\n                                <th scope=\"col\">Primary?</th>\r\n                                <th scope=\"col\"></th>\r\n                            </tr>\r\n                    <tr>\r\n                        <td>BSc-Computer Science</td>\r\n                        <td>12/03/1990</td>\r\n                        <td>07/10/1994</td>\r\n                        <td>Ongoing</td>\r\n                        <td>Yes</td>\r\n                        <td><span>Request<span class=\"iconify\" data-icon=\"gridicons:dropdown\" data-inline=\"false\"></span></span></td>\r\n                    </tr>\r\n                </tbody>\r\n            </table> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EduObjective\r\n","\r\nfunction ModalTable({data, handleDelete}) {\r\n\r\n    return (\r\n        <table class=\"table table-bordered AcademicModalTable\">\r\n            <thead class=\"thead-light\">\r\n                <tr>\r\n                    <th scope=\"col\">S/N</th>\r\n                    <th scope=\"col\">Course Code</th>\r\n                    <th scope=\"col\">Course</th>\r\n                    <th scope=\"col\">Course Description</th>\r\n                    <th scope=\"col\">Lecturer</th>\r\n                    <th scope=\"col\">Department</th>\r\n                    <th scope=\"col\">School</th>\r\n                    <th scope=\"col\">Action</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {data.map((userData, index) => (\r\n                    <tr key={userData.id}>\r\n                        <td>{index + 1}</td>\r\n                        <td>{userData.courseCode}</td>\r\n                        <td>{userData.courseTitle}</td>\r\n                        <td>{userData.courseDescription}</td>\r\n                        <td>{userData.leadLecturer}</td>\r\n                        <td>{userData.department}</td>\r\n                        <td>{userData.school}</td>\r\n                        <td>\r\n                            <span className=\"delBin\" onClick={() => handleDelete(userData.id)}>\r\n                                <span className=\"iconify\" data-icon=\"ant-design:delete-filled\"></span>\r\n                            </span>\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default ModalTable\r\n","import React, {useEffect } from 'react'\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ModalTable from './ModalTable';\r\nimport StyledTextField from '../../../components/StyledTextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {getStudentEligibleCourse, registerCourse} from '../../../../services/courseServices';\r\nimport {getCurrentSessionSemester} from '../../../../services/sessionServices';\r\nimport store from '../../../../store/store';\r\nimport { useState } from '@hookstate/core';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        \"& .MuiTextField-root\": {\r\n            margin: theme.spacing(1),\r\n            width: \"50ch\",\r\n        }\r\n    },\r\n}));\r\n\r\nfunction AcademicsModal({closeModal}) {\r\n    const classes = useStyles();\r\n    const[showAlert, setShowAlert] = React.useState(false)\r\n    const[alertMsg, setAlertMsg] = React.useState(\"\")\r\n    const[alertType, setAlertType] = React.useState(\"\")\r\n    \r\n\r\n    const [courses, setCourses] = React.useState([])\r\n\r\n    const [selectedCourse, setSelectedCourse] = React.useState(\"\")\r\n    const [selectedCourseIDs, setSelectedCourseIDs] = React.useState([])\r\n    const [selectedViewCourseList, setSelectedViewCourseList] = React.useState([])\r\n    const [selectedDTOCourseList, setSelectedDTOCourseList] = React.useState([])\r\n\r\n    const [currentSemesterID, setCurrentSemesterID] = React.useState(\"\")\r\n    const [currentSessionID, setCurrentSessionID] = React.useState(\"\")\r\n\r\n    \r\n\r\n    const {deptID} = useState(store)\r\n    const {userId} = useState(store)\r\n\r\n\r\n    useEffect(() => {\r\n        try{\r\n            const fetch = async () => {\r\n                const res = await getStudentEligibleCourse(deptID.get());\r\n                setCourses(res.data)\r\n            }\r\n            fetch()\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    ,[])\r\n\r\n    useEffect(() => {\r\n        try{\r\n            const fetch = async () => {\r\n                const res = await getCurrentSessionSemester();\r\n                setCurrentSemesterID(res.data.semesterID)\r\n                setCurrentSessionID(res.data.academicYearID)\r\n            }\r\n            fetch()\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    ,[])\r\n\r\n    const handleSelect = () => {\r\n        const courseIdDTO = {\r\n            courseID: selectedCourse\r\n        }\r\n        if(!selectedCourseIDs.includes(selectedCourse)){\r\n            setSelectedCourseIDs(prevArray => [...prevArray, selectedCourse])\r\n            setSelectedDTOCourseList(prevArray => [...prevArray, courseIdDTO])\r\n            let courseDetail = courses.find(x => x.id === selectedCourse)\r\n            setSelectedViewCourseList(prevArray => [...prevArray, courseDetail])\r\n        }\r\n    }\r\n\r\n    const handleDelete = (id) => {\r\n        setSelectedCourseIDs(selectedCourseIDs.filter(x => x !== id))\r\n        setSelectedDTOCourseList(selectedDTOCourseList.filter(x => x.courseID !== id))\r\n        setSelectedViewCourseList(selectedViewCourseList.filter(x => x.id !== id))\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        if(selectedCourseIDs.length < 1){\r\n            setAlertMsg(\"Course List Empty\")\r\n            setAlertType(\"danger\")\r\n            setShowAlert(true)\r\n        }\r\n        else{\r\n            const data = {\r\n                studentId: userId.get(),\r\n                courses: selectedDTOCourseList,\r\n                academicYearID: currentSessionID,\r\n                semesterID: currentSemesterID\r\n            }\r\n            try{\r\n                const res = await registerCourse(data)\r\n                if(res.status === 200){\r\n                    setAlertMsg(res.data.message)\r\n                    setAlertType(\"success\")\r\n                    setShowAlert(true)\r\n                }\r\n                else{\r\n                    setAlertMsg(res.data.message)\r\n                    setAlertType(\"danger\")\r\n                    setShowAlert(true)\r\n                }\r\n            }\r\n            catch(err){\r\n                setAlertMsg(err.message)\r\n                setAlertType(\"danger\")\r\n                setShowAlert(true)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"AcademicsModalTitle\">\r\n                    <div>\r\n                       Courses Registration \r\n                    </div>\r\n                    <div>\r\n                    <span onClick={closeModal}><span class=\"iconify CloseIcon\" data-icon=\"eva:close-outline\" data-inline=\"false\"></span></span>\r\n                    </div>\r\n            </div>\r\n            <div className=\"AcademicsModalWrapper\">\r\n                {showAlert ? <div className={`AcademicsModalFlex AcademicsModalAlert AcademicsModalAlertBg-${alertType}`}>\r\n                    <div><span class=\"iconify CircleAlertIcon\" data-icon=\"eva:alert-circle-outline\" data-inline=\"false\"></span>{alertMsg}</div>\r\n                    <div onClick={() => setShowAlert(false)}><span class=\"iconify CloseAlertIcon\" data-icon=\"eva:close-outline\" data-inline=\"false\"></span></div>\r\n                </div> : \"\" }\r\n                \r\n                <div className=\"AcademicsModalInput\">\r\n                    <form className={classes.root} noValidate autoComplete=\"off\">\r\n                        <StyledTextField\r\n                            select\r\n                            label=\"Courses\"\r\n                            name=\"Courses\" \r\n                            id=\"Courses\" \r\n                            value={selectedCourse}\r\n                            onChange={(e) => (setSelectedCourse(e.target.value))}\r\n                            SelectProps={{\r\n                                native: true\r\n                            }}\r\n                            variant=\"outlined\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        >\r\n                            {courses.map(data => (\r\n                                <option value={data.id} key={data.id}>{data.courseTitle} ({data.courseCode})</option>\r\n                            ))}\r\n                        </StyledTextField>\r\n                        <button type='button' className='regcBtn btn mt-2 ml-3 addBtn' onClick={handleSelect}>Add</button>\r\n                    </form>\r\n                </div>\r\n                <div className=\"AcademicsModalsubTitle\">\r\n                    List of Selected Courses\r\n                </div>\r\n                {/* <div className=\"AcademicsModalFlex2\">\r\n                    <div className=\"AcademicsModalEntries\">\r\n                        <form className={classes.rootEntry} noValidate autoComplete=\"off\">\r\n                            Show\r\n                            <select\r\n                                name=\"cars\" \r\n                                id=\"cars\" \r\n                                form=\"carform\"\r\n                            >\r\n                            {EntryData.map((D) => (\r\n                                <option key={D} value=\"volvo\">{D}</option>\r\n                            ))\r\n                                }\r\n                        </select>\r\n                            entries\r\n                        </form>\r\n                    </div>\r\n                    <div>\r\n                        <form>\r\n                            filter: <input/>\r\n                        </form>\r\n                    </div>\r\n                </div> */}\r\n                <div>\r\n                    <div className=\"table-wrapper-scroll-y my-custom-scrollbar\">\r\n                        <ModalTable\r\n                            data={selectedViewCourseList}\r\n                            handleDelete={handleDelete}\r\n                        />\r\n                    </div>\r\n                    {/* <div className=\"AcademicsModalPagination\">Showing 1 to 10 of 15 entries</div> */}\r\n                </div>\r\n                <div className=\"AcademicsModaRegisterButtonCon\">\r\n                    <span className=\"AcademicsModaRegisterButton\" onClick={handleSubmit}>Register</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AcademicsModal\r\n","export const studentAcademicsData = [\r\n    {\r\n        ProgramStudy: \"COM112 - Computer programming 2\",\r\n        unit: \"02\",\r\n        eligibility: \"Yes\",\r\n        Lecturer: \"Dr. Solomon Olusegun\",\r\n        Start: \"17-03-2021\",\r\n        CourseType:\"Compiter Sc\",\r\n        Completion: \"20-03-2024\",\r\n        status: \"Approved\",\r\n        id:1\r\n    },\r\n    {\r\n        ProgramStudy: \"COM112 - Computer programming 2\",\r\n        unit: \"02\",\r\n        eligibility: \"Yes\",\r\n        Lecturer: \"Dr. Solomon Olusegun\",\r\n        CourseType: \"Compiter Sc\",\r\n        Start: \"17-03-2021\",\r\n        Completion: \"20-03-2024\",\r\n        status: \"NotApproved\",\r\n        id: 2\r\n    },\r\n    {\r\n        ProgramStudy: \"COM112 - Computer programming 2\",\r\n        unit: \"02\",\r\n        eligibility: \"Yes\",\r\n        Lecturer: \"Dr. Solomon Olusegun\",\r\n        CourseType:\"Compiter Sc\",\r\n        Start: \"17-03-2021\",\r\n        Completion: \"20-03-2024\",\r\n        status: \"Approved\",\r\n        id: 3\r\n    },\r\n    {\r\n        ProgramStudy: \"COM112 - Computer programming 2\",\r\n        unit: \"02\",\r\n        eligibility: \"Yes\",\r\n        Lecturer: \"Dr. Solomon Olusegun\",\r\n        CourseType:\"Compiter Sc\",\r\n        Start: \"17-03-2021\",\r\n        Completion: \"20-03-2024\",\r\n        status: \"NotApproved\",\r\n        id: 4\r\n    },\r\n    {\r\n        ProgramStudy: \"COM112 - Computer programming 2\",\r\n        unit: \"02\",\r\n        eligibility: \"Yes\",\r\n        Lecturer: \"Dr. Solomon Olusegun\",\r\n        CourseType:\"Compiter Sc\",\r\n        Start: \"17-03-2021\",\r\n        Completion: \"20-03-2024\",\r\n        status: \"Approved\",\r\n        id: 5\r\n    },\r\n    {\r\n        ProgramStudy: \"COM112 - Computer programming 2\",\r\n        unit: \"02\",\r\n        eligibility: \"Yes\",\r\n        Lecturer: \"Dr. Solomon Olusegun\",\r\n        Start: \"17-03-2021\",\r\n        CourseType: \"Compiter Sc\",\r\n        Completion: \"20-03-2024\",\r\n        status: \"Approved\",\r\n        id: 6\r\n    },\r\n    {\r\n        ProgramStudy: \"COM112 - Computer programming 2\",\r\n        unit: \"02\",\r\n        eligibility: \"Yes\",\r\n        Lecturer: \"Dr. Solomon Olusegun\",\r\n        CourseType: \"Compiter Sc\",\r\n        Start: \"17-03-2021\",\r\n        Completion: \"20-03-2024\",\r\n        status: \"NotApproved\",\r\n        id: 7\r\n    },\r\n    {\r\n        ProgramStudy: \"COM112 - Computer programming 2\",\r\n        unit: \"02\",\r\n        eligibility: \"Yes\",\r\n        Lecturer: \"Dr. Solomon Olusegun\",\r\n        CourseType: \"Compiter Sc\",\r\n        Start: \"17-03-2021\",\r\n        Completion: \"20-03-2024\",\r\n        status: \"Approved\",\r\n        id: 8\r\n    },\r\n    {\r\n        ProgramStudy: \"COM112 - Computer programming 2\",\r\n        unit: \"02\",\r\n        eligibility: \"Yes\",\r\n        Lecturer: \"Dr. Solomon Olusegun\",\r\n        CourseType: \"Compiter Sc\",\r\n        Start: \"17-03-2021\",\r\n        Completion: \"20-03-2024\",\r\n        status: \"NotApproved\",\r\n        id: 9\r\n    },\r\n    {\r\n        ProgramStudy: \"COM112 - Computer programming 2\",\r\n        unit: \"02\",\r\n        eligibility: \"Yes\",\r\n        Lecturer: \"Dr. Solomon Olusegun\",\r\n        CourseType: \"Compiter Sc\",\r\n        Start: \"17-03-2021\",\r\n        Completion: \"20-03-2024\",\r\n        status: \"Approved\",\r\n        id: 10\r\n    }\r\n    \r\n]\r\n\r\nexport const SessionData = [\r\n    \"2020 / 2021 Academic Session\",\r\n        \"2020/2022 Academic Session\",\r\n        \"2020/2023 Academic Session\"\r\n]\r\n\r\nexport const SemesterData = [\r\n    \"First Semester\",\r\n    \"Second Semester\",\r\n]\r\n\r\nexport const EntryData = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n\r\nexport const Semester = [\r\n    {\r\n        Semester: \"First Semester\",\r\n        session:\"2020/2021\",\r\n        MaximumCreditUnitAllowed: 22,\r\n        NoOfRegisteredCourses: 3,\r\n        totalUnit: 22\r\n    },\r\n    {\r\n        Semester: \"Second Semester\",\r\n        session: \"2020/2021\",\r\n        MaximumCreditUnitAllowed: 18,\r\n        NoOfRegisteredCourses: 2,\r\n        totalUnit: 18\r\n    },\r\n    {\r\n        Semester: \"First Semester\",\r\n        session: \"2021/2022\",\r\n        MaximumCreditUnitAllowed: 17,\r\n        NoOfRegisteredCourses: 4,\r\n        totalUnit: 17\r\n    },\r\n    {\r\n        Semester: \"Second Semester\",\r\n        session: \"2021/2022\",\r\n        MaximumCreditUnitAllowed: 18,\r\n        NoOfRegisteredCourses: 4,\r\n        totalUnit: 18\r\n    },\r\n    {\r\n        Semester: \"First Semester\",\r\n        session: \"2023/2024\",\r\n        MaximumCreditUnitAllowed: 22,\r\n        NoOfRegisteredCourses: 3,\r\n        totalUnit: 22\r\n    },\r\n    {\r\n        Semester: \"Second Semester\",\r\n        session: \"2023/2024\",\r\n        MaximumCreditUnitAllowed: 22,\r\n        NoOfRegisteredCourses: 3,\r\n        totalUnit: 22\r\n    }\r\n]","import React from 'react'\r\nimport { studentAcademicsData } from './Data'\r\n\r\nfunction StudentTable() {\r\n    return (\r\n        <div className=\"AccademicstTableContainer\">\r\n            <div className=\"AccademicstTableWrapper table-wrapper-scroll-y my-custom-scrollbar overflow\">\r\n                <table class=\"table\">\r\n                    <tbody>\r\n                        <tr className=\"AccademicstTableContent\">\r\n                            <th scope=\"col\">Program of Study</th>\r\n                            <th scope=\"col\">Unit</th>\r\n                            <th scope=\"col\">Lecturer</th>\r\n                            <th scope=\"col\">Start Date</th>\r\n                            <th scope=\"col\">Expected Completion </th>\r\n                            <th scope=\"col\">Status</th>\r\n                            <th scope=\"col\"></th>\r\n                            <th scope=\"col\"></th>\r\n                        </tr>\r\n                        {studentAcademicsData.map((SD) => (\r\n                            <tr className=\"AccademicstTableContent\">\r\n                                <td>{SD.ProgramStudy}</td>\r\n                                <td>{SD.unit}</td>\r\n                                <td>{SD.Lecturer}</td>\r\n                                <td>{SD.Start}</td>\r\n                                <td>{SD.Completion}</td>\r\n                                {SD.status === \"Approved\" ? <td className=\"ApprovedColor\">{SD.status}</td> : <td className=\"NotApprovedColor\">{SD.status}</td>}\r\n                                <td><span style={{ cursor: \"pointer\" }}><span class=\"iconify AccademicstTableSwapIcon\" data-icon=\"ant-design:swap-outlined\" data-inline=\"false\"></span>Swap</span></td>\r\n                                <td><span class=\"iconify AccademicstTableDeleteIcon\" data-icon=\"ic:round-delete-forever\" data-inline=\"false\"></span></td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StudentTable\r\n","import React, { useState } from 'react'\r\nimport { IoMdArrowDropdown, IoMdArrowDropright } from 'react-icons/io';\r\n\r\nconst ReadMore = ({ header, children, subHeader }) => {\r\n    const [isTruncated, setIsTruncated] = useState(false);\r\n    const [openTable, setOpenTable] = useState(true)\r\n\r\n    const text = children;\r\n\r\n    const resultString = isTruncated && text;\r\n    const toggleTruncated = () => {\r\n        setIsTruncated(!isTruncated);\r\n        setOpenTable(!openTable)\r\n    };\r\n    return (\r\n        <>\r\n            <div className=\"EdutableBodyTitle\">\r\n                <i onClick={toggleTruncated}>\r\n                    {openTable ? <IoMdArrowDropright className=\"iconify EdutableIconClose\" /> : <IoMdArrowDropdown className=\"iconify EdutableIconClose\" />}\r\n                </i> <span>{header}</span> ({subHeader})\r\n            </div>\r\n            {resultString}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ReadMore\r\n","import { useState } from 'react'\r\nimport Modal from 'react-modal';\r\nimport AcademicsModal from './AcademicsModal';\r\nimport StudentTable from './StudentTable';\r\nimport {Semester} from \"./Data\"\r\nimport ReadMore from \"./Truncate\";\r\n\r\n\r\nfunction EduTable() {\r\n    \r\n    const [modalIsOpen, setIsOpen] = useState(false);\r\n    function openModal() {\r\n        setIsOpen(true);\r\n    }\r\n\r\n    function closeModal() {\r\n        setIsOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"EdutableContainer\">\r\n            <div className=\"EdutableModalContainer\">\r\n                <Modal\r\n                    \r\n                    isOpen={modalIsOpen}\r\n                    onRequestClose={closeModal}\r\n                    style={\r\n                        {\r\n                            overlay: {\r\n                                background: \"rgba(255, 255, 255, 0.5)\",\r\n                                backdropFilter: \"blur(5px)\",\r\n                                border: \"none\",\r\n                            },\r\n                            content: {\r\n                                backgroundColor: \"#FFFFFF\",\r\n                                top: '10%',\r\n                                left: '20%',\r\n                                width: \"75%\",\r\n                                padding: \"0\",\r\n                                right: 'auto',\r\n                                bottom: 'auto',\r\n                                marginRight: '-50%',\r\n                            }\r\n                        }\r\n                    }\r\n                >\r\n                    <AcademicsModal closeModal={closeModal }/>\r\n                </Modal>\r\n            </div>\r\n            \r\n            <div className=\"EdutableWrapper\">\r\n                <div className=\"Edutable-button-select-Wrapper\">\r\n                    <span className=\"EdutableButtonRC\" onClick={openModal}>Register Courses</span>\r\n                    <span className=\"EdutableButtonRCA\">Register Courses Approval</span>\r\n                </div>\r\n\r\n                <>\r\n                    {Semester.map((D) => (\r\n                        <div>\r\n                       <div className=\"EdutableDateNdUnit\">\r\n                                <div>{D.Semester} - {D.session} Academic Session</div>\r\n                                <div>Maximum Credit Unit Allowed: {D.MaximumCreditUnitAllowed}</div>\r\n                    </div>\r\n                    <div className=\"EdutableBodyContainer\">\r\n                        <ReadMore header=\"My Registered Courses\" subHeader={D.NoOfRegisteredCourses}>\r\n                        <div>\r\n                            <div>\r\n                                <StudentTable/>\r\n                            </div>\r\n                        </div>\r\n                        </ReadMore>\r\n                                <div className=\"EdutableBodyTotal\">Total Unit({D.totalUnit})</div>\r\n                     </div> \r\n                    </div>\r\n                    ))}\r\n                </>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EduTable\r\n","import DashboardFrame from './subcomponents/Dashboard.Frame';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Container, Col, Row } from 'react-bootstrap';\r\nimport RegisterationRequirment from './subcomponents/AcademicsSub.js/RegisterationRequirment';\r\nimport EduObjective from './subcomponents/AcademicsSub.js/EduObjective';\r\nimport EduTable from './subcomponents/AcademicsSub.js/EduTable';\r\n\r\nfunction Academics() {\r\n    return (\r\n        <DashboardFrame title=\"Academics Page\" subTitle=\"Dashboard\">\r\n            <Helmet>\r\n                <title>Academics | iEduCare</title>\r\n            </Helmet>\r\n            <div className=\"content-page\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col lg={4}>\r\n                            <RegisterationRequirment/>\r\n                        </Col>\r\n                        <Col lg={8}>\r\n                            <EduObjective/>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col lg={12}>\r\n                            <EduTable/>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        </DashboardFrame>\r\n    )\r\n}\r\n\r\nexport default Academics\r\n","import DashboardFrame from './subcomponents/Dashboard.Frame';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Table } from 'react-bootstrap';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { dateConverter } from '../../utils/Functions';\r\nimport React, {useEffect} from 'react';\r\nimport { useState } from '@hookstate/core';\r\nimport store from '../../store/store';\r\nimport {getStudentRegCourses, getStudentRegCoursesBySemesterAndYear} from '../../services/courseServices';\r\nimport { getAcademicYears, getSemesters } from '../../services/commonServices';\r\nimport ContentLoader from '../components/ContentLoader';\r\nimport StyledTextField from '../components/StyledTextField';\r\nimport Modal from 'react-modal';\r\nimport AcademicsModal from './subcomponents/AcademicsSub.js/AcademicsModal';\r\n\r\n\r\n\r\n\r\nconst Courses = () => {\r\n    const [isLoading, setIsLoading] = React.useState(true)\r\n    const [courses, setCourses] = React.useState([])\r\n    const [academicYear, setAcademicYear] = React.useState([])\r\n    const [selectedAcademicYear, setSelectedAcademicYear] = React.useState(\" \")\r\n    const [semester, setSemester] = React.useState([])\r\n    const [selectedSemester, setSelectedSemester] = React.useState(\" \")\r\n    const [pastCourses, setPastCourses] = React.useState([])\r\n    const [modalIsOpen, setIsOpen] = React.useState(false);\r\n\r\n    function openModal() {\r\n        setIsOpen(true);\r\n    }\r\n\r\n    function closeModal() {\r\n        setIsOpen(false);\r\n    }\r\n\r\n    const {userId} = useState(store)\r\n\r\n\r\n    useEffect(() => {\r\n        try{\r\n            const fetch = async () => {\r\n                const res = await getStudentRegCourses(userId.get())\r\n                setCourses(res.data)\r\n                setPastCourses(res.data)\r\n                setIsLoading(false)\r\n            }\r\n            fetch()\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    ,[])\r\n\r\n    useEffect(() => {\r\n        try{\r\n            const fetch = async () => {\r\n                if(selectedAcademicYear === \" \" || selectedSemester === \" \"){\r\n                    setPastCourses(courses)\r\n                }\r\n                else{\r\n                    const res = await getStudentRegCoursesBySemesterAndYear(userId.get(), selectedAcademicYear, selectedSemester)\r\n                    setPastCourses(res.data)\r\n                }\r\n            }\r\n            fetch()\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    ,[selectedAcademicYear, selectedSemester])\r\n\r\n    useEffect(() => {\r\n        try{\r\n            const fetch = async () => {\r\n                const res = await getSemesters()\r\n                setSemester(res.data)\r\n            }\r\n            fetch()\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    ,[])\r\n\r\n    useEffect(() => {\r\n        try{\r\n            const fetch = async () => {\r\n                const res = await getAcademicYears()\r\n                setAcademicYear(res.data )\r\n            }\r\n            fetch()\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    ,[])\r\n\r\n    \r\n    return (\r\n        <>\r\n            <DashboardFrame title=\"Student Portal\" subTitle=\"Courses\">\r\n                <Helmet>\r\n                    <title>Courses | iEduCare</title>\r\n                </Helmet>\r\n                {isLoading ?\r\n                <ContentLoader />\r\n                :\r\n                <div className=\"content-page\">\r\n                    <Modal\r\n                        isOpen={modalIsOpen}\r\n                        onRequestClose={closeModal}\r\n                        style={\r\n                            {\r\n                                overlay: {\r\n                                    background: \"rgba(255, 255, 255, 0.5)\",\r\n                                    backdropFilter: \"blur(5px)\",\r\n                                    border: \"none\",\r\n                                },\r\n                                content: {\r\n                                    backgroundColor: \"#FFFFFF\",\r\n                                    top: '10%',\r\n                                    left: '20%',\r\n                                    width: \"75%\",\r\n                                    padding: \"0\",\r\n                                    right: 'auto',\r\n                                    bottom: 'auto',\r\n                                    marginRight: '-50%',\r\n                                }\r\n                            }\r\n                        }\r\n                    >\r\n                        <AcademicsModal closeModal={closeModal }/>\r\n                    </Modal>\r\n                    <div className=\"finance-section\">\r\n                        <div className=\"finance-title\">\r\n                            Student Courses <span> (Current Session And Semester) </span>\r\n                        </div>\r\n                        <div className='mt-3'>\r\n                            <button className='regcBtn btn' onClick={openModal}>Course Registeration</button>\r\n                        </div>\r\n                        <div className=\"table-header\">\r\n                            <div className=\"entries\">\r\n                                <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                                <div className=\"entries-input\">\r\n                                    <select className=\"entries-box\" id=\"entries\">\r\n                                        {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                            <option value={value} key={value}>{value}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n                                <div className=\"entries-label\"> entries </div>\r\n                            </div>\r\n                            <div className=\"search\">\r\n                                <label htmlFor=\"search\" className=\"search-label\">Search: </label>\r\n                                <input type=\"search\" className=\"search-box\" id=\"search\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"institution-table table-wrapper-scroll-y my-custom-scrollbar overflow\">\r\n                        <Table responsive bordered hover size=\"lg\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>S/N</th>\r\n                                    <th>Course</th>\r\n                                    <th>Course Unit</th>\r\n                                    <th>Academic Year</th>\r\n                                    <th>Semester</th>\r\n                                    <th>Registeration Date</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {courses.map((data, index) => (\r\n                                    <tr>\r\n                                        <td>{index + 1}</td>\r\n                                        <td className=\"payment-name\">{data.course}</td>\r\n                                        <td>{data.courseUnit}</td>\r\n                                        <td>{data.academicYear}</td>\r\n                                        <td>{data.semester}</td>\r\n                                        <td>{dateConverter(data.courseRegisterationDate)}</td>\r\n                                    </tr>\r\n                                ))}\r\n                                \r\n                                {/* <tr>\r\n                                    <td>2</td>\r\n                                    <td className=\"payment-name\">School Fees-First Semester</td>\r\n                                    <td>20-01-2021</td>\r\n                                    <td>26-03-2021</td>\r\n                                    <td> <Unpaid /> <Paid /> </td>\r\n                                    <td>45,000.00</td>\r\n                                    <td>5,000.00</td>\r\n                                    <td>40,000.00</td>\r\n                                    <td> \r\n                                        <button type=\"button\" className=\"pay-now-btn\"> <span className=\"iconify\" data-icon=\"ant-design:check-circle-filled\" data-inline=\"false\"></span> Pay Now</button>\r\n                                    </td>\r\n                                </tr> */}\r\n                            </tbody>\r\n                            </Table>\r\n                        </div> \r\n                    </div>\r\n                    <div className=\"finance-section\">\r\n                        <div className=\"finance-title\">\r\n                            Course Registeration History \r\n                        </div>\r\n                        <div className=\"history-header\">\r\n                            <div style={{ marginRight: \"100px\" }} id=\"select-field\" >\r\n                                <StyledTextField \r\n                                    select \r\n                                    name=\"academicYear\" \r\n                                    id=\"academicYear\" \r\n                                    label=\"Academic Year\" \r\n                                    margin=\"normal\"\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={selectedAcademicYear}\r\n                                    onChange={(e) => setSelectedAcademicYear(e.target.value)}\r\n                                >\r\n                                    <MenuItem value=\" \" disabled>Select Session</MenuItem>\r\n                                    {academicYear.map(data => (\r\n                                        <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                    ))}\r\n                                </StyledTextField>\r\n                            </div>\r\n                            <div id=\"select-field\">\r\n                                <StyledTextField \r\n                                    select \r\n                                    name=\"semester\" \r\n                                    id=\"semester\" \r\n                                    label=\"Semester\" \r\n                                    margin=\"normal\"\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={selectedSemester}\r\n                                    onChange={(e) => setSelectedSemester(e.target.value)}\r\n                                >\r\n                                    <MenuItem value=\" \" disabled>Select Semester </MenuItem>\r\n                                    {semester.map(data => (\r\n                                        <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                    ))}\r\n                                </StyledTextField>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"institution-table table-wrapper-scroll-y my-custom-scrollbar overflow\">\r\n                        <Table responsive bordered hover size=\"lg\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>S/N</th>\r\n                                    <th>Course</th>\r\n                                    <th>Course Unit</th>\r\n                                    <th>Academic Year</th>\r\n                                    <th>Semester</th>\r\n                                    <th>Registeration Date</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {pastCourses.map((data, index) => (\r\n                                    <tr>\r\n                                        <td>{index + 1}</td>\r\n                                        <td className=\"payment-name\">{data.course}</td>\r\n                                        <td>{data.courseUnit}</td>\r\n                                        <td>{data.academicYear}</td>\r\n                                        <td>{data.semester}</td>\r\n                                        <td>{dateConverter(data.courseRegisterationDate)}</td>\r\n                                    </tr>\r\n                                ))}  \r\n                            </tbody>\r\n                            </Table>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>\r\n                }\r\n            </DashboardFrame>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Courses","import {Table} from 'react-bootstrap'\r\n\r\nconst ResultTable = () => {\r\n    return (\r\n        <div className=\"result-table\">\r\n            <Table size=\"md\" responsive hover bordered>\r\n            <thead>\r\n                <tr>\r\n                    <th>S/N</th>\r\n                    <th>Course of Study</th>\r\n                    <th>Unit</th>\r\n                    <th>Lecturer</th>\r\n                    <th>Score</th>\r\n                    <th>Grade</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>1</td>\r\n                    <td>COM112 - Computer programming 2</td>\r\n                    <td>2</td>\r\n                    <td>Alh. Mohammend Bello</td>\r\n                    <td>60</td>\r\n                    <td>B</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>2</td>\r\n                    <td>TMT101 - Trignometry Maths 2</td>\r\n                    <td>4</td>\r\n                    <td>Alh. Abdulahai Sulami</td>\r\n                    <td>63</td>\r\n                    <td>BC</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>4</td>\r\n                    <td>COM111 - Computer programming 1</td>\r\n                    <td>3</td>\r\n                    <td>Mr. Boladji Gbega Ojo</td>\r\n                    <td>70</td>\r\n                    <td>A</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>5</td>\r\n                    <td>TMT101 - Trignometry Maths 2</td>\r\n                    <td>4</td>\r\n                    <td>Alh. Abdulahai Sulami</td>\r\n                    <td>60</td>\r\n                    <td>BC</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>2</td>\r\n                    <td>COM111 - Computer programming 1</td>\r\n                    <td>3</td>\r\n                    <td>Mr. Boladji Gbega Ojo</td>\r\n                    <td>73</td>\r\n                    <td>A</td>\r\n                </tr>\r\n            </tbody>\r\n        </Table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultTable\r\n","import DashboardFrame from './subcomponents/Dashboard.Frame';\r\nimport { Helmet } from 'react-helmet';\r\nimport ReadMore from \"./subcomponents/AcademicsSub.js/Truncate\";\r\nimport ResultTable from './subcomponents/ResultTable';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nconst Results = () => {\r\n    return (\r\n            <DashboardFrame title=\"Student Portal\" subTitle=\"Results\">\r\n                <Helmet>\r\n                    <title>Results | iEduCare</title>\r\n                </Helmet>\r\n                <div className=\"content-page\">\r\n                    <div className=\"result-wrapper\">\r\n                        <ReadMore header=\"Student Result\" subHeader=\"2020/2021 Academic Session - First Semester\">\r\n                            <div>\r\n                                <div className=\"result\">\r\n                                    <div className=\"action\">\r\n                                        <span>\r\n                                            <span className=\"iconify\" data-icon=\"foundation:print\" data-inline=\"false\"></span>\r\n                                        </span>\r\n                                        <button><span className=\"iconify\" data-icon=\"cil:zoom\" data-inline=\"false\"></span> View</button>\r\n                                    </div>\r\n                                    <ResultTable />\r\n                                </div>\r\n                            </div>\r\n                        </ReadMore>\r\n                        <div className=\"result-history-section\">\r\n                            <div className=\"title\">Result History</div>\r\n                            <div className=\"history-header\">\r\n                            <div id=\"select-field\">\r\n                                <TextField \r\n                                    select \r\n                                    name=\"session\" \r\n                                    id=\"session\" \r\n                                    label=\"Session\" \r\n                                    margin=\"normal\"\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                >\r\n                                    <MenuItem value=\"\">Select Session</MenuItem>\r\n                                    <MenuItem value=\"20202021\">2020/2021 Academic Session</MenuItem>\r\n                                </TextField>\r\n                            </div>\r\n                            <div id=\"select-field\">\r\n                                <TextField \r\n                                    select \r\n                                    name=\"semester\" \r\n                                    id=\"semester\" \r\n                                    label=\"Semester\" \r\n                                    margin=\"normal\"\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                >\r\n                                    <MenuItem value=\"\">Select Semester </MenuItem>\r\n                                    <MenuItem value=\"1\">First Semester</MenuItem>\r\n                                </TextField>\r\n                            </div>\r\n                            <button type=\"button\" className=\"search-btn\"><span className=\"iconify\" data-icon=\"cil:zoom\" data-inline=\"false\"></span> Search</button>\r\n                        </div>\r\n                            <div className=\"session-section\">\r\n                                <div className=\"session-title\">2019/2020 Academic Session - First Semester</div>\r\n                                <div className=\"action\">\r\n                                    <span>\r\n                                        <span className=\"iconify\" data-icon=\"foundation:print\" data-inline=\"false\"></span>\r\n                                    </span>\r\n                                    <button><span className=\"iconify\" data-icon=\"cil:zoom\" data-inline=\"false\"></span> View</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </DashboardFrame>\r\n    )\r\n}\r\n\r\nexport default Results;","import { Row, Col, Container } from 'react-bootstrap';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst ForgotPasswordForm = () => {\r\n\r\n    const initialValues = {\r\n        email: ''\r\n    }\r\n\r\n    const onSubmit = value => {\r\n        console.log(value)\r\n\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().email(\"Invalid Email Address\").required(\"Email is required\")\r\n    })\r\n\r\n    return (\r\n        <section>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={onSubmit}\r\n                validationSchema={validationSchema}\r\n            >\r\n                <Form>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"form-group\">\r\n                                    <Field type=\"email\" name=\"email\" id=\"email\" className=\"form-control2\" placeholder=\"Enter your Registered Email address\" />\r\n                                    <small id=\"passwordHelpBlock\" className=\"form-text text-danger\">\r\n                                        <ErrorMessage name=\"email\" />\r\n                                    </small>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <button type=\"submit\" className=\"submit-forgotten-password\">Retrieve Password</button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Form>\r\n            </Formik>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ForgotPasswordForm\r\n","import { Helmet } from 'react-helmet';\r\nimport ForgotPasswordForm from '../components/ForgotPasswordForm'\r\n\r\nconst ForgotPassword = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Forgot Password | iEduCare</title>\r\n            </Helmet>\r\n            <div className=\"content-page\">\r\n                <div className=\"login-section\">\r\n                    <div className=\"login2\" >\r\n                        <div style={{ textAlign: \"center\" }}>\r\n                            <div>\r\n                                <div className=\"header-forgotten-password\" style={{ marginBottom: \"20px\" }}>Forgot Password</div>\r\n                            </div>\r\n                            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                                <ForgotPasswordForm />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"login-footer\">Copyright © 2021.  All Rights Reserved - Powered by Turon Technologies Limited </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ForgotPassword\r\n","import {Route, useLocation, Redirect} from 'react-router-dom';\r\n\r\n\r\nconst ProtectedRoute = ({children, ...rest}) => {\r\n    let auth = localStorage.getItem(\"token\")\r\n    const locations = useLocation()\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={({location}) => \r\n                auth ? (\r\n                    children\r\n                    ) : \r\n                    (\r\n                    <Redirect to={{\r\n                        pathname: \"/\",\r\n                        state: {from: location},\r\n                    }} />\r\n                     )\r\n            }\r\n        />\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ProtectedRoute;","export const Up = ({positionClass}) => {\r\n    return (\r\n        <span className={`dropdown-icon ${positionClass}`}>\r\n            <span className=\"iconify\" data-icon=\"eva:arrow-ios-forward-fill\" data-inline=\"false\"></span>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport const Down = ({positionClass}) => {\r\n    return (\r\n        <span className={`dropdown-icon ${positionClass}`}>\r\n            <span className=\"iconify\" data-icon=\"eva:arrow-ios-downward-fill\" data-inline=\"false\"></span>\r\n        </span>\r\n    )\r\n}","import {NavLink, Link, useHistory} from 'react-router-dom';\r\nimport {Up, Down} from './DropdownIcons';\r\nimport React from 'react';\r\nimport store from '../../../store/store';\r\nimport { useState } from '@hookstate/core';\r\n\r\nconst SideMenu = () => {\r\n\r\n    const history = useHistory()\r\n\r\n    const [academicDropdownState, setAcademicDropdownState] = React.useState(false)\r\n    const [staffDropdownState, setStaffDropdownState] = React.useState(false)\r\n\r\n    const handleAcademicDropdown = () => {\r\n        setAcademicDropdownState(!academicDropdownState)\r\n    }\r\n\r\n    const handleStaffDropdown = () => {\r\n        setStaffDropdownState(!staffDropdownState)\r\n    }\r\n\r\n    const {role} = useState(store)\r\n    const {alertType} = useState(store)\r\n    const {alertNotification} = useState(store)\r\n    const {alertMessage} = useState(store)\r\n    const {firstName} = useState(store)\r\n    const {lastName} = useState(store)\r\n    const {phoneNumber} = useState(store)\r\n    const {email} = useState(store)\r\n    const {userId} = useState(store)\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem(\"token\")\r\n        role.set(\"\")\r\n        firstName.set(\"\")\r\n        lastName.set(\"\")\r\n        phoneNumber.set(\"\")\r\n        email.set(\"\")\r\n        userId.set(\"\")\r\n        alertType.set(\"success\")\r\n        alertMessage.set(\"Logout Successful\")\r\n        alertNotification.set(true)\r\n        setTimeout(() => {\r\n            alertNotification.set(false)\r\n            history.push({\r\n                pathname: \"/\"\r\n            })\r\n        }, 1000)\r\n    }\r\n\r\n    return (\r\n        <div className=\"side-menu\">\r\n            <div className=\"side-menu-content\">\r\n                <div className=\"logo-section\">\r\n                    <img src=\"/assets/images/logo.png\" alt=\"logo\" />\r\n                    <div className='sidemenu-header-text'>ACE</div>\r\n                </div>\r\n                <div className=\"nav-links admin-links\">\r\n                    <ul>\r\n                        <li>\r\n                            <NavLink exact to=\"/dashboard\" > \r\n                            <span className=\"iconify\" data-icon=\"zmdi:view-dashboard\" data-inline=\"false\"></span>\r\n                                Dashboard\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                           <NavLink exact to=\"/registration\" >\r\n                           <span className=\"iconify\" data-icon=\"ic:sharp-app-registration\" data-inline=\"false\"></span>\r\n                                Registration \r\n                           </NavLink> \r\n                        </li>\r\n                        <li>\r\n                            <Link onClick={handleAcademicDropdown}> \r\n                            <span className=\"iconify\" data-icon=\"majesticons:academic-cap-line\" data-inline=\"false\"></span> \r\n                                Academics {academicDropdownState ? <Down /> : <Up />}\r\n\r\n                                {academicDropdownState ? \r\n                                    <ul className=\"dropdown-item-menu border-left\">\r\n                                        <li ><NavLink exact to=\"/session-management\"> Session Management </NavLink></li>\r\n                                        <li><NavLink exact to=\"/school-management\"> School Management </NavLink></li>\r\n                                        <li><NavLink exact to=\"/faculty-management\"> Faculty Management </NavLink></li>\r\n                                        <li><NavLink exact to=\"/dept-management\"> Department Management </NavLink></li>\r\n                                        <li><NavLink exact to=\"/program-management\"> Program Management </NavLink></li>\r\n                                        <li><NavLink exact to=\"/program-levels\"> Program Levels </NavLink></li>\r\n                                        <li><NavLink exact to=\"/course-grades\"> Course Grades </NavLink></li>\r\n                                        <li><NavLink exact to=\"/course-management\"> Course Management </NavLink></li>\r\n                                    </ul>\r\n                                    :\r\n                                    \"\"\r\n                                }\r\n\r\n                            </Link>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink exact to=\"/student-management\"> \r\n                            <span className=\"iconify\" data-icon=\"la:user-graduate\" data-inline=\"false\"></span> \r\n                                Student Management \r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <Link onClick={handleStaffDropdown}> \r\n                                <span className=\"iconify\" data-icon=\"la:users-cog\" data-inline=\"false\"></span> \r\n                                Staff Management {staffDropdownState ? <Down positionClass=\"staff-dropdown-icon\"/> : <Up positionClass=\"staff-dropdown-icon\"/>}\r\n                                {staffDropdownState ? \r\n                                    <ul className=\"dropdown-item-menu border-left\">\r\n                                        <li><NavLink exact to=\"/all-staff\"> All Staff </NavLink></li>\r\n                                        {/* <li><NavLink exact to=\"/roles\"> Roles </NavLink></li> */}\r\n                                        <li><NavLink exact to=\"/designation\"> Designation </NavLink></li>\r\n                                    </ul>\r\n                                    :\r\n                                    \"\"\r\n                                }\r\n                            </Link>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink exact to=\"/lecture-management\">\r\n                            <span className=\"iconify\" data-icon=\"clarity:directory-outline-badged\" data-inline=\"false\"></span> Lecture Management\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink exact to=\"/financials\">\r\n                                <span className=\"iconify\" data-icon=\"mdi:bank-outline\" data-inline=\"false\"></span> \r\n                                Financials\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink exact to=\"/results-management\"> \r\n                            <span className=\"iconify\" data-icon=\"foundation:results-demographics\" data-inline=\"false\"></span> \r\n                                Results Management\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink exact to=\"/hostel-management\"> \r\n                                <span className=\"iconify\" data-icon=\"whh:legacyfilemanager\" data-inline=\"false\"></span> \r\n                                Hostel Management \r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink exact to=\"/transport-management\">\r\n                            <span className=\"iconify\" data-icon=\"whh:legacyfilemanager\" data-inline=\"false\"></span> Transport Management\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink exact to=\"/results-management\"> \r\n                            <span className=\"iconify\" data-icon=\"ant-design:notification-outlined\" data-inline=\"false\"></span> \r\n                            Announcement \r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink exact to=\"/hostel-management\"> \r\n                                <span className=\"iconify\" data-icon=\"ic:outline-notifications-active\" data-inline=\"false\"></span> \r\n                                Request \r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink exact to=\"/transport-management\">\r\n                            <span className=\"iconify\" data-icon=\"ic:baseline-support-agent\" data-inline=\"false\"></span> Support\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink exact to=\"/logout\" onClick={logout}>\r\n                                <span className=\"iconify\" data-icon=\"ls:logout\" data-inline=\"false\"></span> \r\n                                Logout\r\n                            </NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideMenu;","import React, {useEffect} from \"react\";\r\nimport Breadcrumb from \"../../components/Breadcrumb\";\r\nimport SideMenu from \"./SideMenu\";\r\nimport TopMenu from \"../../components/TopMenu\";\r\nimport Footer from \"../../components/Footer\";\r\nimport { userDetails } from \"../../../services/userServices\";\r\nimport store from \"../../../store/store\";\r\nimport { useState } from \"@hookstate/core\";\r\nimport { PopupAlert } from \"../../components/Alert\";\r\n\r\n\r\nconst Dashboardframe = ({children, title, subTitle}) => {\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const openMenu = () => {\r\n        setOpen(true)\r\n    }\r\n    const CloseMenu = () => {\r\n        setOpen(!true)\r\n    }\r\n\r\n    const {firstName} = useState(store)\r\n    const {lastName} = useState(store)\r\n    const {phoneNumber} = useState(store)\r\n    const {email} = useState(store)\r\n    const {alertType} = useState(store)\r\n    const {userId} = useState(store)\r\n    const {alertNotification} = useState(store)\r\n    const {alertMessage} = useState(store)\r\n\r\n    useEffect(() => {\r\n        try{\r\n            const fetch = async () => {\r\n                if(firstName.get() === \"\"){\r\n                    const user = await userDetails()\r\n                    firstName.set(user.data.firstName)\r\n                    lastName.set(user.data.lastName)\r\n                    phoneNumber.set(user.data.phoneNumber)\r\n                    email.set(user.data.email)\r\n                    userId.set(user.data.id)\r\n                }\r\n            }  \r\n            fetch()\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <SideMenu  open={open} CloseMenu={CloseMenu}/>\r\n            <div className=\"topbar\">\r\n                <TopMenu openMenu={openMenu} open={open}/>\r\n                <Breadcrumb title={title} subTitle={subTitle}/>\r\n                {alertNotification.get() && \r\n                <PopupAlert \r\n                    alertType={alertType.get()} \r\n                    setShowAlert={alertNotification.set} \r\n                    message={alertMessage.get()}\r\n                />\r\n                }\r\n                {children}\r\n                <Footer />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboardframe;\r\n","import { Card } from \"react-bootstrap\";\r\n\r\n\r\nconst DashboardCard = ({title, value, icon, iconClassName}) => {\r\n    return(\r\n        <Card className=\"card-wrapper\">\r\n            <Card.Body>\r\n                <Card.Text className=\"dashboard-card-container\">\r\n                    <div className=\"text-wrapper\">\r\n                        <div className=\"title\">\r\n                            {title}\r\n                        </div>\r\n                        <div className=\"value\">\r\n                            {value}\r\n                        </div>\r\n                    </div>\r\n                    <div className={`card-icon ${iconClassName}`}>\r\n                        <span className=\"iconify\" data-icon={icon} data-inline=\"false\"></span> \r\n                    </div>\r\n                </Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default DashboardCard;","import {Line} from 'react-chartjs-2';\r\nimport {getStudentChart} from '../../../services/StudentServices';\r\nimport {useState, useEffect} from 'react';\r\n\r\nconst LineChart = () => {\r\n    const [chartData, setChartData] = useState([])\r\n\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            try{\r\n                const res = await getStudentChart()\r\n                setChartData(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err)\r\n            }\r\n        }\r\n        fetch()\r\n    }, [])\r\n\r\n    const data = {\r\n        labels: chartData.session,\r\n        datasets: [{\r\n            label: chartData.maleStudents.label,\r\n            data: chartData.maleStudents.registeredStudentPerSession,\r\n            borderColor: ['#4FC3F7'],\r\n            backgroundColor: ['rgb(79, 195, 247, 0.3)'],\r\n            pointBackgroundColor: '#4FC3F7',\r\n            pointBorderColor: '#4FC3F7'\r\n        }, {\r\n            label: chartData.femaleStudents.label,\r\n            data: chartData.femaleStudents.registeredStudentPerSession,\r\n            borderColor: ['#2962FF'],\r\n            backgroundColor: ['rgba(41, 98, 255, 0.3)'],\r\n            pointBackgroundColor: '#2962FF',\r\n            pointBorderColor: '#2962FF'\r\n        }]\r\n    }\r\n\r\n    const options = {\r\n        maintainAspectRatio: false,\r\n        title:{\r\n            display: false\r\n        },\r\n        legend: {\r\n            display: false,\r\n            \r\n        },\r\n        scales: {\r\n            yAxes: [\r\n                {\r\n                    ticks: {\r\n                        min: 0,\r\n                        max: 10,\r\n                        stepSize: 1\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"linechart\">\r\n            <Line data={data} height={250} options={options}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineChart;","const RecentStudentComponent = ({name, dateTime, dp}) => {\r\n    return ( \r\n        <div className=\"recent-student-card pt-2\">\r\n            <div className=\"student-dp\">\r\n                <span className=\"iconify\" data-icon=\"clarity:user-solid\" data-inline=\"false\"></span> \r\n            </div>\r\n            <div className=\"student-detail\">\r\n                <div className=\"name\"> {name} </div>\r\n                <div className=\"reg-date\"> Registered on {dateTime} </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecentStudentComponent","import Dashboardframe from './subcomponent/Dashboardframe';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Container, Row, Card, Col} from 'react-bootstrap';\r\nimport DashboardCard from './subcomponent/DashboardCard';\r\nimport LineChart from './subcomponent/LineChart';\r\nimport {Scrollbars} from 'react-custom-scrollbars';\r\nimport RecentStudentComponent from './subcomponent/RecentStudentComponent';\r\nimport {getUserCount} from '../../services/userServices';\r\nimport React, {useState, useEffect} from 'react';\r\nimport ContentLoader from '../components/ContentLoader';\r\n\r\n\r\nconst AdminDashboard = () => {\r\n    const [userCount, setUserCount] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            try{\r\n                const res = await getUserCount()\r\n                setUserCount(res.data)\r\n                setIsLoading(false)\r\n            }\r\n            catch(err){\r\n                console.log(err)\r\n            }\r\n        }\r\n        fetch()\r\n    }, [])\r\n    return (\r\n        <Dashboardframe title=\"Staff\" subTitle=\"Dashboard\">\r\n            {/* page title header */}\r\n            <Helmet>\r\n                <title>Dashboard | Adeyemi College Of Education</title>\r\n            </Helmet>\r\n            {isLoading ?\r\n            <ContentLoader />\r\n            :\r\n            <div className=\"content-page\">\r\n               <Container>\r\n                   {/* Card Row */}\r\n                   <Row>\r\n                       <Col lg={3} md={6} sm={12}>\r\n                            <DashboardCard \r\n                                title=\"Total number of Active Students\" \r\n                                value={userCount.totalActiveStudent} \r\n                                icon=\"icons8:student\" \r\n                                iconClassName=\"student-icon-class\"\r\n                            />\r\n                       </Col>\r\n                       <Col lg={3} md={6} sm={12}>\r\n                            <DashboardCard \r\n                                title=\"Total number of Inactive Students\" \r\n                                value={userCount.totalInactiveStudent} \r\n                                icon=\"icons8:student\" \r\n                                iconClassName=\"student-icon-class\"\r\n                            />\r\n                       </Col>\r\n                       <Col lg={3} md={6} sm={12}>\r\n                            <DashboardCard \r\n                                title=\"Total number of Students\" \r\n                                value={userCount.totalStudent} \r\n                                icon=\"icons8:student\" \r\n                                iconClassName=\"student-icon-class\"\r\n                            />\r\n                       </Col>\r\n                       <Col lg={3} md={6} sm={12}>\r\n                            <DashboardCard \r\n                                title=\"Total number of Staff\" \r\n                                value={userCount.totalStaff} \r\n                                icon=\"ph:users\" \r\n                                iconClassName=\"user-icon-class\"\r\n                            />\r\n                       </Col>\r\n                   </Row>\r\n                   <Row className=\"mt-3\">\r\n                       {/* Chart and Recent student Row */}\r\n                       <Col lg={9} md={12} sm={12}>\r\n                            <Card >\r\n                            <Card.Body>\r\n                                <Card.Title>\r\n                                    <div className=\"dashboard-chart-header mb-5\">\r\n                                        <div className=\"title\">\r\n                                            Registered students per Session \r\n                                        </div>\r\n                                        {/* <div className=\"sort\">\r\n                                            <button type=\"button\" className=\"dayBtn\">Day</button>\r\n                                            <button type=\"button\" className=\"dayBtn border-0\">Week</button>\r\n                                            <button type=\"button\" className=\"dayBtn border-0\">Month</button>\r\n                                        </div> */}\r\n                                    </div>\r\n                                </Card.Title>\r\n                                <Card.Text>\r\n                                    <LineChart />\r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                            </Card>\r\n                       </Col>\r\n                       <Col lg={3} md={12} sm={12}>\r\n                       <Card >\r\n                            <Card.Body>\r\n                                <Card.Title className=\"recent-students-title\">Recent registered students</Card.Title>\r\n                                <Card.Text>\r\n                                    <Scrollbars\r\n                                        style={{width: \"100%\", height: \"100%\"}}\r\n                                        autoHide={true}\r\n                                        autoHeight={true}\r\n                                        autoHeightMin={275}\r\n                                        autoHeightMax={275}\r\n                                    >\r\n                                        <RecentStudentComponent name=\"Emmanuel Pauline\" dateTime=\"Apr 03, 2021 1:43PM\"/>\r\n                                        <RecentStudentComponent name=\"Emmanuel Pauline\" dateTime=\"Apr 03, 2021 1:43PM\"/>\r\n                                        <RecentStudentComponent name=\"Emmanuel Pauline\" dateTime=\"Apr 03, 2021 1:43PM\"/>\r\n                                        <RecentStudentComponent name=\"Emmanuel Pauline\" dateTime=\"Apr 03, 2021 1:43PM\"/>\r\n\r\n                                    </Scrollbars>\r\n                                    <div className=\"view-all\">\r\n                                        <button type=\"button\" className=\"view-all-btn\">View All </button>\r\n                                    </div>\r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                            </Card>\r\n                       </Col>\r\n                   </Row>\r\n                </Container>\r\n            </div>\r\n            }\r\n        </Dashboardframe>\r\n    )\r\n}\r\n\r\nexport default AdminDashboard;\r\n","import { instance } from './httpService';\r\n\r\nexport const getDepartment = (institutionId, schoolId, facultyId) => {\r\n    if (schoolId && facultyId) {\r\n        return instance.get(`/api/ieducare/institutiondepartment/get/${institutionId}?schoolId=${schoolId}&facultyId=${facultyId}`)\r\n    } else {\r\n        return instance.get(`/api/ieducare/institutiondepartment/get/${institutionId}`)\r\n    }\r\n}\r\n\r\nexport const createDepartment = (data) => {\r\n    return instance.post(\"/api/ieducare/institutiondepartment/post\", data)\r\n}\r\n\r\nexport const editDepartment = (departmentId, name, institutionId, schoolId, facultyId, headId) => {\r\n    return instance.put(`/api/ieducare/institutiondepartment/edit/${departmentId}?Id=${departmentId}&Name=${name}&InstitutionId=${institutionId}&SchoolId=${schoolId}&FacultyId=${facultyId}&HeadId=${headId}`)\r\n}\r\n\r\nexport const deleteDepartment = (departmentId) => {\r\n    return instance.delete(`/api/ieducare/institutiondepartment/remove/${departmentId}`)\r\n}\r\n\r\nexport const getFaculty = (institutionId, schoolId) => {\r\n    if (schoolId) {\r\n        return instance.get(`/api/ieducare/institutionfaculty/get/${institutionId}?schoolId=${schoolId}`)\r\n    } else {\r\n        return instance.get(`/api/ieducare/institutionfaculty/get/${institutionId}`)\r\n    }\r\n}\r\n\r\nexport const createFaculty = (data) => {\r\n    return instance.post(\"/api/ieducare/institutionfaculty/post\", data)\r\n}\r\n\r\nexport const editFaculty = (facultyId, name, schoolId, headId, institutionId, createdBy) => {\r\n    return instance.put(`/api/ieducare/institutionfaculty/edit/${facultyId}?Name=${name}&SchoolId=${schoolId}&HeadId=${headId}&InstitutionId=${institutionId}&CreatedBy=${createdBy}`)\r\n}\r\n\r\nexport const deleteFaculty = (facultyId) => {\r\n    return instance.delete(`/api/ieducare/institutionfaculty/remove/${facultyId}`)\r\n}\r\n\r\nexport const getSchool = (institutionId) => {\r\n    return instance.get(`/api/ieducare/institutionschool/get/${institutionId}`)\r\n}\r\n\r\nexport const createSchool = (data) => {\r\n    return instance.post(\"/api/ieducare/institutionschool/post\", data)\r\n}\r\n\r\nexport const editSchool = (schoolId, name, headId, institutionId) => {\r\n    return instance.put(`/api/ieducare/institutionschool/edit/${schoolId}?Id=${schoolId}&Name=${name}&HeadId=${headId}&InstitutionId=${institutionId}`)\r\n}\r\n\r\nexport const deleteSchool = (schoolId) => {\r\n    return instance.delete(`/api/ieducare/institutionschool/remove/${schoolId}`)\r\n}\r\n\r\nexport const getSemester = () => {\r\n    return instance.get(`/ControlledData/Semester/All`)\r\n}\r\n\r\nexport const createSemester = (data) => {\r\n    return instance.post(\"/ControlledData/Semester/Create\", data)\r\n}\r\n\r\nexport const editSemester = (Id, data) => {\r\n    return instance.put(`/ControlledData/Semester/Edit/${Id}`, data)\r\n}\r\n\r\nexport const deleteSemester = (Id) => {\r\n    return instance.delete(`/ControlledData/Semester/Delete/${Id}`)\r\n}\r\n\r\nexport const getSession = () => {\r\n    return instance.get(\"/ControlledData/AcademicYear/All\")\r\n}\r\n\r\nexport const createSession = (data) => {\r\n    return instance.post(\"/ControlledData/AcademicYear/Create\", data)\r\n}\r\n\r\nexport const editSession = (Id, data) => {\r\n    return instance.put(`/ControlledData/AcademicYear/Edit/${Id}`, data)\r\n}\r\n\r\nexport const deleteSession = (Id) => {\r\n    return instance.delete(`/ControlledData/AcademicYear/Delete/${Id}`)\r\n}\r\n\r\nexport const getProgram = (institutionId, departmentId) => {\r\n    if (departmentId) {\r\n        return instance.get(`/api/ieducare/institutionprogram/get/${institutionId}?departmentId=${departmentId}`)\r\n    } else {\r\n        return instance.get(`/api/ieducare/institutionprogram/get/${institutionId}`)\r\n    }\r\n}\r\n\r\nexport const createProgram = (data) => {\r\n    return instance.post(\"/api/ieducare/institutionprogram/post\", data)\r\n}\r\n\r\nexport const editProgram = (programId, name, institutionId, departmentId, createdBy) => {\r\n    return instance.put(`/api/ieducare/institutionprogram/edit/${programId}?Id=${programId}&Name=${name}&InstitutionId=${institutionId}&DepartmentId=${departmentId}&CreatedBy=${createdBy}`)\r\n}\r\n\r\nexport const deleteProgram = (id) => {\r\n    return instance.delete(`/api/ieducare/institutionprogram/remove/${id}`)\r\n}\r\n\r\nexport const getProgramLevel = (institutionId) => {\r\n    return instance.get(`/api/ieducare/programlevel/get/${institutionId}`)\r\n}\r\n\r\nexport const createProgramLevel = (data) => {\r\n    return instance.post(\"/api/ieducare/programlevel/post\", data)\r\n}\r\n\r\nexport const editProgramLevel = (programLevelId, levelCode, description, institutionId, createdBy) => {\r\n    return instance.put(`/api/ieducare/programlevel/edit/${programLevelId}?Id=${programLevelId}&LevelCode=${levelCode}&Description=${description}&InstitutionId=${institutionId}&CreatedBy=${createdBy}`)\r\n}\r\n\r\nexport const deleteProgramLevel = (id) => {\r\n    return instance.delete(`/api/ieducare/programlevel/remove/${id}`)\r\n}\r\n\r\nexport const getCourseGrade = (institutionId) => {\r\n    return instance.get(`/api/ieducare/coursegrade/get/${institutionId}`)\r\n}\r\n\r\nexport const createCourseGrade = (data) => {\r\n    return instance.post(\"/api/ieducare/coursegrade/post\", data)\r\n}\r\n\r\nexport const editCourseGrade = (courseGradeId, code, remark, gradeScore, minScore, maxScore, institutionId, createdBy) => {\r\n    return instance.put(`/api/ieducare/coursegrade/edit/${courseGradeId}?Id=${courseGradeId}&Code=${code}&Remark=${remark}&GradeScore=${gradeScore}&MinimumScore=${minScore}&MaximumScore=${maxScore}&InstitutionId=${institutionId}&CreatedBy=${createdBy}`)\r\n}\r\n\r\nexport const deleteCourseGrade = (id) => {\r\n    return instance.delete(`/api/ieducare/coursegrade/remove/${id}`)\r\n}","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {createSession} from '../../../services/institutionAdminServices';\r\nimport StyledTextField from '../../components/StyledTextField';\r\n\r\n\r\n\r\nconst NewSession = (props) => {\r\n\r\n    //Popup Alert state\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n\r\n    //Submission State\r\n    const[isSubmit, setIsSubmit] = useState(false)\r\n\r\n    //Form submission function\r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await createSession(data)\r\n            if (res.status === 200 || res.status === 204){\r\n                setAlertType(\"success\")\r\n                setMessage(\"New Session Added Successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength + 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Create Session\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    //Form initial Value\r\n    const initialValues = {\r\n        name: '',\r\n        year: ''\r\n    }\r\n\r\n    //Form Validation Schema\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Session Name is Required\"),\r\n        year: Yup.string().required(\"Year is Required \")\r\n    })\r\n\r\n    //Formik hook\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Add New Session\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <StyledTextField \r\n                                        name=\"name\" \r\n                                        id=\"name\" \r\n                                        label=\"Session Name\" \r\n                                        placeholder=\"Session Name\"\r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.name}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                        helperText={formik.touched.name && formik.errors.name}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <StyledTextField \r\n                                        name=\"year\" \r\n                                        type='date'\r\n                                        id=\"Year\" \r\n                                        label=\"Date\" \r\n                                        placeholder=\"Date\"\r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.year}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.year && Boolean(formik.errors.year)}\r\n                                        helperText={formik.touched.year && formik.errors.year}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>  \r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}>{isSubmit ? \"Submitting...\" : \"Submit\" } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default NewSession","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {editSession} from '../../../services/institutionAdminServices';\r\nimport StyledTextField from '../../components/StyledTextField';\r\nimport {dateToInputDate} from '../../../utils/Functions';\r\n\r\nconst EditSession = (props) => {\r\n    const {data} = props\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const[isSubmit, setIsSubmit] = useState(false)\r\n\r\n    \r\n    const onSubmit = async(editdata) => {\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await editSession(data.id, editdata)\r\n            if (res.status === 200 || res.status === 204){\r\n                setAlertType(\"success\")\r\n                setMessage(\"Session Edited Successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contenthLength + 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Edit Session\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        name: data.name,\r\n        year: data.year,\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Session Name is Required\"),\r\n        year: Yup.string().required(\"Year is Required \")\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Edit Session\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <StyledTextField \r\n                                        name=\"name\" \r\n                                        id=\"name\" \r\n                                        label=\"Session Name\" \r\n                                        placeholder=\"Session Name\"\r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.name}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                        helperText={formik.touched.name && formik.errors.name}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <StyledTextField \r\n                                        name=\"year\" \r\n                                        type='date'\r\n                                        id=\"Year\" \r\n                                        label=\"Date\" \r\n                                        placeholder=\"Date\"\r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={dateToInputDate(formik.values.year)}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.year && Boolean(formik.errors.year)}\r\n                                        helperText={formik.touched.year && formik.errors.year}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>  \r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}>{isSubmit ? \"Editing...\" : \"Edit\" } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default EditSession","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {deleteSession} from '../../../services/institutionAdminServices';\r\n\r\nconst DeleteSession = (props) => {\r\n    const {data} = props\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const[isSubmit, setIsSubmit] = useState(false)\r\n\r\n    \r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await deleteSession(data.id)\r\n            if (res.status === 200 || res.status === 204){\r\n                setAlertType(\"success\")\r\n                setMessage(\"Session Deleted Successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength - 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Delete Session\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        id: data.id\r\n    }\r\n\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Delete Session\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                <div className=\"form-group\">\r\n                                    Are You Sure you want to Delete?\r\n                                </div> \r\n                            </Col>\r\n                        </Row>  \r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}>{isSubmit ? \"Deleting...\" : \"Delete\" } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default DeleteSession","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {useState,} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {createSemester} from '../../../services/institutionAdminServices';\r\nimport StyledTextField from '../../components/StyledTextField';\r\n\r\nconst NewSemester = (props) => {\r\n    // Popup Alert State\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n\r\n\r\n    //Submit State\r\n    const[isSubmit, setIsSubmit] = useState(false)\r\n    \r\n    //Submit New Semester Function\r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await createSemester(data)\r\n            if (res.status === 200 || res.status === 204){\r\n                setAlertType(\"success\")\r\n                setMessage(\"New Semester Added Successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Create Semester\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    //For Initial Value\r\n    const initialValues = {\r\n        name: ''\r\n    }\r\n\r\n    //Form Validation Schema\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Semester Name is Required\"),\r\n    })\r\n\r\n    //Formik Hook\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Add New Semester\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <StyledTextField \r\n                                        name=\"name\" \r\n                                        id=\"name\" \r\n                                        label=\"Semester Name\" \r\n                                        placeholder=\"Semester Name\"\r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.name}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                        helperText={formik.touched.name && formik.errors.name}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>  \r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}>{isSubmit ? \"Submitting\" : \"Submit\" }<span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default NewSemester","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {editSemester} from '../../../services/institutionAdminServices';\r\nimport StyledTextField from '../../components/StyledTextField';\r\n\r\nconst EditSemester = (props) => {\r\n    const {data} = props\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const[isSubmit, setIsSubmit] = useState(false)\r\n    \r\n    const onSubmit = async(editData) => {\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await editSemester(data.id, editData)\r\n            if (res.status === 200 || res.status === 204){\r\n                setAlertType(\"success\")\r\n                setMessage(\"New Semester Updated Successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Update Semester\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        name: data.name\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Semester Name is Required\")\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Edit Semester\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <StyledTextField \r\n                                        name=\"name\" \r\n                                        id=\"name\" \r\n                                        label=\"Semester Name\" \r\n                                        placeholder=\"Semester Name\"\r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.name}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                        helperText={formik.touched.name && formik.errors.name}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>  \r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}>{isSubmit ? \"Submitting\" : \"Submit\" }<span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default EditSemester","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {deleteSemester} from '../../../services/institutionAdminServices';\r\n\r\nconst DeleteSemester = (props) => {\r\n    const {data} = props\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const[isSubmit, setIsSubmit] = useState(false)\r\n\r\n    \r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await deleteSemester(data.id)\r\n            if (res.status === 200 || res.status === 204){\r\n                setAlertType(\"success\")\r\n                setMessage(\"Semester Deleted Successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Delete Semester\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        id: data.id\r\n    }\r\n\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Delete Semester\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                <div className=\"form-group\">\r\n                                    Are You Sure you want to Delete?\r\n                                </div> \r\n                            </Col>\r\n                        </Row>  \r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}>{isSubmit ? \"Deleting...\" : \"Delete\" } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default DeleteSemester","import ReactPaginate from 'react-paginate';\r\n\r\n\r\nconst PaginationComponent = ({pageCount, handlePageClick}) => {\r\n  \r\n    return(\r\n        <ReactPaginate \r\n            previousLabel=\"Previous\"\r\n            nextLabel=\"Next\"\r\n            breakLabel=\"...\"\r\n            pageCount={pageCount}\r\n            onPageChange={handlePageClick}\r\n            previousClassName=\"page-item\"\r\n            nextClassName=\"page-item\"\r\n            pageLinkClassName=\"page-link\"\r\n            previousLinkClassName=\"page-link\"\r\n            nextLinkClassName=\"page-link\"\r\n            activeLinkClassName=\"activeLabelClass\"\r\n            activeClassName=\"page-item active\"\r\n            containerClassName=\"pagination pagination-sm\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default PaginationComponent;","import {Table, Col, Row} from 'react-bootstrap';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport {useEffect, useState} from 'react';\r\nimport {getSemester} from '../../../services/institutionAdminServices';\r\nimport {tableIndex, search} from '../../../utils/Functions';\r\n\r\nconst SemesterTable = ({sessionId, sessionName, handleSemesterEdit,  handleSemesterDelete, setSemesterEditData}) => {\r\n\r\n    const [semesterData, setSemesterData] = useState([])\r\n\r\n    const [slicedData, setSlicedData] = useState([])\r\n    const [searchData, setSearchData] = useState([])\r\n\r\n    const [offset, setOffset] = useState(0)\r\n    const [perPage, setPerPage] = useState(5)\r\n    const [pageCount, setPageCount] = useState(0)\r\n    const [contentLength, setContentLength] = useState(0)\r\n    const [realIndex, setRealIndex] = useState(1)\r\n\r\n    const handlePageClick = (e) => {\r\n        const selectedPage = e.selected;\r\n        setRealIndex(offset * perPage + 1)\r\n        setOffset(selectedPage)\r\n    }\r\n    \r\n    const handleSearch = (array, searchText) => {\r\n        if (searchText === ''){\r\n            setSemesterData(slicedData)\r\n        }\r\n        else{\r\n            setSemesterData(search(array, searchText, 'name'))\r\n        } \r\n    }\r\n    \r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getSemester(sessionId)\r\n                const data = res.data\r\n                const slicedData = data.slice(offset * perPage, offset + perPage)\r\n                setSlicedData(slicedData)\r\n                setSemesterData(slicedData)\r\n                setSearchData(data)\r\n                setContentLength(data.length)\r\n                setPageCount(Math.ceil(data.length / perPage))\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [offset, perPage, contentLength, sessionId])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <div className=\"table-header\">\r\n                        <div className=\"entries\">\r\n                            <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                            <div className=\"entries-input\">\r\n                                <select className=\"entries-box\" id=\"entries\" onChange={(e) => setPerPage(e.target.value)}>\r\n                                    {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                        <option value={value} key={value}>{value}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"entries-label\"> entries </div>\r\n                        </div>\r\n                        <div className=\"search\">\r\n                            <label htmlFor=\"search\" className=\"search-label\">Filter: </label>\r\n                            <input type=\"search\" className=\"search-box\" id=\"search\" onChange={(event) => handleSearch(searchData, event.target.value)}/>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mt-4\">\r\n                <Col lg={12}>\r\n                    <div className=\"session-table\">\r\n                        <Table bordered hover responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                <th>S/N</th>\r\n                                <th>Semester Name</th>\r\n                                <th>Action</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {semesterData.map((data, index) => (\r\n                                    <tr key={data.id}>\r\n                                        <td>{tableIndex(index, realIndex)}</td>\r\n                                        <td>{data.name}</td>\r\n                                        <td>\r\n                                        <span className=\"btns\">\r\n                                            <span\r\n                                                onClick={() => {\r\n                                                    setSemesterEditData(data)\r\n                                                    handleSemesterEdit()\r\n                                                }}\r\n                                            >\r\n                                                <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                            </span>\r\n                                            <span\r\n                                               onClick={() => {\r\n                                                setSemesterEditData(data)\r\n                                                handleSemesterDelete()\r\n                                               }} \r\n                                            >\r\n                                                <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                            </span>\r\n                                        </span>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <div className=\"pagination-section\">\r\n                        <div className=\"page-entry\">\r\n                            Showing {offset * perPage + 1} to {offset + perPage} of {contentLength} entries\r\n                        </div>\r\n                        <div className=\"page-nav\">\r\n                            <PaginationComponent \r\n                                pageCount={pageCount} \r\n                                handlePageClick={handlePageClick} \r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SemesterTable\r\n","import {Table, Row, Col} from 'react-bootstrap';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport {useState} from 'react';\r\nimport {tableIndex, search, dateConverter} from '../../../utils/Functions';\r\n\r\nconst SessionTable = ({offset, \r\n                        perPage, \r\n                        setPerPage, \r\n                        setOffset, \r\n                        setSessionData, \r\n                        slicedData, \r\n                        searchData, \r\n                        sessionData, \r\n                        setSessionEditData,\r\n                        handleAddEdit,\r\n                        handleAddDelete,\r\n                        contentLength,\r\n                        pageCount\r\n                    }) => {\r\n    \r\n    const [realIndex, setRealIndex] = useState(1)\r\n\r\n    const handlePageClick = (e) => {\r\n        const selectedPage = e.selected;\r\n        setRealIndex(offset * perPage + 1)\r\n        setOffset(selectedPage)\r\n    }\r\n    \r\n    const handleSearch = (array, searchText) => {\r\n        if (searchText === ''){\r\n            setSessionData(slicedData)\r\n        }\r\n        else{\r\n            setSessionData(search(array, searchText, 'name'))\r\n        } \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <div className=\"table-header\">\r\n                        <div className=\"entries\">\r\n                            <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                            <div className=\"entries-input\">\r\n                                <select className=\"entries-box\" id=\"entries\" onChange={(e) => setPerPage(e.target.value)}>\r\n                                    {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                        <option value={value} key={value}>{value}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"entries-label\"> entries </div>\r\n                        </div>\r\n                        <div className=\"search\">\r\n                            <label htmlFor=\"search\" className=\"search-label\">Filter: </label>\r\n                            <input type=\"search\" className=\"search-box\" id=\"search\" onChange={(event) => handleSearch(searchData, event.target.value)}/>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mt-4\">\r\n                <Col lg={12}>\r\n                    <div className=\"session-table\">\r\n                        <Table bordered hover responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                <th>S/N</th>\r\n                                <th>Session Name</th>\r\n                                <th>Date</th>\r\n                                <th>Action</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {sessionData.map((data, index) => (\r\n                                    <tr key={data.id}>\r\n                                        <td>{tableIndex(index, realIndex)}</td>\r\n                                        <td>{data.name}</td>\r\n                                        <td>{dateConverter(data.year)}</td>\r\n                                        <td>\r\n                                        <span className=\"btns\">\r\n                                            <span\r\n                                                onClick={() => {\r\n                                                    setSessionEditData(data)\r\n                                                    handleAddEdit()\r\n                                                }}\r\n                                            >\r\n                                                <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                            </span>\r\n                                            <span\r\n                                                onClick={() => {\r\n                                                    setSessionEditData(data)\r\n                                                    handleAddDelete()\r\n                                                }}\r\n                                            >\r\n                                                <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                            </span>\r\n                                        </span>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <div className=\"pagination-section\">\r\n                        <div className=\"page-entry\">\r\n                            Showing {offset * perPage + 1} to {offset + perPage} of {contentLength} entries\r\n                        </div>\r\n                        <div className=\"page-nav\">\r\n                            <PaginationComponent \r\n                                pageCount={pageCount} \r\n                                handlePageClick={handlePageClick} \r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SessionTable\r\n","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {createSession} from '../../../services/institutionAdminServices';\r\nimport StyledTextField from '../../components/StyledTextField';\r\n\r\n\r\nconst UpdateCurrentSession = (props) => {\r\n    //Popup Alert state\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n\r\n    //Submission State\r\n    const[isSubmit, setIsSubmit] = useState(false)\r\n\r\n    //Form submission function\r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await createSession(data)\r\n            if (res.status === 200 || res.status === 204){\r\n                setAlertType(\"success\")\r\n                setMessage(\"New Session Added Successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength + 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Create Session\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    //Form initial Value\r\n    const initialValues = {\r\n        academicYearID: '',\r\n        semesterID: ''\r\n    }\r\n\r\n    //Form Validation Schema\r\n    const validationSchema = Yup.object({\r\n        academicYearID: Yup.string().required(\"Session is Required\"),\r\n        semesterID: Yup.string().required(\"Semester is Required \")\r\n    })\r\n\r\n    //Formik hook\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Update Current Session And Semester\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <StyledTextField \r\n                                        select\r\n                                        name=\"academicYearID\" \r\n                                        id=\"academicYearID\" \r\n                                        label=\"Session\" \r\n                                        placeholder=\"Session\"\r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.academicYearID}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.academicYearID && Boolean(formik.errors.academicYearID)}\r\n                                        helperText={formik.touched.academicYearID && formik.errors.academicYearID}\r\n                                    >\r\n\r\n                                    </StyledTextField>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <StyledTextField \r\n                                        select\r\n                                        name=\"semesterID\" \r\n                                        type='date'\r\n                                        id=\"semesterID\" \r\n                                        label=\"Semster\" \r\n                                        placeholder=\"Semster\"\r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.semesterID}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.semesterID && Boolean(formik.errors.semesterID)}\r\n                                        helperText={formik.touched.semesterID && formik.errors.semesterID}\r\n                                    >\r\n                                    </StyledTextField>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>  \r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}>{isSubmit ? \"Submitting...\" : \"Submit\" } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default UpdateCurrentSession\r\n","import Dashboardframe from './subcomponent/Dashboardframe';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Container, Row, Col, Tabs, Tab} from 'react-bootstrap';\r\nimport NewSession from './subcomponent/NewSession';\r\nimport EditSession from './subcomponent/EditSession';\r\nimport DeleteSession from './subcomponent/DeleteSession';\r\nimport NewSemester from './subcomponent/NewSemester';\r\nimport EditSemester from './subcomponent/EditSemester';\r\nimport DeleteSemester from './subcomponent/DeleteSemester';\r\nimport SemesterTable from './subcomponent/SemesterTable';\r\nimport SessionTable from './subcomponent/SessionTable';\r\nimport {useState, useEffect} from 'react';\r\nimport {getInstitutionId} from '../../utils/Functions';\r\nimport ContentLoader from '../components/ContentLoader';\r\nimport {getSession} from '../../services/institutionAdminServices';\r\nimport UpdateCurrentSession from './subcomponent/UpdateCurrentSession';\r\n\r\n\r\nconst SessionManagement = () => {\r\n    // Modal State: Add, Edit & Delete Session/Semester Modal State\r\n    const [addNew, setAddNew] = useState(false)\r\n    const [addEdit, setAddEdit] = useState(false)\r\n    const [addDelete, setAddDelete] = useState(false)\r\n    const [addNewSemester, setAddNewSemester] = useState(false)\r\n    const [addEditSemester, setAddEditSemester] = useState(false)\r\n    const [addDeleteSemester, setAddDeleteSemester] = useState(false)\r\n    const [updateSchoolYear, setUpdateSchoolYear] = useState(false)\r\n\r\n\r\n    // Session ID and Name State\r\n    const [recentSessionId, setRecentSessionId] = useState(\"\")\r\n    const [recentSessionName, setRecentSessionName] = useState(\"\")\r\n\r\n    //Temporary session and semester data/state for Edit and delete modal\r\n    const [sessionEditData, setSessionEditData] = useState([])\r\n    const [semesterEditData, setSemesterEditData] = useState([])\r\n\r\n    //Page Loading State\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    //Get Institution ID from Local Storage\r\n    const institutionId = getInstitutionId()\r\n\r\n    //Sliced Data and Search data state for search bar\r\n    const [slicedData, setSlicedData] = useState([])\r\n    const [searchData, setSearchData] = useState([])\r\n\r\n    //Pagination state data\r\n    const [offset, setOffset] = useState(0)\r\n    const [perPage, setPerPage] = useState(5)\r\n    const [pageCount, setPageCount] = useState(0)\r\n    const [contentLength, setContentLength] = useState(0)\r\n\r\n    //Displayed Session State\r\n    const [sessionData, setSessionData] = useState([])\r\n\r\n    //Functions to open Add, Edit & Delete Session/Semester Modal \r\n    const handleAddNew = () => {\r\n        setAddNew(true)\r\n    }\r\n\r\n    const handleAddEdit = () => {\r\n        setAddEdit(true)\r\n    }\r\n\r\n    const handleSemesterEdit = () => {\r\n        setAddEditSemester(true)\r\n    }\r\n\r\n    const handleAddDelete = () => {\r\n        setAddDelete(true)\r\n    }\r\n\r\n    const handleAddNewSemester = () => {\r\n        setAddNewSemester(true)\r\n    }\r\n\r\n    const handleSemesterDelete = () => {\r\n        setAddDeleteSemester(true)\r\n    }\r\n\r\n    // Fetch data from the Institution Session Endpoint on page Render\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getSession(institutionId)\r\n                const data = res.data\r\n                const slicedData = data.slice(offset * perPage, offset + perPage)\r\n                const reversedData = data.reverse()\r\n                const recentSessionId = reversedData[0].id\r\n                const recentSessionName = reversedData[0].name\r\n                setRecentSessionId(recentSessionId)\r\n                setRecentSessionName(recentSessionName)\r\n                setSlicedData(slicedData)\r\n                setSessionData(slicedData)\r\n                setSearchData(data)\r\n                setContentLength(data.length)\r\n                setPageCount(Math.ceil(data.length / perPage))\r\n                setIsLoading(false)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [offset, perPage, contentLength, institutionId, setRecentSessionId, setRecentSessionName])\r\n    \r\n    return (\r\n        <Dashboardframe title=\"MIS\" subTitle=\"Semester/Session\">\r\n            {/* page title header */}\r\n            <Helmet>\r\n                <title>Session/Semester | Adeyemi College of Education</title>\r\n            </Helmet>\r\n            {/* Add New, Edit, Delete Session/Semester Modal Components */}\r\n            <NewSession \r\n                show={addNew} \r\n                onHide={() => setAddNew(false)} \r\n                setContentLength={setContentLength} \r\n                contentLength={contentLength}\r\n            />\r\n            <EditSession \r\n                show={addEdit} \r\n                onHide={() => setAddEdit(false)} \r\n                data={sessionEditData} \r\n                setContentLength={setContentLength} \r\n                contentLength={contentLength}\r\n            />\r\n            <DeleteSession \r\n                show={addDelete} \r\n                onHide={() => setAddDelete(false)} \r\n                data={sessionEditData}\r\n                setContentLength={setContentLength} \r\n                contentLength={contentLength}\r\n            />\r\n            <NewSemester \r\n                show={addNewSemester} \r\n                onHide={() => setAddNewSemester(false)} \r\n                sessionId={recentSessionId}\r\n            />\r\n            <EditSemester \r\n                show={addEditSemester} \r\n                onHide={() => setAddEditSemester(false)} \r\n                sessionId={recentSessionId} \r\n                data={semesterEditData}\r\n            />\r\n            <DeleteSemester \r\n                show={addDeleteSemester} \r\n                onHide={() => setAddDeleteSemester(false)} \r\n                data={semesterEditData}\r\n            />\r\n            <UpdateCurrentSession\r\n                show={updateSchoolYear} \r\n                onHide={() => setUpdateSchoolYear(false)} \r\n            />\r\n            { isLoading ?\r\n            <ContentLoader />\r\n            :    \r\n            <div className=\"content-page\">\r\n                <div className=\"session-wrapper\">\r\n                    <Container>\r\n                        <div className=\"session-title\">Session/Semester Management</div>\r\n                        <Row className=\"mt-4\">\r\n                            <Col>\r\n                                <button className=\"newSession-btn\" onClick={handleAddNew}> <span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span>  Add New Session</button>\r\n                                <button className=\"newSemester-btn\" onClick={handleAddNewSemester}> <span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span>  Add New Semester</button>\r\n                                <button className=\"newSemester-btn  ml-4\" onClick={() => setUpdateSchoolYear(true)}> <span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span>  Update School Year</button>\r\n                            </Col>\r\n                        </Row>\r\n                        {/* Tab Component for Session and Semester Table */}\r\n                            <Tabs defaultActiveKey=\"session\" id=\"uncontrolled-tab-example\" className=\"mt-4 session-tab\">\r\n                                <Tab eventKey=\"session\" title=\"Session\">\r\n                                    {/* Session Table Component */}\r\n                                    <SessionTable \r\n                                        offset={offset} \r\n                                        perPage={perPage} \r\n                                        setPerPage={setPerPage} \r\n                                        setOffset={setOffset} \r\n                                        setSessionData={setSessionData}\r\n                                        slicedData={slicedData}\r\n                                        searchData={searchData}\r\n                                        sessionData={sessionData}\r\n                                        setSessionEditData={setSessionEditData}\r\n                                        handleAddEdit={handleAddEdit}\r\n                                        handleAddDelete={handleAddDelete}\r\n                                        contentLength={contentLength}\r\n                                        pageCount={pageCount}\r\n                                    />\r\n                                </Tab>\r\n                                <Tab eventKey=\"semester\" title=\"Semester\">\r\n                                    {/* Semester Table Component */}\r\n                                    <SemesterTable \r\n                                        sessionId={recentSessionId} \r\n                                        sessionName={recentSessionName} \r\n                                        setIsLoading={setIsLoading}\r\n                                        setSemesterEditData={setSemesterEditData}\r\n                                        handleSemesterDelete={handleSemesterDelete}\r\n                                        handleSemesterEdit={handleSemesterEdit}             \r\n                                    />\r\n                                </Tab>\r\n                            </Tabs>    \r\n                    </Container>\r\n                </div>\r\n            </div>\r\n            }\r\n        </Dashboardframe>\r\n    )\r\n}\r\n\r\nexport default SessionManagement\r\n","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\n// import MenuItem from '@material-ui/core/MenuItem';\r\nimport * as Yup from 'yup';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {getInstitutionId, getWebUserId} from '../../../utils/Functions';\r\nimport {createSchool} from '../../../services/institutionAdminServices';\r\n\r\nconst NewSchool = (props) => {\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n    const[message, setMessage] = useState(\"\")\r\n    const institutionId = getInstitutionId()\r\n    const userId = getWebUserId()\r\n\r\n    \r\n    const onSubmit = async(data) => {\r\n        console.log(data)\r\n        setIsSubmit(true)\r\n        try {\r\n            const res = await createSchool(data)\r\n            console.log(res)\r\n            if (res.status === 200 || res.status === 204){\r\n                setIsSubmit(false)\r\n                setAlertType(\"success\")\r\n                setMessage(\"School Created Successfully\")\r\n                setShowAlert(true)\r\n                props.setContentLength(props.contentLength + 1)\r\n            }\r\n            else{\r\n                setIsSubmit(false)\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Failed to Create School\")\r\n                setShowAlert(true)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setIsSubmit(false)\r\n            setAlertType(\"danger\")\r\n            setMessage(err.message)\r\n            setShowAlert(true)\r\n        } \r\n    }\r\n\r\n    const initialValues = {\r\n        name: '',\r\n        headId: '',\r\n        institutionId: institutionId,\r\n        webUserId: userId\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"School Name is Required\")\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Add New School\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"name\" \r\n                                        id=\"name\" \r\n                                        label=\"School Name\" \r\n                                        margin=\"normal\"\r\n                                        placeholder=\"School Name\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.name}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                        helperText={formik.touched.name && formik.errors.name}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"headId\" \r\n                                        id=\"headId\" \r\n                                        placeholder=\"School Head\"\r\n                                        label=\"School Head\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        // value={formik.values.headId}\r\n                                        // onChange={formik.handleChange}\r\n                                        // error={formik.touched.headId && Boolean(formik.errors.headId)}\r\n                                        // helperText={formik.touched.headId && formik.errors.headId}\r\n                                        />\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            \r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"designation\" \r\n                                        id=\"designation\" \r\n                                        placeholder=\"Designation\"\r\n                                        label=\"Designation\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}> {\r\n                        isSubmit ? \"Submitting...\" : \"Submit\"\r\n                    } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default NewSchool","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport * as Yup from 'yup';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {getWebUserId} from '../../../utils/Functions';\r\nimport {editSchool} from '../../../services/institutionAdminServices';\r\n\r\nconst EditSchool = (props) => {\r\n\r\n    const {data} = props\r\n\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n    const[message, setMessage] = useState(\"\")\r\n    const userId = getWebUserId()\r\n\r\n    \r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try {\r\n            const res = editSchool(data.id, data.name, data.headId, data.institutionId)\r\n            if (res.status === 200 || res.status === 204){\r\n                setIsSubmit(false)\r\n                setAlertType(\"success\")\r\n                setMessage(\"School Edited Successfully\")\r\n                setShowAlert(true)\r\n                props.setContentLength(props.contentLength - 1)\r\n            }\r\n            else{\r\n                setIsSubmit(false)\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Failed to Edit School\")\r\n                setShowAlert(true)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setIsSubmit(false)\r\n            setAlertType(\"danger\")\r\n            setMessage(err.message)\r\n            setShowAlert(true)\r\n        }\r\n        \r\n    }\r\n\r\n    const initialValues = {\r\n        id: data.id,\r\n        name: data.name,\r\n        institutionId: data.institutionId,\r\n        webUserId: userId\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"School Name is Required\")\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Add New School\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"name\" \r\n                                        id=\"name\" \r\n                                        label=\"School Name\" \r\n                                        margin=\"normal\"\r\n                                        placeholder=\"School Name\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.name}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                        helperText={formik.touched.name && formik.errors.name}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"headId\" \r\n                                        id=\"headId\" \r\n                                        placeholder=\"School Head\"\r\n                                        label=\"School Head\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.headId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.headId && Boolean(formik.errors.headId)}\r\n                                        helperText={formik.touched.headId && formik.errors.headId}\r\n                                        >\r\n                                            <MenuItem value=\"3fa85f64-5717-4562-b3fc-2c963f66afa6\">Default</MenuItem>\r\n                                    </TextField>\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            \r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"designation\" \r\n                                        id=\"designation\" \r\n                                        placeholder=\"Designation\"\r\n                                        label=\"Designation\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                    >\r\n                                        <MenuItem value=\"HODHOD\">HOD</MenuItem>\r\n                                    </TextField>\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}> {\r\n                        isSubmit ? \"Submiting...\" : \"Submit\"\r\n                    } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default EditSchool","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {deleteSchool} from '../../../services/institutionAdminServices';\r\n\r\nconst DeleteSchool = (props) => {\r\n    const {data} = props\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const[isSubmit, setIsSubmit] = useState(false)\r\n\r\n    \r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await deleteSchool(data.id)\r\n            console.log(res)\r\n            if (res.status === 200 || res.status === 204){\r\n                setAlertType(\"success\")\r\n                setMessage(\"School Deleted Successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength - 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Delete School\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        id: data.id\r\n    }\r\n\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Delete School\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                <div className=\"form-group\">\r\n                                    Are You Sure you want to Delete?\r\n                                </div> \r\n                            </Col>\r\n                        </Row>  \r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}>{isSubmit ? \"Deleting...\" : \"Delete\" } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default DeleteSchool","import Dashboardframe from './subcomponent/Dashboardframe';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Container, Row, Col, Table} from 'react-bootstrap';\r\nimport NewSchool from './subcomponent/NewSchool';\r\nimport EditSchool from './subcomponent/EditSchool';\r\nimport DeleteSchool from './subcomponent/DeleteSchool';\r\nimport {useState, useEffect} from 'react';\r\nimport PaginationComponent from './subcomponent/PaginationComponent';\r\nimport ContentLoader from '../components/ContentLoader';\r\nimport {getSchool} from '../../services/institutionAdminServices';\r\nimport {getInstitutionId, search, tableIndex} from '../../utils/Functions';\r\n\r\nconst SchoolManagement = () => {\r\n    const [addNew, setAddNew] = useState(false)\r\n    const [addEdit, setAddEdit] = useState(false)\r\n    const [addDelete, setAddDelete] = useState(false)\r\n    const [schoolData, setSchoolData] = useState([])\r\n    const [schoolEditData, setSchoolEditData] = useState([])\r\n    const institutionId = getInstitutionId()\r\n    \r\n    const [slicedData, setSlicedData] = useState([])\r\n    const [searchData, setSearchData] = useState([])\r\n\r\n    const [offset, setOffset] = useState(0)\r\n    const [perPage, setPerPage] = useState(5)\r\n    const [pageCount, setPageCount] = useState(0)\r\n    const [contentLength, setContentLength] = useState(0)\r\n    const [isLoading, setIsLoading] = useState(0)\r\n    const [realIndex, setRealIndex] = useState(1)\r\n\r\n    const handleAddNew = () => {\r\n        setAddNew(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        const fetchData = async() => {\r\n            const res = await getSchool(institutionId)\r\n            const data = res.data\r\n            const slicedData = data.slice(offset * perPage, offset + perPage)\r\n            setSlicedData(slicedData)\r\n            setSchoolData(slicedData)\r\n            setSearchData(data)\r\n            setContentLength(data.length)\r\n            setPageCount(Math.ceil(data.length / perPage))\r\n            setIsLoading(false)\r\n        } \r\n        fetchData()\r\n    }, [offset, perPage, contentLength, institutionId])\r\n\r\n    const handleSearch = (array, searchText) => {\r\n        if (searchText === ''){\r\n            setSchoolData(slicedData)\r\n        }\r\n        else{\r\n            setSchoolData(search(array, searchText, 'name'))\r\n        } \r\n    }\r\n\r\n    const handlePageClick = (e) => {\r\n        const selectedPage = e.selected;\r\n        setRealIndex(offset * perPage + 1)\r\n        setOffset(selectedPage)\r\n    }\r\n\r\n    return (\r\n        <Dashboardframe title=\"Admin\" subTitle=\"School Management\">\r\n            <Helmet>\r\n                <title>School Management | iEduCare</title>\r\n            </Helmet>\r\n            <NewSchool show={addNew} onHide={() => setAddNew(false)} contentLength={contentLength} setContentLength={setContentLength}/>\r\n            <EditSchool show={addEdit} onHide={() => setAddEdit(false)} data={schoolEditData} contentLength={contentLength} setContentLength={setContentLength}/>\r\n            <DeleteSchool show={addDelete} onHide={() => setAddDelete(false)} data={schoolEditData} contentLength={contentLength} setContentLength={setContentLength}/>\r\n            {isLoading ?\r\n            <ContentLoader />\r\n            :\r\n            <div className=\"content-page\">\r\n                <div className=\"session-wrapper\">\r\n                    <Container>\r\n                        <div className=\"session-title\">School Management</div>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <button className=\"addnew-btn\" onClick={handleAddNew}> <span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span>  Add New</button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"table-header\">\r\n                                    <div className=\"entries\">\r\n                                        <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                                        <div className=\"entries-input\">\r\n                                            <select className=\"entries-box\" id=\"entries\" onChange={(e) => setPerPage(e.target.value)}>\r\n                                                {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                                    <option value={value} key={value}>{value}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </div>\r\n                                        <div className=\"entries-label\"> entries </div>\r\n                                    </div>\r\n                                    <div className=\"search\">\r\n                                        <label htmlFor=\"search\" className=\"search-label\">Filter: </label>\r\n                                        <input type=\"search\" className=\"search-box\" id=\"search\" onChange={(event) => handleSearch(searchData, event.target.value)}/>\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <div className=\"session-table\">\r\n                                    <Table bordered hover responsive>\r\n                                        <thead>\r\n                                            <tr>\r\n                                            <th>S/N</th>\r\n                                            <th>School Name</th>\r\n                                            <th>School Head Name</th>\r\n                                            <th>Designation</th>\r\n                                            <th>Action</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {schoolData.map((data, index) => (\r\n                                                <tr key={data.id}>\r\n                                                    <td>{tableIndex(index, realIndex)}</td>\r\n                                                    <td>{data.name}</td>\r\n                                                    <td>{data.headId}</td>\r\n                                                    <td>{data.name}</td>\r\n                                                    <td>\r\n                                                    <span className=\"btns\">\r\n                                                        <span\r\n                                                            onClick={() => {\r\n                                                                setSchoolEditData(data)\r\n                                                                setAddEdit(true)\r\n                                                            }}\r\n                                                        >\r\n                                                            <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                        </span>\r\n                                                        <span\r\n                                                            onClick={() => {\r\n                                                                setSchoolEditData(data)\r\n                                                                setAddDelete(true)\r\n                                                            }}\r\n                                                        >\r\n                                                            <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                        </span>\r\n                                                    </span>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            ))}\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"pagination-section\">\r\n                                    <div className=\"page-entry\">\r\n                                    Showing {offset * perPage + 1} to {offset + perPage} of {contentLength} entries\r\n                                    </div>\r\n                                    <div className=\"page-nav\">\r\n                                        <PaginationComponent \r\n                                            pageCount={pageCount} \r\n                                            handlePageClick={handlePageClick} \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n            }\r\n        </Dashboardframe>\r\n    )\r\n}\r\n\r\nexport default SchoolManagement\r\n","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport * as Yup from 'yup';\r\nimport {useState, useEffect} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {getInstitutionId, getWebUserId} from '../../../utils/Functions';\r\nimport {createFaculty, getSchool} from '../../../services/institutionAdminServices';\r\n\r\nconst NewFaculty = (props) => {\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n    const [school, setSchool] = useState([])\r\n    const institutionId = getInstitutionId()\r\n    const userId = getWebUserId()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            const res = await getSchool(institutionId)\r\n            const data = res.data\r\n            setSchool(data)\r\n        } \r\n        fetchData()\r\n    }, [institutionId])\r\n\r\n    \r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try {\r\n            const res = await createFaculty(data)\r\n            console.log(res)\r\n            if (res.status === 200 || res.status === 204){\r\n                setIsSubmit(false)\r\n                setAlertType(\"success\")\r\n                setMessage(\"Faculty Created Successfully\")\r\n                setShowAlert(true)\r\n                props.setContentLength(props.contentLength + 1)\r\n            }\r\n            else{\r\n                setIsSubmit(false)\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Failed to Create Faculty\")\r\n                setShowAlert(true)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setIsSubmit(false)\r\n            setAlertType(\"danger\")\r\n            setMessage(err.message)\r\n            setShowAlert(true)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        name: '',\r\n        institutionId: institutionId,\r\n        // headId: '',\r\n        schoolId: '',\r\n        createdBy: userId\r\n\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Faculty Name is Required\"),\r\n        // headId: Yup.string().required(\"Faculty Dean is Required \"),\r\n        schoolId: Yup.string().required(\"school is Required \")\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Add New Faculty\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"name\" \r\n                                        id=\"name\" \r\n                                        label=\"Faculty Name\" \r\n                                        margin=\"normal\"\r\n                                        placeholder=\"Faculty Name\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.name}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                        helperText={formik.touched.name && formik.errors.name}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            \r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"headId\" \r\n                                        id=\"headId\" \r\n                                        placeholder=\"Faculty Head\"\r\n                                        label=\"Faculty Head\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        // value={formik.values.headId}\r\n                                        // onChange={formik.handleChange}\r\n                                        // error={formik.touched.headId && Boolean(formik.errors.headId)}\r\n                                        // helperText={formik.touched.headId && formik.errors.headId}\r\n                                    />\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            \r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"schoolId\" \r\n                                        id=\"schoolId\" \r\n                                        placeholder=\"School\"\r\n                                        label=\"School\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.schoolId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.schoolId && Boolean(formik.errors.schoolId)}\r\n                                        helperText={formik.touched.schoolId && formik.errors.schoolId}\r\n                                    >\r\n                                        {school.map(data => (\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                        ))}\r\n \r\n                                    </TextField>\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}> {\r\n                        isSubmit ? \"Submitting...\" : \"Submit\"\r\n                    } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default NewFaculty","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport * as Yup from 'yup';\r\nimport {useState, useEffect} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {getInstitutionId, getWebUserId} from '../../../utils/Functions';\r\nimport {editFaculty, getSchool} from '../../../services/institutionAdminServices';\r\n\r\nconst EditFaculty = (props) => {\r\n    const {data} = props\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n    const [school, setSchool] = useState([])\r\n    const institutionId = getInstitutionId()\r\n    const userId = getWebUserId()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            const res = await getSchool(institutionId)\r\n            const data = res.data\r\n            setSchool(data)\r\n        } \r\n        fetchData()\r\n    }, [institutionId])\r\n\r\n    \r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try {\r\n            const res = await editFaculty(data.id, data.name, data.schoolId, data.headId, data.institutionId, data.createdBy)\r\n            console.log(res)\r\n            if (res.status === 200 || res.status === 204){\r\n                setIsSubmit(false)\r\n                setAlertType(\"success\")\r\n                setMessage(\"Faculty Edited Successfully\")\r\n                setShowAlert(true)\r\n                props.setContentLength(props.contentLength + 1)\r\n            }\r\n            else{\r\n                setIsSubmit(false)\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Failed to Edit Faculty\")\r\n                setShowAlert(true)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setIsSubmit(false)\r\n            setAlertType(\"danger\")\r\n            setMessage(err.message)\r\n            setShowAlert(true)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        id: data.id,\r\n        name: data.name,\r\n        institutionId: data.institutionId,\r\n        headId: data.headId,\r\n        schoolId: data.schoolId,\r\n        createdBy: userId\r\n\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Faculty Name is Required\"),\r\n        // headId: Yup.string().required(\"Faculty Dean is Required \"),\r\n        schoolId: Yup.string().required(\"school is Required \")\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Edit Faculty\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"name\" \r\n                                        id=\"name\" \r\n                                        label=\"Faculty Name\" \r\n                                        margin=\"normal\"\r\n                                        placeholder=\"Faculty Name\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.name}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                        helperText={formik.touched.name && formik.errors.name}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            \r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"headId\" \r\n                                        id=\"headId\" \r\n                                        placeholder=\"Faculty Head\"\r\n                                        label=\"Faculty Head\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        // value={formik.values.headId}\r\n                                        // onChange={formik.handleChange}\r\n                                        // error={formik.touched.headId && Boolean(formik.errors.headId)}\r\n                                        // helperText={formik.touched.headId && formik.errors.headId}\r\n                                    />\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            \r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"schoolId\" \r\n                                        id=\"schoolId\" \r\n                                        placeholder=\"School\"\r\n                                        label=\"School\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.schoolId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.schoolId && Boolean(formik.errors.schoolId)}\r\n                                        helperText={formik.touched.schoolId && formik.errors.schoolId}\r\n                                    >\r\n                                        {school.map(data => (\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                        ))}\r\n \r\n                                    </TextField>\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}> {\r\n                        isSubmit ? \"Submitting...\" : \"Submit\"\r\n                    } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default EditFaculty","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {deleteFaculty} from '../../../services/institutionAdminServices';\r\n\r\nconst DeleteFaculty = (props) => {\r\n    const {data} = props\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const[isSubmit, setIsSubmit] = useState(false)\r\n\r\n    \r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await deleteFaculty(data.id)\r\n            console.log(res)\r\n            if (res.status === 200 || res.status === 204){\r\n                setAlertType(\"success\")\r\n                setMessage(\"Faculty Deleted Successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength - 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Delete Faculty\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        id: data.id\r\n    }\r\n\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Delete Faculty\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                <div className=\"form-group\">\r\n                                    Are You Sure you want to Delete?\r\n                                </div> \r\n                            </Col>\r\n                        </Row>  \r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}>{isSubmit ? \"Deleting...\" : \"Delete\" } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default DeleteFaculty","import Dashboardframe from './subcomponent/Dashboardframe';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Container, Row, Col, Table} from 'react-bootstrap';\r\nimport NewFaculty from './subcomponent/NewFaculty';\r\nimport EditFaculty from './subcomponent/EditFaculty';\r\nimport DeleteFaculty from './subcomponent/DeleteFaculty';\r\nimport {useState, useEffect} from 'react';\r\nimport PaginationComponent from './subcomponent/PaginationComponent';\r\nimport ContentLoader from '../components/ContentLoader';\r\nimport {getFaculty} from '../../services/institutionAdminServices';\r\nimport {getInstitutionId, search, tableIndex} from '../../utils/Functions';\r\n\r\nconst FacultyManagement = ()=> {\r\n    const [addNew, setAddNew] = useState(false)\r\n    const [addEdit, setAddEdit] = useState(false)\r\n    const [addDelete, setAddDelete] = useState(false)\r\n    const [facultyData, setFacultyData] = useState([])\r\n    const [facultyEditData, setFacultyEditData] = useState([])\r\n    const institutionId = getInstitutionId()\r\n    \r\n    const [slicedData, setSlicedData] = useState([])\r\n    const [searchData, setSearchData] = useState([])\r\n\r\n    const [offset, setOffset] = useState(0)\r\n    const [perPage, setPerPage] = useState(5)\r\n    const [pageCount, setPageCount] = useState(0)\r\n    const [contentLength, setContentLength] = useState(0)\r\n    const [isLoading, setIsLoading] = useState(0)\r\n    const [realIndex, setRealIndex] = useState(1)\r\n\r\n    const handleAddNew = () => {\r\n        setAddNew(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        const fetchData = async() => {\r\n            const res = await getFaculty(institutionId)\r\n            const data = res.data\r\n            const slicedData = data.slice(offset * perPage, offset + perPage)\r\n            setSlicedData(slicedData)\r\n            setFacultyData(slicedData)\r\n            setSearchData(data)\r\n            setContentLength(data.length)\r\n            setPageCount(Math.ceil(data.length / perPage))\r\n            setIsLoading(false)\r\n        } \r\n        fetchData()\r\n    }, [offset, perPage, contentLength, institutionId])\r\n\r\n    const handleSearch = (array, searchText) => {\r\n        if (searchText === ''){\r\n            setFacultyData(slicedData)\r\n        }\r\n        else{\r\n            setFacultyData(search(array, searchText, 'name'))\r\n        } \r\n    }\r\n\r\n    const handlePageClick = (e) => {\r\n        const selectedPage = e.selected;\r\n        setRealIndex(offset * perPage + 1)\r\n        setOffset(selectedPage)\r\n    }\r\n\r\n    return (\r\n        <Dashboardframe title=\"Admin\" subTitle=\"Faculty Management\">\r\n            <Helmet>\r\n                <title>Faculty Management | iEduCare</title>\r\n            </Helmet>\r\n            <NewFaculty show={addNew} onHide={() => setAddNew(false)} contentLength={contentLength} setContentLength={setContentLength}/>\r\n            <EditFaculty show={addEdit} onHide={() => setAddEdit(false)} contentLength={contentLength} setContentLength={setContentLength} data={facultyEditData}/>\r\n            <DeleteFaculty show={addDelete} onHide={() => setAddDelete(false)} contentLength={contentLength} setContentLength={setContentLength} data={facultyEditData}/>\r\n            {isLoading ?\r\n            <ContentLoader />\r\n            :\r\n            \r\n            <div className=\"content-page\">\r\n                <div className=\"session-wrapper\">\r\n                    <Container>\r\n                        <div className=\"session-title\">Faculty Management</div>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <button className=\"addnew-btn\" onClick={handleAddNew}> <span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span>  Add New</button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"table-header\">\r\n                                    <div className=\"entries\">\r\n                                        <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                                        <div className=\"entries-input\">\r\n                                            <select className=\"entries-box\" id=\"entries\" onChange={(e) => setPerPage(e.target.value)}>\r\n                                                {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                                    <option value={value} key={value}>{value}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </div>\r\n                                        <div className=\"entries-label\"> entries </div>\r\n                                    </div>\r\n                                    <div className=\"search\">\r\n                                        <label htmlFor=\"search\" className=\"search-label\">Filter: </label>\r\n                                        <input type=\"search\" className=\"search-box\" id=\"search\"  onChange={(event) => handleSearch(searchData, event.target.value)}/>\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <div className=\"session-table\">\r\n                                    <Table bordered hover responsive>\r\n                                        <thead>\r\n                                            <tr>\r\n                                            <th>S/N</th>\r\n                                            <th>Faculty Name</th>\r\n                                            <th>Dean of Faculty</th>\r\n                                            <th>School</th>\r\n                                            <th>Action</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {facultyData.map((data, index) => (\r\n                                                <tr key={data.id}>\r\n                                                    <td>{tableIndex(index, realIndex)}</td>\r\n                                                    <td>{data.name}</td>\r\n                                                    <td>{data.headId}</td>\r\n                                                    <td>{data.schoolId}</td>\r\n                                                    <td>\r\n                                                    <span className=\"btns\">\r\n                                                        <span\r\n                                                            onClick={() => {\r\n                                                                setFacultyEditData(data)\r\n                                                                setAddEdit(true)\r\n                                                            }}\r\n                                                        >\r\n                                                            <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                        </span>\r\n                                                        <span\r\n                                                            onClick={() => {\r\n                                                                setFacultyEditData(data)\r\n                                                                setAddDelete(true)\r\n                                                            }}\r\n                                                        >\r\n                                                            <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                        </span>\r\n                                                    </span>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            ))}\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"pagination-section\">\r\n                                    <div className=\"page-entry\">\r\n                                    Showing {offset * perPage + 1} to {offset + perPage} of {contentLength} entries\r\n                                    </div>\r\n                                    <div className=\"page-nav\">\r\n                                        <PaginationComponent \r\n                                            pageCount={pageCount} \r\n                                            handlePageClick={handlePageClick} \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n            }\r\n        </Dashboardframe>\r\n    )\r\n}\r\n\r\nexport default FacultyManagement\r\n","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport * as Yup from 'yup';\r\nimport {useState, useEffect} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {getInstitutionId, getWebUserId} from '../../../utils/Functions';\r\nimport {createDepartment, getSchool, getFaculty} from '../../../services/institutionAdminServices';\r\n\r\nconst NewDepartment = (props) => {\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n    const [school, setSchool] = useState([])\r\n    const [faculty, setFaculty] = useState([])\r\n    const institutionId = getInstitutionId()\r\n    const userId = getWebUserId()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            const res = await getSchool(institutionId)\r\n            const data = res.data\r\n            setSchool(data)\r\n        } \r\n        fetchData()\r\n    }, [institutionId])\r\n\r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try {\r\n            const res = await createDepartment(data)\r\n            if (res.status === 200 || res.status === 204){\r\n                setIsSubmit(false)\r\n                setAlertType(\"success\")\r\n                setMessage(\"Department Created Successfully\")\r\n                setShowAlert(true)\r\n                props.setContentLength(props.contentLength + 1)\r\n            }\r\n            else{\r\n                setIsSubmit(false)\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Failed to Create Department\")\r\n                setShowAlert(true)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setIsSubmit(false)\r\n            setAlertType(\"danger\")\r\n            setMessage(err.message)\r\n            setShowAlert(true)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        name: '',\r\n        institutionId: institutionId,\r\n        schoolId: '',\r\n        facultyId: '',\r\n        // headId: '',\r\n        createdBy: userId\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Department Name is Required\"),\r\n        schoolId: Yup.string().required(\"School Name is Required\"),\r\n        facultyId: Yup.string().required(\"Faculty Name is required\"),\r\n        // headId: Yup.string().required(\"HOD is required\"),\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            const res = await getFaculty(institutionId, formik.values.schoolId)\r\n            const data = res.data\r\n            setFaculty(data)\r\n        } \r\n        fetchData()\r\n    }, [institutionId, formik.values.schoolId])\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"lg\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Add New Department\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\" id=\"customSelect-input\">\r\n                                    <TextField \r\n                                        name=\"name\" \r\n                                        id=\"name\" \r\n                                        label=\"Department Name\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.name}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                        helperText={formik.touched.name && formik.errors.name}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\" id=\"select-input\">\r\n                                    <TextField \r\n                                        select \r\n                                        name=\"headId\" \r\n                                        id=\"headId\"\r\n                                        label=\"H.O.D\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        // value={formik.values.headId}\r\n                                        // onChange={formik.handleChange}\r\n                                        // error={formik.touched.headId && Boolean(formik.errors.headId)}\r\n                                        // helperText={formik.touched.headId && formik.errors.headId}\r\n                                    >\r\n                                        <MenuItem value=\"\">Select HOD</MenuItem>\r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\" id=\"select-input\">\r\n                                    <TextField \r\n                                        select \r\n                                        name=\"facultyId\" \r\n                                        id=\"facultyId\" \r\n                                        label=\"Faculty\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.facultyId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.facultyId && Boolean(formik.errors.facultyId)}\r\n                                        helperText={formik.touched.facultyId && formik.errors.facultyId}\r\n                                    >\r\n                                        {faculty.map(data => (\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem> \r\n                                        ))} \r\n                                    </TextField>\r\n                                    </div>\r\n                            </Col>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\" id=\"select-input\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"schoolId\" \r\n                                        id=\"schoolId\"\r\n                                        label=\"School\"\r\n                                        disabled={true} \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.schoolId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.schoolId && Boolean(formik.errors.schoolId)}\r\n                                        helperText={formik.touched.schoolId && formik.errors.schoolId}\r\n                                    >\r\n                                        {school.map(data => (\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem> \r\n                                        ))}  \r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}> {\r\n                        isSubmit ? \"Submitting...\" : \"Submit\"\r\n                    } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default NewDepartment","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {deleteDepartment} from '../../../services/institutionAdminServices';\r\n\r\nconst DeleteDepartment = (props) => {\r\n    const {data} = props\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const[isSubmit, setIsSubmit] = useState(false)\r\n\r\n    \r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await deleteDepartment(data.id)\r\n            if (res.status === 200 || res.status === 204){\r\n                setAlertType(\"success\")\r\n                setMessage(\"Department Deleted Successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength - 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Delete Department\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        id: data.id\r\n    }\r\n\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Delete Department\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                <div className=\"form-group\">\r\n                                    Are You Sure you want to Delete?\r\n                                </div> \r\n                            </Col>\r\n                        </Row>  \r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}>{isSubmit ? \"Deleting...\" : \"Delete\" } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default DeleteDepartment","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport * as Yup from 'yup';\r\nimport {useState, useEffect} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {getInstitutionId, getWebUserId} from '../../../utils/Functions';\r\nimport {editDepartment, getSchool, getFaculty} from '../../../services/institutionAdminServices';\r\n\r\nconst EditDepartment = (props) => {\r\n    const {data} = props\r\n\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n    const [school, setSchool] = useState([])\r\n    const [faculty, setFaculty] = useState([])\r\n    const institutionId = getInstitutionId()\r\n    const userId = getWebUserId()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            const res = await getSchool(institutionId)\r\n            const data = res.data\r\n            setSchool(data)\r\n        } \r\n        fetchData()\r\n    }, [institutionId])\r\n\r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try {\r\n            const res = await editDepartment(data.id, data.name, data.institutionId, data.schoolId, data.facultyId, data.headId)\r\n            if (res.status === 200 || res.status === 204){\r\n                setIsSubmit(false)\r\n                setAlertType(\"success\")\r\n                setMessage(\"Department Created Successfully\")\r\n                setShowAlert(true)\r\n                props.setContentLength(props.contentLength + 1)\r\n            }\r\n            else{\r\n                setIsSubmit(false)\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Failed to Create Department\")\r\n                setShowAlert(true)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setIsSubmit(false)\r\n            setAlertType(\"danger\")\r\n            setMessage(err.message)\r\n            setShowAlert(true)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        id: data.id,\r\n        name: data.name,\r\n        institutionId: data.institutionId,\r\n        schoolId: data.schoolId,\r\n        facultyId: data.facultyId,\r\n        headId: data.headId,\r\n        createdBy: userId\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Department Name is Required\"),\r\n        schoolId: Yup.string().required(\"School Name is Required\"),\r\n        facultyId: Yup.string().required(\"Faculty Name is required\"),\r\n        // headId: Yup.string().required(\"HOD is required\"),\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            const res = await getFaculty(institutionId, formik.values.schoolId)\r\n            const data = res.data\r\n            setFaculty(data)\r\n        } \r\n        fetchData()\r\n    }, [institutionId, formik.values.schoolId])\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"lg\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Edit Department\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\" id=\"customSelect-input\">\r\n                                    <TextField \r\n                                        name=\"name\" \r\n                                        id=\"name\" \r\n                                        label=\"Department Name\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.name}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                        helperText={formik.touched.name && formik.errors.name}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\" id=\"select-input\">\r\n                                    <TextField \r\n                                        select \r\n                                        name=\"headId\" \r\n                                        id=\"headId\"\r\n                                        label=\"H.O.D\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        // value={formik.values.headId}\r\n                                        // onChange={formik.handleChange}\r\n                                        // error={formik.touched.headId && Boolean(formik.errors.headId)}\r\n                                        // helperText={formik.touched.headId && formik.errors.headId}\r\n                                    >\r\n                                        <MenuItem value=\"\">Select HOD</MenuItem>\r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\" id=\"select-input\">\r\n                                    <TextField \r\n                                        select \r\n                                        name=\"facultyId\" \r\n                                        id=\"facultyId\" \r\n                                        label=\"Faculty\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.facultyId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.facultyId && Boolean(formik.errors.facultyId)}\r\n                                        helperText={formik.touched.facultyId && formik.errors.facultyId}\r\n                                    >\r\n                                        {faculty.map(data => (\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem> \r\n                                        ))} \r\n                                    </TextField>\r\n                                    </div>\r\n                            </Col>\r\n                            <Col lg={6} md={6} sm={12}>\r\n                                    <div className=\"form-group\" id=\"select-input\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"schoolId\" \r\n                                        id=\"schoolId\"\r\n                                        label=\"School\"\r\n                                        disabled={true} \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.schoolId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.schoolId && Boolean(formik.errors.schoolId)}\r\n                                        helperText={formik.touched.schoolId && formik.errors.schoolId}\r\n                                    >\r\n                                        {school.map(data => (\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem> \r\n                                        ))}  \r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}> {\r\n                        isSubmit ? \"Submitting...\" : \"Submit\"\r\n                    } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default EditDepartment","import Dashboardframe from './subcomponent/Dashboardframe';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Container, Row, Col, Table} from 'react-bootstrap';\r\nimport NewDept from './subcomponent/NewDept';\r\nimport DeleteDepartment from './subcomponent/DeleteDept';\r\nimport EditDepartment from './subcomponent/EditDept';\r\nimport {useState, useEffect} from 'react';\r\nimport PaginationComponent from './subcomponent/PaginationComponent';\r\nimport ContentLoader from '../components/ContentLoader';\r\nimport {getDepartment} from '../../services/institutionAdminServices';\r\nimport {getInstitutionId, search, tableIndex} from '../../utils/Functions';\r\n\r\nconst DeptManagement = () => {\r\n    const [addNew, setAddNew] = useState(false)\r\n    const [addEdit, setAddEdit] = useState(false)\r\n    const [addDelete, setAddDelete] = useState(false)\r\n    const [departmentData, setDepartmentData] = useState([])\r\n    const [departmentEditData, setDepartmentEditData] = useState([])\r\n    const institutionId = getInstitutionId()\r\n    \r\n    const [slicedData, setSlicedData] = useState([])\r\n    const [searchData, setSearchData] = useState([])\r\n\r\n    const [offset, setOffset] = useState(0)\r\n    const [perPage, setPerPage] = useState(5)\r\n    const [pageCount, setPageCount] = useState(0)\r\n    const [contentLength, setContentLength] = useState(0)\r\n    const [isLoading, setIsLoading] = useState(0)\r\n    const [realIndex, setRealIndex] = useState(1)\r\n\r\n    const handleAddNew = () => {\r\n        setAddNew(true)\r\n    }\r\n\r\n    const handleSearch = (array, searchText) => {\r\n        if (searchText === ''){\r\n            setDepartmentData(slicedData)\r\n        }\r\n        else{\r\n            setDepartmentData(search(array, searchText, 'name'))\r\n        } \r\n    }\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        const fetchData = async() => {\r\n            const res = await getDepartment(institutionId)\r\n            const data = res.data\r\n            const slicedData = data.slice(offset * perPage, offset + perPage)\r\n            setSlicedData(slicedData)\r\n            setDepartmentData(slicedData)\r\n            setSearchData(data)\r\n            setContentLength(data.length)\r\n            setPageCount(Math.ceil(data.length / perPage))\r\n            setIsLoading(false)\r\n        } \r\n        fetchData()\r\n    }, [offset, perPage, contentLength, institutionId])\r\n\r\n    const handlePageClick = (e) => {\r\n        const selectedPage = e.selected;\r\n        setRealIndex(offset * perPage + 1)\r\n        setOffset(selectedPage)\r\n    }\r\n\r\n    return (\r\n        <Dashboardframe title=\"Admin\" subTitle=\"Department Management\">\r\n            <Helmet>\r\n                <title>Department Management | iEduCare</title>\r\n            </Helmet>\r\n            <NewDept show={addNew} onHide={() => setAddNew(false)} contentLength={contentLength} setContentLength={setContentLength}/>\r\n            <EditDepartment show={addEdit} onHide={() => setAddEdit(false)} contentLength={contentLength} setContentLength={setContentLength} data={departmentEditData}/>\r\n            <DeleteDepartment show={addDelete} onHide={() => setAddDelete(false)} contentLength={contentLength} setContentLength={setContentLength} data={departmentEditData}/>\r\n            {isLoading ? \r\n            <ContentLoader />\r\n            :\r\n            <div className=\"content-page\">\r\n                <div className=\"session-wrapper\">\r\n                    <Container>\r\n                        <div className=\"session-title\">Department Management</div>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <button className=\"addnew-btn\" onClick={handleAddNew}> <span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span>  Add New</button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"table-header\">\r\n                                    <div className=\"entries\">\r\n                                        <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                                        <div className=\"entries-input\">\r\n                                            <select className=\"entries-box\" id=\"entries\" onChange={(e) => setPerPage(e.target.value)}>\r\n                                                {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                                    <option value={value} key={value}>{value}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </div>\r\n                                        <div className=\"entries-label\"> entries </div>\r\n                                    </div>\r\n                                    <div className=\"search\">\r\n                                        <label htmlFor=\"search\" className=\"search-label\">Filter: </label>\r\n                                        <input type=\"search\" className=\"search-box\" id=\"search\" onChange={(event) => handleSearch(searchData, event.target.value)}/>\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <div className=\"session-table\">\r\n                                    <Table bordered hover responsive>\r\n                                        <thead>\r\n                                            <tr>\r\n                                            <th>S/N</th>\r\n                                            <th>Department Name</th>\r\n                                            <th>H.O.D</th>\r\n                                            <th>Faculty</th>\r\n                                            <th>School</th>\r\n                                            <th>Action</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                        {departmentData.map((data, index) => (\r\n                                                <tr key={data.id}>\r\n                                                    <td>{tableIndex(index, realIndex)}</td>\r\n                                                    <td>{data.name}</td>\r\n                                                    <td>{data.headId}</td>\r\n                                                    <td>{data.facultyId}</td>\r\n                                                    <td>{data.schoolId}</td>\r\n                                                    <td>\r\n                                                    <span className=\"btns\">\r\n                                                        <span\r\n                                                            onClick={() => {\r\n                                                                setDepartmentEditData(data)\r\n                                                                setAddEdit(true)\r\n                                                            }}\r\n                                                        >\r\n                                                            <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                        </span>\r\n                                                        <span\r\n                                                            onClick={() => {\r\n                                                                setDepartmentEditData(data)\r\n                                                                setAddDelete(true)\r\n                                                            }}\r\n                                                        >\r\n                                                            <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                        </span>\r\n                                                    </span>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            ))}\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"pagination-section\">\r\n                                    <div className=\"page-entry\">\r\n                                    Showing {offset * perPage + 1} to {offset + perPage} of {contentLength} entries\r\n                                    </div>\r\n                                    <div className=\"page-nav\">\r\n                                        <PaginationComponent \r\n                                            pageCount={pageCount} \r\n                                            handlePageClick={handlePageClick} \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n            }\r\n        </Dashboardframe>\r\n    )\r\n}\r\n\r\nexport default DeptManagement\r\n","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport * as Yup from 'yup';\r\nimport {useState, useEffect} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {getInstitutionId, getWebUserId} from '../../../utils/Functions';\r\nimport {createProgram, getDepartment} from '../../../services/institutionAdminServices';\r\n\r\nconst NewProgram = (props) => {\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\") \r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n    const [department, setDepartment] = useState([])\r\n    const institutionId = getInstitutionId()\r\n    const userId = getWebUserId()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            const res = await getDepartment(institutionId)\r\n            const data = res.data\r\n            setDepartment(data)\r\n        } \r\n        fetchData()\r\n    }, [institutionId])\r\n\r\n\r\n    \r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try {\r\n            const res = await createProgram(data)\r\n            if (res.status === 200 || res.status === 204){\r\n                setIsSubmit(false)\r\n                setAlertType(\"success\")\r\n                setMessage(\"Program Created Successfully\")\r\n                setShowAlert(true)\r\n                props.setContentLength(props.contentLength + 1)\r\n            }\r\n            else{\r\n                setIsSubmit(false)\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Failed to Create Program\")\r\n                setShowAlert(true)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setIsSubmit(false)\r\n            setAlertType(\"danger\")\r\n            setMessage(err.message)\r\n            setShowAlert(true)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        name: '',\r\n        institutionId: institutionId,\r\n        departmentId: '',\r\n        createdBy: userId\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Program Name is Required\"),\r\n        departmentId: Yup.string().required(\"Department is Required \")\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Add New Program\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"name\" \r\n                                        id=\"name\" \r\n                                        label=\"Program Name\" \r\n                                        margin=\"normal\"\r\n                                        placeholder=\"Program Name\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.name}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                        helperText={formik.touched.name && formik.errors.name}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            \r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"departmentId\" \r\n                                        id=\"departmentId\" \r\n                                        placeholder=\"Department\"\r\n                                        label=\"Department\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.departmentId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.departmentId && Boolean(formik.errors.departmentId)}\r\n                                        helperText={formik.touched.departmentId && formik.errors.departmentId}\r\n                                        >\r\n                                        {department.map(data => (\r\n                                           <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem> \r\n                                        ))}\r\n                                    </TextField>\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                        {/* <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"school\" \r\n                                        id=\"school\" \r\n                                        placeholder=\"School\"\r\n                                        label=\"School\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.school}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.school && Boolean(formik.errors.school)}\r\n                                        helperText={formik.touched.school && formik.errors.school}\r\n                                    >\r\n                                        <MenuItem value=\"HODHOD\">Computer Science</MenuItem>\r\n                                    </TextField>\r\n                                    </div>\r\n                            </Col>\r\n                        </Row> */}\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}> {\r\n                        isSubmit ? \"Submitting...\" : \"Submit\"\r\n                    } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default NewProgram","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport * as Yup from 'yup';\r\nimport {useState, useEffect} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {getInstitutionId, getWebUserId} from '../../../utils/Functions';\r\nimport {editProgram, getDepartment} from '../../../services/institutionAdminServices';\r\n\r\nconst EditProgram = (props) => {\r\n    const {data} = props\r\n\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\") \r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n    const [department, setDepartment] = useState([])\r\n    const institutionId = getInstitutionId()\r\n    const userId = getWebUserId()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            const res = await getDepartment(institutionId)\r\n            const data = res.data\r\n            setDepartment(data)\r\n        } \r\n        fetchData()\r\n    }, [institutionId])\r\n\r\n\r\n    \r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try {\r\n            const res = await editProgram(data.id, data.name, data.institutionId, data.departmentId, data.createdBy)\r\n            if (res.status === 200 || res.status === 204){\r\n                setIsSubmit(false)\r\n                setAlertType(\"success\")\r\n                setMessage(\"Program Edited Successfully\")\r\n                setShowAlert(true)\r\n                props.setContentLength(props.contentLength + 1)\r\n            }\r\n            else{\r\n                setIsSubmit(false)\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Failed to Edit Program\")\r\n                setShowAlert(true)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setIsSubmit(false)\r\n            setAlertType(\"danger\")\r\n            setMessage(err.message)\r\n            setShowAlert(true)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        id: data.id,\r\n        name: data.name,\r\n        institutionId: data.institutionId,\r\n        departmentId: data.departmentId,\r\n        createdBy: userId\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Program Name is Required\"),\r\n        departmentId: Yup.string().required(\"Department is Required \")\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Add New Program\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"name\" \r\n                                        id=\"name\" \r\n                                        label=\"Program Name\" \r\n                                        margin=\"normal\"\r\n                                        placeholder=\"Program Name\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.name}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                        helperText={formik.touched.name && formik.errors.name}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            \r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"departmentId\" \r\n                                        id=\"departmentId\" \r\n                                        placeholder=\"Department\"\r\n                                        label=\"Department\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.departmentId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.departmentId && Boolean(formik.errors.departmentId)}\r\n                                        helperText={formik.touched.departmentId && formik.errors.departmentId}\r\n                                        >\r\n                                        {department.map(data => (\r\n                                           <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem> \r\n                                        ))}\r\n                                    </TextField>\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                        {/* <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"school\" \r\n                                        id=\"school\" \r\n                                        placeholder=\"School\"\r\n                                        label=\"School\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.school}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.school && Boolean(formik.errors.school)}\r\n                                        helperText={formik.touched.school && formik.errors.school}\r\n                                    >\r\n                                        <MenuItem value=\"HODHOD\">Computer Science</MenuItem>\r\n                                    </TextField>\r\n                                    </div>\r\n                            </Col>\r\n                        </Row> */}\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}> {\r\n                        isSubmit ? \"Submitting...\" : \"Submit\"\r\n                    } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default EditProgram","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {deleteProgram} from '../../../services/institutionAdminServices';\r\n\r\nconst DeleteProgram = (props) => {\r\n    const {data} = props\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const[isSubmit, setIsSubmit] = useState(false)\r\n\r\n    \r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await deleteProgram(data.id)\r\n            if (res.status === 200 || res.status === 204){\r\n                setAlertType(\"success\")\r\n                setMessage(\"Program Deleted Successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength - 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Delete Program\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        id: data.id\r\n    }\r\n\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Delete Program\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                <div className=\"form-group\">\r\n                                    Are You Sure you want to Delete?\r\n                                </div> \r\n                            </Col>\r\n                        </Row>  \r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}>{isSubmit ? \"Deleting...\" : \"Delete\" } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default DeleteProgram","import Dashboardframe from './subcomponent/Dashboardframe';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Container, Row, Col, Table} from 'react-bootstrap';\r\nimport {useState, useEffect} from 'react';\r\nimport NewProgram from './subcomponent/NewProgram';\r\nimport EditProgram from './subcomponent/EditProgram';\r\nimport DeleteProgram from './subcomponent/DeleteProgram';\r\nimport PaginationComponent from './subcomponent/PaginationComponent';\r\nimport ContentLoader from '../components/ContentLoader';\r\nimport {getProgram} from '../../services/institutionAdminServices';\r\nimport {getInstitutionId, search, tableIndex} from '../../utils/Functions';\r\n\r\nconst ProgramManagement = () => {\r\n    const [addNew, setAddNew] = useState(false)\r\n    const [addEdit, setAddEdit] = useState(false)\r\n    const [addDelete, setAddDelete] = useState(false)\r\n    const [programData, setProgramData] = useState([])\r\n    const [programEditData, setProgramEditData] = useState([])\r\n    const institutionId = getInstitutionId()\r\n    \r\n    const [slicedData, setSlicedData] = useState([])\r\n    const [searchData, setSearchData] = useState([])\r\n\r\n    const [offset, setOffset] = useState(0)\r\n    const [perPage, setPerPage] = useState(5)\r\n    const [pageCount, setPageCount] = useState(0)\r\n    const [contentLength, setContentLength] = useState(0)\r\n    const [isLoading, setIsLoading] = useState(0)\r\n    const [realIndex, setRealIndex] = useState(1)\r\n\r\n    const handleAddNew = () => {\r\n        setAddNew(true)\r\n    }\r\n\r\n    const handleSearch = (array, searchText) => {\r\n        if (searchText === ''){\r\n            setProgramData(slicedData)\r\n        }\r\n        else{\r\n            setProgramData(search(array, searchText, 'name'))\r\n        } \r\n    }\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        const fetchData = async() => {\r\n            const res = await getProgram(institutionId)\r\n            const data = res.data\r\n            const slicedData = data.slice(offset * perPage, offset + perPage)\r\n            setSlicedData(slicedData)\r\n            setProgramData(slicedData)\r\n            setSearchData(data)\r\n            setContentLength(data.length)\r\n            setPageCount(Math.ceil(data.length / perPage))\r\n            setIsLoading(false)\r\n        } \r\n        fetchData()\r\n    }, [offset, perPage, contentLength, institutionId])\r\n\r\n    const handlePageClick = (e) => {\r\n        const selectedPage = e.selected;\r\n        setRealIndex(offset * perPage + 1)\r\n        setOffset(selectedPage)\r\n    }\r\n\r\n    return (\r\n        <Dashboardframe title=\"Admin\" subTitle=\"Program Management\">\r\n            <Helmet>\r\n                <title>Program Management | iEduCare</title>\r\n            </Helmet>\r\n            <NewProgram show={addNew} onHide={() => setAddNew(false)} contentLength={contentLength} setContentLength={setContentLength}/>\r\n            <EditProgram show={addEdit} onHide={() => setAddEdit(false)} contentLength={contentLength} setContentLength={setContentLength} data={programEditData}/>\r\n            <DeleteProgram show={addDelete} onHide={() => setAddDelete(false)} contentLength={contentLength} setContentLength={setContentLength} data={programEditData}/>\r\n            {isLoading ? \r\n            <ContentLoader />\r\n            :\r\n            <div className=\"content-page\">\r\n                <div className=\"session-wrapper\">\r\n                    <Container>\r\n                        <div className=\"session-title\">Program Management</div>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <button className=\"addnew-btn\" onClick={handleAddNew}> <span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span>  Add New</button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"table-header\">\r\n                                    <div className=\"entries\">\r\n                                        <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                                        <div className=\"entries-input\">\r\n                                            <select className=\"entries-box\" id=\"entries\" onChange={(e) => setPerPage(e.target.value)}>\r\n                                                {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                                    <option value={value} key={value}>{value}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </div>\r\n                                        <div className=\"entries-label\"> entries </div>\r\n                                    </div>\r\n                                    <div className=\"search\">\r\n                                        <label htmlFor=\"search\" className=\"search-label\">Filter: </label>\r\n                                        <input type=\"search\" className=\"search-box\" id=\"search\" onChange={(event) => handleSearch(searchData, event.target.value)}/>\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <div className=\"session-table\">\r\n                                    <Table bordered hover responsive>\r\n                                        <thead>\r\n                                            <tr>\r\n                                            <th>S/N</th>\r\n                                            <th>Program Name</th>\r\n                                            <th>Department</th>\r\n                                            <th>Faculty</th>\r\n                                            <th>School</th>\r\n                                            <th>Action</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                        {programData.map((data, index) => (\r\n                                                <tr key={data.id}>\r\n                                                    <td>{tableIndex(index, realIndex)}</td>\r\n                                                    <td>{data.name}</td>\r\n                                                    <td>{data.headId}</td>\r\n                                                    <td>{data.facultyId}</td>\r\n                                                    <td>{data.schoolId}</td>\r\n                                                    <td>\r\n                                                    <span className=\"btns\">\r\n                                                        <span\r\n                                                            onClick={() => {\r\n                                                                setProgramEditData(data)\r\n                                                                setAddEdit(true)\r\n                                                            }}\r\n                                                        >\r\n                                                            <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                        </span>\r\n                                                        <span\r\n                                                            onClick={() => {\r\n                                                                setProgramEditData(data)\r\n                                                                setAddDelete(true)\r\n                                                            }}\r\n                                                        >\r\n                                                            <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                        </span>\r\n                                                    </span>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            ))}\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"pagination-section\">\r\n                                    <div className=\"page-entry\">\r\n                                    Showing {offset * perPage + 1} to {offset + perPage} of {contentLength} entries\r\n                                    </div>\r\n                                    <div className=\"page-nav\">\r\n                                        <PaginationComponent \r\n                                            pageCount={pageCount} \r\n                                            handlePageClick={handlePageClick} \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n            }\r\n        </Dashboardframe>\r\n    )\r\n}\r\n\r\nexport default ProgramManagement\r\n","import Dashboardframe from './subcomponent/Dashboardframe';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Container, Row, Col, Table} from 'react-bootstrap';\r\nimport {useState} from 'react';\r\nimport PaginationComponent from './subcomponent/PaginationComponent';\r\n\r\nconst CourseManagement = () => {\r\n    const [addNew, setAddNew] = useState(false)\r\n\r\n    const handleAddNew = () => {\r\n        setAddNew(true)\r\n    }\r\n\r\n    return (\r\n        <Dashboardframe title=\"Admin\" subTitle=\"Course Management\">\r\n            <Helmet>\r\n                <title>Course Management | iEduCare</title>\r\n            </Helmet>\r\n            <div className=\"content-page\">\r\n                <div className=\"session-wrapper\">\r\n                    <Container>\r\n                        <div className=\"session-title\">Course Management</div>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <button className=\"addnew-btn\" onClick={handleAddNew}> <span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span>  Add New</button>\r\n                                <button className=\"importExport-btn\"> <span className=\"iconify\" data-icon=\"uil:import\" data-inline=\"false\"></span>  Import Users</button>\r\n                                <button className=\"importExport-btn\"> <span className=\"iconify\" data-icon=\"uil:export\" data-inline=\"false\"></span>  Export Users</button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"table-header\">\r\n                                    <div className=\"entries\">\r\n                                        <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                                        <div className=\"entries-input\">\r\n                                            <select className=\"entries-box\" id=\"entries\">\r\n                                                {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                                    <option value={value} key={value}>{value}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </div>\r\n                                        <div className=\"entries-label\"> entries </div>\r\n                                    </div>\r\n                                    <div className=\"search\">\r\n                                        <label htmlFor=\"search\" className=\"search-label\">Filter: </label>\r\n                                        <input type=\"search\" className=\"search-box\" id=\"search\" />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <div className=\"session-table\">\r\n                                    <Table bordered hover responsive>\r\n                                        <thead>\r\n                                            <tr>\r\n                                            <th>S/N</th>\r\n                                            <th>Course Name</th>\r\n                                            <th>Course Code</th>\r\n                                            <th>Program</th>\r\n                                            <th>School</th>\r\n                                            <th>Action</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                            <td>1</td>\r\n                                            <td>Pure Mathematics</td>\r\n                                            <td>MAT 101</td>\r\n                                            <td>Computer Studies</td>\r\n                                            <td>School of Technology</td>\r\n                                            <td>\r\n                                                <span className=\"btns\">\r\n                                                    <span>\r\n                                                        <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                            <td>2</td>\r\n                                            <td>General Studies</td>\r\n                                            <td>GST 101</td>\r\n                                            <td>Statistics</td>\r\n                                            <td>School of Statistics</td>\r\n                                            <td>\r\n                                                <span className=\"btns\">\r\n                                                    <span>\r\n                                                        <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"pagination-section\">\r\n                                    <div className=\"page-entry\">\r\n                                        Showing 1 to 2 of 2 entries\r\n                                    </div>\r\n                                    <div className=\"page-nav\">\r\n                                        <PaginationComponent />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n        </Dashboardframe>\r\n    )\r\n}\r\n\r\nexport default CourseManagement\r\n","import {Modal, Container, Row, Col} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport * as Yup from 'yup';\r\nimport {useState, useEffect, useRef} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {getInstitutionId, getWebUserId} from '../../../utils/Functions';\r\nimport {GetCommonData, getLGA, getState} from '../../../services/commonServices';\r\nimport {getSchool, getFaculty, getDepartment, getProgram} from '../../../services/institutionAdminServices';\r\nimport { MenuItem, makeStyles, Button, InputAdornment } from '@material-ui/core';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\n\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        height: 40\r\n    }\r\n})\r\n\r\nconst NewStudent = (props) => {\r\n\r\n    const handleFileInput = useRef()\r\n\r\n    const handleClick = (event) => {\r\n        handleFileInput.current.click();\r\n    }\r\n\r\n    const classes = useStyles()\r\n\r\n    // Popup Alert State\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n\r\n    //Title data\r\n    const [title, setTitle] = useState([])\r\n    const [gender, setGender] = useState([])\r\n    const [maritalStatus, setMaritalStatus] = useState([])\r\n    const [religion, setReligion] = useState([])\r\n    const [country, setCountry] = useState([])\r\n    const [state, setState] = useState([])\r\n    const [lga, setLga] = useState([])\r\n\r\n    //School data State\r\n    const [school, setSchool] = useState([])\r\n    const [faculty, setFaculty] = useState([])\r\n    const [department, setDepartment] = useState([])\r\n    const [program, setProgram] = useState([])\r\n\r\n    //Submit State\r\n    const[isSubmit, setIsSubmit] = useState(false)\r\n\r\n    //Get Institution Id and Current User from Local Storage\r\n    const institutionId = getInstitutionId()\r\n    const userId = getWebUserId()\r\n\r\n    //Fetch Data on Render\r\n    // useEffect(() => {\r\n    //     const fetchData = async() => {\r\n    //         try{\r\n               \r\n    //         }\r\n    //         catch(err){\r\n    //             console.log(err.message)\r\n    //         }\r\n    //     }\r\n    //     fetchData()\r\n    // }, [institutionId])\r\n\r\n    //Fetch Title\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await GetCommonData()\r\n                setTitle(res.data.titles)\r\n                setGender(res.data.genders)\r\n                setMaritalStatus(res.data.maritalStatus)\r\n                setReligion(res.data.religions)\r\n                setCountry(res.data.countries)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    })\r\n    \r\n    //Submit New Semester Function\r\n    const onSubmit = async(data) => {\r\n        console.log(data)\r\n    //     setIsSubmit(true)\r\n    //     try{\r\n    //         const res = await createSemester(data)\r\n    //         if (res.status === 200 || res.status === 204){\r\n    //             setAlertType(\"success\")\r\n    //             setMessage(\"New Semester Added Successfully\")\r\n    //             setShowAlert(true)\r\n    //             setIsSubmit(false)\r\n    //         }\r\n    //         else{\r\n    //             setAlertType(\"danger\")\r\n    //             setMessage(\"Fail to Create Semester\")\r\n    //             setShowAlert(true)\r\n    //             setIsSubmit(false)\r\n    //         }\r\n    //     }\r\n    //     catch(err){\r\n    //         console.log(err.message)\r\n    //         setAlertType(\"danger\")\r\n    //         setMessage(\"Network Error\")\r\n    //         setShowAlert(true)\r\n    //         setIsSubmit(false)\r\n    //     }\r\n    }\r\n\r\n    //For Initial Value\r\n    const initialValues = {\r\n        titleId: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        otherName: '',\r\n        genderId: '',\r\n        maritalStatusId: '',\r\n        institutionId: institutionId,\r\n        email: '',\r\n        phoneNumber: '',\r\n        emergencyContact: '',\r\n        dateOfBirth: '',\r\n        religion: '',\r\n        maidenName: '',\r\n        bloodGroup: '',\r\n        genotype: '',\r\n        weight: '',\r\n        height: '',\r\n        createdBy: userId,\r\n        countryId: '',\r\n        stateId: '',\r\n        lgaId: '',\r\n        residentAddress: '',\r\n        matricNo: '',\r\n        schoolId: '',\r\n        facultyId: '',\r\n        departmentId: '',\r\n        programId: '',\r\n        photo: ''\r\n    }\r\n\r\n    //Form Validation Schema\r\n    const validationSchema = Yup.object({\r\n        titleId: Yup.string().required(\"Title is Required\"),\r\n        firstName: Yup.string().required(\"First Name is Required\"),\r\n        lastName: Yup.string().required(\"Last Name is Required\"),\r\n        genderId: Yup.string().required(\"Gender is Required\"),\r\n        maritalStatusId: Yup.string().required(\"Marital Status is Required\"),\r\n        email: Yup.string().email(\"Valid Email is Required\").required(\"Email Address is Required\"),\r\n        phoneNumber: Yup.string().min(10).required(\"Phone Number is Required\"),\r\n        emergencyContact: Yup.string().min(10).required(\"Emergency Contact is Required\"),\r\n        dateOfBirth: Yup.string().required(\"Date of Birth is Required\"),\r\n        religion: Yup.string().min(10).required(\"Religion is Required\"),\r\n        maidenName: Yup.string().required(\"Maiden Name is Required\"),\r\n        bloodGroup: Yup.string().min(10).required(\"Blood Group is Required\"),\r\n        genotype: Yup.string().required(\"Genotype is Required\"),\r\n        weight: Yup.string().min(10).required(\"Weight is Required\"),\r\n        height: Yup.string().required(\"Height is Required\"),\r\n        countryId: Yup.string().required(\"Country is required\"),\r\n        stateId: Yup.string().required(\"State is required\"),\r\n        lgaId: Yup.string().required(\"LGA is required\"),\r\n        residentAddress: Yup.string().required(\"Resident Address is required\"),\r\n        matricNo: Yup.string().required(\"Matric No is required\"),\r\n        schoolId: Yup.string().required(\"School is required\"),\r\n        facultyId: Yup.string().required(\"Faculty is required\"),\r\n        departmentId: Yup.string().required(\"Department is required\"),\r\n        programId: Yup.string().required(\"Program is required\"),\r\n        photo: ''\r\n    })\r\n\r\n    //Formik Hook\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getState(formik.values.countyId)\r\n                setState(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [formik.values.countyId])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getLGA(formik.values.stateId)\r\n                setLga(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [formik.values.stateId])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getSchool(institutionId)\r\n                setSchool(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [institutionId])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getFaculty(institutionId, formik.values.schoolId)\r\n                setFaculty(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [institutionId, formik.values.schoolId])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getDepartment(institutionId, formik.values.schoolId, formik.values.facultyId)\r\n                setDepartment(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [institutionId, formik.values.schoolId, formik.values.facultyId])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getProgram(institutionId, formik.values.departmentId)\r\n                setProgram(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [institutionId, formik.values.departmentId])\r\n\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"xl\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Student Details (Basic Information)\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={3}>\r\n                            <div className=\"form-group\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"titleId\" \r\n                                        id=\"titleId\" \r\n                                        label=\"Title\" \r\n                                        placeholder=\"titleId\"\r\n                                        margin=\"normal\"\r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.titleId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.titleId && Boolean(formik.errors.titleId)}\r\n                                        helperText={formik.touched.titleId && formik.errors.titleId}\r\n                                    >\r\n                                        {title.map(data => (\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    className={classes.Input}\r\n                                    name=\"firstName\" \r\n                                    id=\"firstName\" \r\n                                    label=\"First Name\" \r\n                                    placeholder=\"First Name\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.firstName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.firstName && Boolean(formik.errors.firstName)}\r\n                                    helperText={formik.touched.firstName && formik.errors.firstName}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    className={classes.Input}\r\n                                    name=\"lastName\" \r\n                                    id=\"lastName\" \r\n                                    label=\"Last Name\" \r\n                                    placeholder=\"Last Name\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.lastName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.lastName && Boolean(formik.errors.lastName)}\r\n                                    helperText={formik.touched.lastName && formik.errors.lastName}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    className={classes.Input}\r\n                                    name=\"otherName\" \r\n                                    id=\"otherName\" \r\n                                    label=\"Other Name\" \r\n                                    placeholder=\"Other Name\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.otherName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.otherName && Boolean(formik.errors.otherName)}\r\n                                    helperText={formik.touched.otherName && formik.errors.otherName}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                            <div className=\"form-group\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"genderId\" \r\n                                        id=\"genderId\" \r\n                                        label=\"Gender\" \r\n                                        placeholder=\"Gender\"\r\n                                        margin=\"normal\"\r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.genderId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.genderId && Boolean(formik.errors.genderId)}\r\n                                        helperText={formik.touched.genderId && formik.errors.genderId}\r\n                                    >\r\n                                        {gender.map(data => (\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    select\r\n                                    name=\"maritalStatusId\" \r\n                                    id=\"maritalStatusId\" \r\n                                    label=\"Marital Status\" \r\n                                    placeholder=\"MaritalStatus\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.maritalStatusId}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.maritalStatusId && Boolean(formik.errors.maritalStatusId)}\r\n                                    helperText={formik.touched.maritalStatusId && formik.errors.maritalStatusId}\r\n                                >\r\n                                    {maritalStatus.map(data => (\r\n                                        <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    className={classes.Input}\r\n                                    name=\"email\" \r\n                                    id=\"email\" \r\n                                    label=\"Email\" \r\n                                    placeholder=\"Email\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.email}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.email && Boolean(formik.errors.email)}\r\n                                    helperText={formik.touched.email && formik.errors.email}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    className={classes.Input}\r\n                                    name=\"phoneNumber\" \r\n                                    id=\"phoneNumber\" \r\n                                    label=\"Phone Number\" \r\n                                    placeholder=\"Phone Number\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.phoneNumber}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.phoneNumber && Boolean(formik.errors.phoneNumber)}\r\n                                    helperText={formik.touched.phoneNumber && formik.errors.phoneNumber}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <div className=\"form-group\">\r\n                                    <TextField \r\n                                        className={classes.Input}\r\n                                        name=\"emergencyContact\" \r\n                                        id=\"emergencyContact\" \r\n                                        label=\"Emergency Contact\" \r\n                                        placeholder=\"Emergency Contact\"\r\n                                        margin=\"normal\"\r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        inputProps={{\r\n                                            style: {\r\n                                                height: 40\r\n                                            }\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.emergencyContact}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.emergencyContact && Boolean(formik.errors.emergencyContact)}\r\n                                        helperText={formik.touched.emergencyContact && formik.errors.emergencyContact}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    type=\"date\"\r\n                                    name=\"dateOfBirth\" \r\n                                    id=\"dateOfBirth\" \r\n                                    label=\"Date of Birth\" \r\n                                    placeholder=\"Date of Birth\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.dateOfBirth}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.dateOfBirth && Boolean(formik.errors.dateOfBirth)}\r\n                                    helperText={formik.touched.dateOfBirth && formik.errors.dateOfBirth}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    select\r\n                                    size=\"small\"\r\n                                    name=\"religion\" \r\n                                    id=\"religion\" \r\n                                    label=\"Religion\" \r\n                                    placeholder=\"Religion\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.religion}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.religion && Boolean(formik.errors.religion)}\r\n                                    helperText={formik.touched.religion && formik.errors.religion}\r\n                                >\r\n                                    {religion.map(data => (\r\n                                        <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    className={classes.Input}\r\n                                    name=\"maidenName\" \r\n                                    id=\"maidenName\" \r\n                                    label=\"Maiden Name\" \r\n                                    placeholder=\"Maiden Name\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.maidenName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.maidenName && Boolean(formik.errors.maidenName)}\r\n                                    helperText={formik.touched.maidenName && formik.errors.maidenName}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                            <div className=\"form-group\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"bloodGroup\" \r\n                                        id=\"bloodGroup\" \r\n                                        label=\"Blood Group\" \r\n                                        placeholder=\"Blood Group\"\r\n                                        margin=\"normal\"\r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.bloodGroup}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.bloodGroup && Boolean(formik.errors.bloodGroup)}\r\n                                        helperText={formik.touched.bloodGroup && formik.errors.bloodGroup}\r\n                                    >\r\n                                        <MenuItem value=\"\">A+</MenuItem>\r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    select\r\n                                    name=\"genotype\" \r\n                                    id=\"genotype\" \r\n                                    label=\"Genotype\" \r\n                                    placeholder=\"Genotype\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.genotype}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.genotype && Boolean(formik.errors.genotype)}\r\n                                    helperText={formik.touched.genotype && formik.errors.genotype}\r\n                                >\r\n                                    <MenuItem value=\"\">O</MenuItem>\r\n                                </TextField>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    className={classes.Input}\r\n                                    name=\"weight\" \r\n                                    id=\"weight\" \r\n                                    label=\"Weight(KG)\" \r\n                                    placeholder=\"Weight(KG)\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.weight}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.weight && Boolean(formik.errors.weight)}\r\n                                    helperText={formik.touched.weight && formik.errors.weight}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    className={classes.Input}\r\n                                    name=\"height\" \r\n                                    id=\"height\" \r\n                                    label=\"Height\" \r\n                                    placeholder=\"Height\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.height}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.height && Boolean(formik.errors.height)}\r\n                                    helperText={formik.touched.height && formik.errors.height}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <div className=\"form-group\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"countryId\" \r\n                                        id=\"countryId\" \r\n                                        label=\"Country\" \r\n                                        placeholder=\"Country\"\r\n                                        margin=\"normal\"\r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.countryId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.countryId && Boolean(formik.errors.countryId)}\r\n                                        helperText={formik.touched.countryId && formik.errors.countryId}\r\n                                    >\r\n                                        {country.map(data => (\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    select\r\n                                    name=\"stateId\" \r\n                                    id=\"stateId\" \r\n                                    label=\"State of Origin\" \r\n                                    placeholder=\"State of Origin\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.stateId}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.stateId && Boolean(formik.errors.stateId)}\r\n                                    helperText={formik.touched.stateId && formik.errors.stateId}\r\n                                >\r\n                                    {state.map(data => (\r\n                                        <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                            <div className=\"form-group\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"lga\" \r\n                                        id=\"lga\" \r\n                                        label=\"LGA\" \r\n                                        placeholder=\"LGA\"\r\n                                        margin=\"normal\"\r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.lga}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.lga && Boolean(formik.errors.lga)}\r\n                                        helperText={formik.touched.lga && formik.errors.lga}\r\n                                    >\r\n                                        {lga.map(data => (\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    className={classes.Input}\r\n                                    name=\"residentAddress\" \r\n                                    id=\"residentAddress\" \r\n                                    label=\"Resident Address\" \r\n                                    placeholder=\"Resident Address\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.residentAddress}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.residentAddress && Boolean(formik.errors.residentAddress)}\r\n                                    helperText={formik.touched.residentAddress && formik.errors.residentAddress}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    className={classes.Input}\r\n                                    name=\"MatricNo\" \r\n                                    id=\"MatricNo\" \r\n                                    label=\"Matric No\" \r\n                                    placeholder=\"Matric No\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.MatricNo}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.MatricNo && Boolean(formik.errors.MatricNo)}\r\n                                    helperText={formik.touched.MatricNo && formik.errors.MatricNo}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <div className=\"form-group\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"schoolId\" \r\n                                        id=\"schoolId\" \r\n                                        label=\"School\" \r\n                                        placeholder=\"School\"\r\n                                        margin=\"normal\"\r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.schoolId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.schoolId && Boolean(formik.errors.schoolId)}\r\n                                        helperText={formik.touched.schoolId && formik.errors.schoolId}\r\n                                    >\r\n                                        {school.map(data => (\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    select\r\n                                    name=\"facultyId\" \r\n                                    id=\"facultyId\" \r\n                                    label=\"Faculty\" \r\n                                    placeholder=\"Faculty\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.facultyId}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.facultyId && Boolean(formik.errors.facultyId)}\r\n                                    helperText={formik.touched.facultyId && formik.errors.facultyId}\r\n                                >\r\n                                    {faculty.map(data => (\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                            <div className=\"form-group\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"departmentId\" \r\n                                        id=\"departmentId\" \r\n                                        label=\"Department\" \r\n                                        placeholder=\"Department\"\r\n                                        margin=\"normal\"\r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.departmentId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.departmentId && Boolean(formik.errors.departmentId)}\r\n                                        helperText={formik.touched.departmentId && formik.errors.departmentId}\r\n                                    >\r\n                                        {department.map(data => (\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                            <div className=\"form-group\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"program\" \r\n                                        id=\"program\" \r\n                                        label=\"Program of Study\" \r\n                                        placeholder=\"Program of Study\"\r\n                                        margin=\"normal\"\r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.program}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.program && Boolean(formik.errors.program)}\r\n                                        helperText={formik.touched.program && formik.errors.program}\r\n                                    >\r\n                                        {program.map(data => (\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    type=\"file\"\r\n                                    className={classes.Input}\r\n                                    name=\"photo\" \r\n                                    id=\"photo\" \r\n                                    label=\"Photo\" \r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputRef= {handleFileInput}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40,\r\n                                            visibility: \"hidden\"\r\n                                        },\r\n                                        accept:\"image/jpeg\", \r\n                                        multiple: true\r\n                                    }}\r\n                                    InputProps={{\r\n                                        startAdornment: (\r\n                                          <InputAdornment position=\"start\">\r\n                                            <CloudUploadIcon onClick={handleClick}/>\r\n                                          </InputAdornment>\r\n                                        ),\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <div className=\"uploadClass\" onClick={handleClick}>\r\n                                                    Drag and Drop a file here or click\r\n                                                </div>\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.photo}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.photo && Boolean(formik.errors.photo)}\r\n                                    helperText={formik.touched.photo && formik.errors.photo}\r\n                                />\r\n                            </Col>\r\n                        </Row>  \r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <button onClick={props.onHide} className=\"cancel-btn\">Close</button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}>{isSubmit ? \"Submitting\" : \"Submit\" }<span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default NewStudent","import Dashboardframe from './subcomponent/Dashboardframe';\r\nimport {Helmet} from 'react-helmet';\r\nimport NewStudent from './subcomponent/NewStudent';\r\nimport {Container, Row, Col, Table} from 'react-bootstrap';\r\nimport {useState} from 'react';\r\nimport PaginationComponent from './subcomponent/PaginationComponent';\r\n\r\n\r\nconst StudentManagement = () => {\r\n    const [addNew, setAddNew] = useState(false)\r\n\r\n    const handleAddNew = () => {\r\n        setAddNew(true)\r\n    }\r\n\r\n    return (\r\n        <Dashboardframe title=\"Admin\" subTitle=\"Student Directory\">\r\n            <Helmet>\r\n                <title>Student Directory | iEduCare</title>\r\n            </Helmet>\r\n            <NewStudent  \r\n                 show={addNew} \r\n                 onHide={() => setAddNew(false)}\r\n            />\r\n            <div className=\"content-page\">\r\n                <div className=\"session-wrapper\">\r\n                    <Container>\r\n                        <div className=\"session-title\">Student Directory</div>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <button className=\"addnew-btn\" onClick={handleAddNew}> <span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span>  Add New</button>\r\n                                <button className=\"importExport-btn\"> <span className=\"iconify\" data-icon=\"uil:import\" data-inline=\"false\"></span>  Import Users</button>\r\n                                <button className=\"importExport-btn\"> <span className=\"iconify\" data-icon=\"uil:export\" data-inline=\"false\"></span>  Export Users</button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"table-header\">\r\n                                    <div className=\"entries\">\r\n                                        <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                                        <div className=\"entries-input\">\r\n                                            <select className=\"entries-box\" id=\"entries\">\r\n                                                {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                                    <option value={value} key={value}>{value}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </div>\r\n                                        <div className=\"entries-label\"> entries </div>\r\n                                    </div>\r\n                                    <div className=\"search\">\r\n                                        <label htmlFor=\"search\" className=\"search-label\">Filter: </label>\r\n                                        <input type=\"search\" className=\"search-box\" id=\"search\" />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <div className=\"session-table\">\r\n                                    <Table bordered hover responsive>\r\n                                        <thead>\r\n                                            <tr>\r\n                                            <th> <input type=\"checkbox\" /> </th>\r\n                                            <th>S/N</th>\r\n                                            <th>Matric No</th>\r\n                                            <th>First Name</th>\r\n                                            <th>Middle Name</th>\r\n                                            <th>Last Name</th>\r\n                                            <th>Gender</th>\r\n                                            <th>School</th>\r\n                                            <th>Program of Study</th>\r\n                                            <th>Action</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                            <td><input type=\"checkbox\" /></td>\r\n                                            <td>1</td>\r\n                                            <td>UL-10010</td>\r\n                                            <td>Oluchi</td>\r\n                                            <td>Kelechi</td>\r\n                                            <td>Stephen</td>\r\n                                            <td>Female</td>\r\n                                            <td>School of Technology</td>\r\n                                            <td>Computer Science</td>\r\n                                            <td>\r\n                                                <span className=\"btns\">\r\n                                                    <span>\r\n                                                        <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                            <td><input type=\"checkbox\" /></td>\r\n                                            <td>2</td>\r\n                                            <td>UL-10015</td>\r\n                                            <td>Gbenga</td>\r\n                                            <td>James</td>\r\n                                            <td>Olusegun</td>\r\n                                            <td>Male</td>\r\n                                            <td>School of Statistics</td>\r\n                                            <td>Statistics</td>\r\n                                            <td>\r\n                                                <span className=\"btns\">\r\n                                                    <span>\r\n                                                        <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"pagination-section\">\r\n                                    <div className=\"page-entry\">\r\n                                        Showing 1 to 2 of 2 entries\r\n                                    </div>\r\n                                    <div className=\"page-nav\">\r\n                                        <PaginationComponent />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n        </Dashboardframe>\r\n    )\r\n}\r\n\r\nexport default StudentManagement\r\n","import {Modal, Container, Row, Col} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport * as Yup from 'yup';\r\nimport {useState, useEffect, useRef} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {getInstitutionId, getWebUserId} from '../../../utils/Functions';\r\nimport {GetCommonData, getLGA, getState} from '../../../services/commonServices';\r\nimport {getSchool, getFaculty, getDepartment, getProgram} from '../../../services/institutionAdminServices';\r\nimport { MenuItem, makeStyles, Button, InputAdornment } from '@material-ui/core';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\n\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        height: 40\r\n    }\r\n})\r\n\r\nconst NewStaff = (props) => {\r\n\r\n    const handleFileInput = useRef()\r\n\r\n    const handleClick = (event) => {\r\n        handleFileInput.current.click();\r\n    }\r\n\r\n    const classes = useStyles()\r\n\r\n    // Popup Alert State\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n\r\n    //Title data\r\n    const [gender, setGender] = useState([])\r\n    const [maritalStatus, setMaritalStatus] = useState([])\r\n\r\n    //School data State\r\n    const [school, setSchool] = useState([])\r\n    const [faculty, setFaculty] = useState([])\r\n    const [department, setDepartment] = useState([])\r\n    const [program, setProgram] = useState([])\r\n\r\n    //Submit State\r\n    const[isSubmit, setIsSubmit] = useState(false)\r\n\r\n    //Get Institution Id and Current User from Local Storage\r\n    const institutionId = getInstitutionId()\r\n    const userId = getWebUserId()\r\n\r\n    //Fetch Data on Render\r\n    // useEffect(() => {\r\n    //     const fetchData = async() => {\r\n    //         try{\r\n               \r\n    //         }\r\n    //         catch(err){\r\n    //             console.log(err.message)\r\n    //         }\r\n    //     }\r\n    //     fetchData()\r\n    // }, [institutionId])\r\n\r\n    //Fetch Title\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await GetCommonData()\r\n                setGender(res.data.genders)\r\n                setMaritalStatus(res.data.maritalStatus)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    })\r\n    \r\n    //Submit New Semester Function\r\n    const onSubmit = async(data) => {\r\n        console.log(data)\r\n    //     setIsSubmit(true)\r\n    //     try{\r\n    //         const res = await createSemester(data)\r\n    //         if (res.status === 200 || res.status === 204){\r\n    //             setAlertType(\"success\")\r\n    //             setMessage(\"New Semester Added Successfully\")\r\n    //             setShowAlert(true)\r\n    //             setIsSubmit(false)\r\n    //         }\r\n    //         else{\r\n    //             setAlertType(\"danger\")\r\n    //             setMessage(\"Fail to Create Semester\")\r\n    //             setShowAlert(true)\r\n    //             setIsSubmit(false)\r\n    //         }\r\n    //     }\r\n    //     catch(err){\r\n    //         console.log(err.message)\r\n    //         setAlertType(\"danger\")\r\n    //         setMessage(\"Network Error\")\r\n    //         setShowAlert(true)\r\n    //         setIsSubmit(false)\r\n    //     }\r\n    }\r\n\r\n    //For Initial Value\r\n    const initialValues = {\r\n        staffId: '',\r\n        role: '',\r\n        designation: '',\r\n        department: '',\r\n        genderId: '',\r\n        maritalStatusId: '',\r\n        institutionId: institutionId,\r\n        email: '',\r\n        phoneNumber: '',\r\n        emergencyContact: '',\r\n        dateOfBirth: '',\r\n        employmentStartDate: '',\r\n        contactAddress: '',\r\n        createdBy: userId,\r\n        photo: ''\r\n    }\r\n\r\n    //Form Validation Schema\r\n    const validationSchema = Yup.object({\r\n        staffId: Yup.string().required(\"Staff ID is Required\"),\r\n        role: Yup.string().required(\"Role is Required\"),\r\n        designation: Yup.string().required(\"Designation is Required\"),\r\n        department: Yup.string().required(\"Department is Required\"),\r\n        genderId: Yup.string().required(\"Gender is Required\"),\r\n        firstName: Yup.string().required(\"First Name is Required\"),\r\n        lastName: Yup.string().required(\"Last Name is Required\"),\r\n        maritalStatusId: Yup.string().required(\"Marital Status is Required\"),\r\n        email: Yup.string().email(\"Valid Email is Required\").required(\"Email Address is Required\"),\r\n        phoneNumber: Yup.string().min(10).required(\"Phone Number is Required\"),\r\n        emergencyContact: Yup.string().min(10).required(\"Emergency Contact is Required\"),\r\n        dateOfBirth: Yup.string().required(\"Date of Birth is Required\"),\r\n        employmentStartDate: Yup.string().required(\"Employment Start Date is Required\"),\r\n        contactAddress: Yup.string().required(\"Contact Address is Required\"),\r\n        photo: ''\r\n    })\r\n\r\n    //Formik Hook\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getSchool(institutionId)\r\n                setSchool(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [institutionId])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getFaculty(institutionId, formik.values.schoolId)\r\n                setFaculty(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [institutionId, formik.values.schoolId])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getDepartment(institutionId, formik.values.schoolId, formik.values.facultyId)\r\n                setDepartment(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [institutionId, formik.values.schoolId, formik.values.facultyId])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            try{\r\n                const res = await getProgram(institutionId, formik.values.departmentId)\r\n                setProgram(res.data)\r\n            }\r\n            catch(err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [institutionId, formik.values.departmentId])\r\n\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"xl\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Staff Details (Basic Information)\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={3}>\r\n                            <div className=\"form-group\">\r\n                                    <TextField \r\n                                        name=\"staffId\" \r\n                                        id=\"staffId\" \r\n                                        label=\"Staff ID\" \r\n                                        placeholder=\"Staff ID\"\r\n                                        margin=\"normal\"\r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        inputProps={{\r\n                                            style: {\r\n                                                height: 40\r\n                                            }\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.staffId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.staffId && Boolean(formik.errors.staffId)}\r\n                                        helperText={formik.touched.staffId && formik.errors.staffId}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    select\r\n                                    name=\"role\" \r\n                                    id=\"role\" \r\n                                    label=\"Role\" \r\n                                    placeholder=\"Role\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.role}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.role && Boolean(formik.errors.role)}\r\n                                    helperText={formik.touched.role && formik.errors.role}\r\n                                >\r\n                                    <MenuItem>Role</MenuItem>\r\n                                </TextField>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    select\r\n                                    name=\"designation\" \r\n                                    id=\"designation\" \r\n                                    label=\"Designation\" \r\n                                    placeholder=\"Designation\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.designation}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.designation && Boolean(formik.errors.designation)}\r\n                                    helperText={formik.touched.designation && formik.errors.designation}\r\n                                >\r\n                                    <MenuItem>Lecturer</MenuItem>\r\n                                </TextField>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    select\r\n                                    name=\"department\" \r\n                                    id=\"department\" \r\n                                    label=\"Department\" \r\n                                    placeholder=\"Department\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.department}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.department && Boolean(formik.errors.department)}\r\n                                    helperText={formik.touched.department && formik.errors.department}\r\n                                >\r\n                                    <MenuItem>Department of Law</MenuItem>\r\n                                </TextField>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                            <div className=\"form-group\">\r\n                                    <TextField \r\n                                        select\r\n                                        name=\"genderId\" \r\n                                        id=\"genderId\" \r\n                                        label=\"Gender\" \r\n                                        placeholder=\"Gender\"\r\n                                        margin=\"normal\"\r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.genderId}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.genderId && Boolean(formik.errors.genderId)}\r\n                                        helperText={formik.touched.genderId && formik.errors.genderId}\r\n                                    >\r\n                                        {gender.map(data => (\r\n                                            <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    className={classes.Input}\r\n                                    name=\"firstName\" \r\n                                    id=\"firstName\" \r\n                                    label=\"First Name\" \r\n                                    placeholder=\"First Name\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.firstName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.firstName && Boolean(formik.errors.firstName)}\r\n                                    helperText={formik.touched.firstName && formik.errors.firstName}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    className={classes.Input}\r\n                                    name=\"lastName\" \r\n                                    id=\"lastName\" \r\n                                    label=\"Last Name\" \r\n                                    placeholder=\"Last Name\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.lastName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.lastName && Boolean(formik.errors.lastName)}\r\n                                    helperText={formik.touched.lastName && formik.errors.lastName}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    className={classes.Input}\r\n                                    name=\"otherName\" \r\n                                    id=\"otherName\" \r\n                                    label=\"Other Name\" \r\n                                    placeholder=\"Other Name\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.otherName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.otherName && Boolean(formik.errors.otherName)}\r\n                                    helperText={formik.touched.otherName && formik.errors.otherName}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    select\r\n                                    name=\"maritalStatusId\" \r\n                                    id=\"maritalStatusId\" \r\n                                    label=\"Marital Status\" \r\n                                    placeholder=\"MaritalStatus\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.maritalStatusId}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.maritalStatusId && Boolean(formik.errors.maritalStatusId)}\r\n                                    helperText={formik.touched.maritalStatusId && formik.errors.maritalStatusId}\r\n                                >\r\n                                    {maritalStatus.map(data => (\r\n                                        <MenuItem key={data.id} value={data.id}>{data.name}</MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    className={classes.Input}\r\n                                    name=\"email\" \r\n                                    id=\"email\" \r\n                                    label=\"Email\" \r\n                                    placeholder=\"Email\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.email}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.email && Boolean(formik.errors.email)}\r\n                                    helperText={formik.touched.email && formik.errors.email}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    className={classes.Input}\r\n                                    name=\"phoneNumber\" \r\n                                    id=\"phoneNumber\" \r\n                                    label=\"Phone Number\" \r\n                                    placeholder=\"Phone Number\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.phoneNumber}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.phoneNumber && Boolean(formik.errors.phoneNumber)}\r\n                                    helperText={formik.touched.phoneNumber && formik.errors.phoneNumber}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <div className=\"form-group\">\r\n                                    <TextField \r\n                                        className={classes.Input}\r\n                                        name=\"emergencyContact\" \r\n                                        id=\"emergencyContact\" \r\n                                        label=\"Emergency Contact\" \r\n                                        placeholder=\"Emergency Contact\"\r\n                                        margin=\"normal\"\r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        inputProps={{\r\n                                            style: {\r\n                                                height: 40\r\n                                            }\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.emergencyContact}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.emergencyContact && Boolean(formik.errors.emergencyContact)}\r\n                                        helperText={formik.touched.emergencyContact && formik.errors.emergencyContact}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    type=\"date\"\r\n                                    name=\"dateOfBirth\" \r\n                                    id=\"dateOfBirth\" \r\n                                    label=\"Date of Birth\" \r\n                                    placeholder=\"Date of Birth\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.dateOfBirth}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.dateOfBirth && Boolean(formik.errors.dateOfBirth)}\r\n                                    helperText={formik.touched.dateOfBirth && formik.errors.dateOfBirth}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    type=\"date\"\r\n                                    name=\"employmentStartDate\" \r\n                                    id=\"employmentStartDate\" \r\n                                    label=\"Employment Start Date\" \r\n                                    placeholder=\"Employment Start Date\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.employmentStartDate}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.employmentStartDate && Boolean(formik.errors.employmentStartDate)}\r\n                                    helperText={formik.touched.employmentStartDate && formik.errors.employmentStartDate}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={6}>\r\n                                <TextField \r\n                                    className={classes.Input}\r\n                                    name=\"contactAddress\" \r\n                                    id=\"contactAddress\" \r\n                                    label=\"Contact Address\" \r\n                                    placeholder=\"Contact Address\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40\r\n                                        }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.contactAddress}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.contactAddress && Boolean(formik.errors.contactAddress)}\r\n                                    helperText={formik.touched.contactAddress && formik.errors.contactAddress}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <TextField \r\n                                    type=\"file\"\r\n                                    className={classes.Input}\r\n                                    name=\"photo\" \r\n                                    id=\"photo\" \r\n                                    label=\"Photo\" \r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                    inputRef= {handleFileInput}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            height: 40,\r\n                                            visibility: \"hidden\"\r\n                                        },\r\n                                        accept:\"image/jpeg\", \r\n                                        multiple: true\r\n                                    }}\r\n                                    InputProps={{\r\n                                        startAdornment: (\r\n                                          <InputAdornment position=\"start\">\r\n                                            <CloudUploadIcon onClick={handleClick}/>\r\n                                          </InputAdornment>\r\n                                        ),\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <div className=\"uploadClass\" onClick={handleClick}>\r\n                                                    Drag and Drop a file here or click\r\n                                                </div>\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    value={formik.values.photo}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.photo && Boolean(formik.errors.photo)}\r\n                                    helperText={formik.touched.photo && formik.errors.photo}\r\n                                />\r\n                            </Col>\r\n                        </Row>  \r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <button onClick={props.onHide} className=\"cancel-btn\">Close</button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}>{isSubmit ? \"Submitting\" : \"Submit\" }<span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default NewStaff","import Dashboardframe from './subcomponent/Dashboardframe';\r\nimport {Helmet} from 'react-helmet';\r\nimport NewStaff from './subcomponent/NewStaff';\r\nimport {Container, Row, Col, Table} from 'react-bootstrap';\r\nimport {useState} from 'react';\r\nimport PaginationComponent from './subcomponent/PaginationComponent';\r\n\r\nconst StaffManagement = () => {\r\n    const [addNew, setAddNew] = useState(false)\r\n\r\n    const handleAddNew = () => {\r\n        setAddNew(true)\r\n    }\r\n\r\n    return (\r\n        <Dashboardframe title=\"Admin\" subTitle=\"Staff Management\">\r\n            <Helmet>\r\n                <title>Staff Management | iEduCare</title>\r\n            </Helmet>\r\n            <div className=\"content-page\">\r\n                <NewStaff  \r\n                    show={addNew} \r\n                    onHide={() => setAddNew(false)}\r\n                />\r\n                <div className=\"session-wrapper\">\r\n                    <Container>\r\n                        <div className=\"session-title\">Staff Management</div>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <button className=\"addnew-btn\" onClick={handleAddNew}> <span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span>  Add New</button>\r\n                                <button className=\"importExport-btn\"> <span className=\"iconify\" data-icon=\"uil:import\" data-inline=\"false\"></span>  Import Staff</button>\r\n                                <button className=\"importExport-btn\"> <span className=\"iconify\" data-icon=\"uil:export\" data-inline=\"false\"></span>  Export Staff</button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"table-header\">\r\n                                    <div className=\"entries\">\r\n                                        <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                                        <div className=\"entries-input\">\r\n                                            <select className=\"entries-box\" id=\"entries\">\r\n                                                {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                                    <option value={value} key={value}>{value}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </div>\r\n                                        <div className=\"entries-label\"> entries </div>\r\n                                    </div>\r\n                                    <div className=\"search\">\r\n                                        <label htmlFor=\"search\" className=\"search-label\">Filter: </label>\r\n                                        <input type=\"search\" className=\"search-box\" id=\"search\" />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <div className=\"session-table\">\r\n                                    <Table bordered hover responsive>\r\n                                        <thead>\r\n                                            <tr>\r\n                                            <th> <input type=\"checkbox\" /> </th>\r\n                                            <th>S/N</th>\r\n                                            <th>Staff ID</th>\r\n                                            <th>First Name</th>\r\n                                            <th>Middle Name</th>\r\n                                            <th>Last Name</th>\r\n                                            <th>Gender</th>\r\n                                            <th>Designation</th>\r\n                                            <th>Department</th>\r\n                                            <th>Action</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                            <td><input type=\"checkbox\" /></td>\r\n                                            <td>1</td>\r\n                                            <td>UL-10010</td>\r\n                                            <td>Oladapo</td>\r\n                                            <td>Frank</td>\r\n                                            <td>Babajide</td>\r\n                                            <td>Male</td>\r\n                                            <td>H.O.D</td>\r\n                                            <td>Computing and IT</td>\r\n                                            <td>\r\n                                                <span className=\"btns\">\r\n                                                    <span>\r\n                                                        <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                            <td><input type=\"checkbox\" /></td>\r\n                                            <td>2</td>\r\n                                            <td>UL-10015</td>\r\n                                            <td>Precious</td>\r\n                                            <td>Jones</td>\r\n                                            <td>Paul</td>\r\n                                            <td>Female</td>\r\n                                            <td>Burser</td>\r\n                                            <td>Accounting</td>\r\n                                            <td>\r\n                                                <span className=\"btns\">\r\n                                                    <span>\r\n                                                        <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"pagination-section\">\r\n                                    <div className=\"page-entry\">\r\n                                        Showing 1 to 2 of 2 entries\r\n                                    </div>\r\n                                    <div className=\"page-nav\">\r\n                                        <PaginationComponent />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n        </Dashboardframe>\r\n    )\r\n}\r\n\r\nexport default StaffManagement\r\n","import Dashboardframe from './subcomponent/Dashboardframe';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Container, Row, Col, Table} from 'react-bootstrap';\r\nimport {useState} from 'react';\r\nimport PaginationComponent from './subcomponent/PaginationComponent';\r\n\r\nconst StaffRoles = () => {\r\n    const [addNew, setAddNew] = useState(false)\r\n\r\n    const handleAddNew = () => {\r\n        setAddNew(true)\r\n    }\r\n\r\n    return (\r\n        <Dashboardframe title=\"Admin\" subTitle=\"Staff Roles\">\r\n            <Helmet>\r\n                <title>Staff Roles | iEduCare</title>\r\n            </Helmet>\r\n            <div className=\"content-page\">\r\n                <div className=\"session-wrapper\">\r\n                    <Container>\r\n                        <div className=\"session-title\">Staff Roles</div>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <button className=\"addnew-btn\" onClick={handleAddNew}> <span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span>  Add New</button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"table-header\">\r\n                                    <div className=\"entries\">\r\n                                        <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                                        <div className=\"entries-input\">\r\n                                            <select className=\"entries-box\" id=\"entries\">\r\n                                                {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                                    <option value={value} key={value}>{value}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </div>\r\n                                        <div className=\"entries-label\"> entries </div>\r\n                                    </div>\r\n                                    <div className=\"search\">\r\n                                        <label htmlFor=\"search\" className=\"search-label\">Filter: </label>\r\n                                        <input type=\"search\" className=\"search-box\" id=\"search\" />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <div className=\"session-table\">\r\n                                    <Table bordered hover responsive>\r\n                                        <thead>\r\n                                            <tr>\r\n                                            <th>S/N</th>\r\n                                            <th>Roles</th>\r\n                                            <th>Description</th>\r\n                                            <th>Category</th>\r\n                                            <th>Action</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                            <td>1</td>\r\n                                            <td>Lecturer</td>\r\n                                            <td>Lecturer</td>\r\n                                            <td>Academic Staff</td>\r\n                                            <td>\r\n                                                <span className=\"btns\">\r\n                                                    <span>\r\n                                                        <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                            <td>2</td>\r\n                                            <td>HOD</td>\r\n                                            <td>Head of Department</td>\r\n                                            <td>Academic Staff</td>\r\n                                            <td>\r\n                                                <span className=\"btns\">\r\n                                                    <span>\r\n                                                        <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                            <td>3</td>\r\n                                            <td>Provost</td>\r\n                                            <td>Provost</td>\r\n                                            <td>Academic Staff</td>\r\n                                            <td>\r\n                                                <span className=\"btns\">\r\n                                                    <span>\r\n                                                        <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                            <td>4</td>\r\n                                            <td>Burser</td>\r\n                                            <td>Burser</td>\r\n                                            <td>Non-Academic Staff</td>\r\n                                            <td>\r\n                                                <span className=\"btns\">\r\n                                                    <span>\r\n                                                        <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"pagination-section\">\r\n                                    <div className=\"page-entry\">\r\n                                        Showing 1 to 2 of 2 entries\r\n                                    </div>\r\n                                    <div className=\"page-nav\">\r\n                                        <PaginationComponent />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n        </Dashboardframe>\r\n    )\r\n}\r\n\r\nexport default StaffRoles\r\n","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport * as Yup from 'yup';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\n\r\nconst NewSchool = (props) => {\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n\r\n    \r\n    const onSubmit = (data) => {\r\n        console.log(data)\r\n    }\r\n\r\n    const initialValues = {\r\n        designation: '',\r\n        description: '',\r\n        designationCategory: ''\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        designation: Yup.string().required(\"Designation is Required\"),\r\n        description: Yup.string().required(\" Description is Required \"),\r\n        designationCategory: Yup.string().required(\" Designation Category is Required \")\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Add Designation\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"designation\" \r\n                                        id=\"designation\" \r\n                                        label=\"Designation\" \r\n                                        margin=\"normal\"\r\n                                        placeholder=\"Designation\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.designation}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.designation && Boolean(formik.errors.designation)}\r\n                                        helperText={formik.touched.designation && formik.errors.designation}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            \r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"description\" \r\n                                        id=\"description\" \r\n                                        placeholder=\"Description\"\r\n                                        label=\"Description\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.description}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.description && Boolean(formik.errors.description)}\r\n                                        helperText={formik.touched.description && formik.errors.description}\r\n                                    />\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            \r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"designationCategory\" \r\n                                        id=\"designationCategory\" \r\n                                        placeholder=\"Designation Category\"\r\n                                        label=\"Designation Category\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.designationCategory}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.designationCategory && Boolean(formik.errors.designationCategory)}\r\n                                        helperText={formik.touched.designationCategory && formik.errors.designationCategory}\r\n                                    />\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\">Submit <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default NewSchool","import Dashboardframe from './subcomponent/Dashboardframe';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Container, Row, Col, Table} from 'react-bootstrap';\r\nimport NewDesignation from './subcomponent/NewDesignation';\r\nimport {useState} from 'react';\r\nimport PaginationComponent from './subcomponent/PaginationComponent';\r\n\r\nconst StaffDesignation = () => {\r\n    const [addNew, setAddNew] = useState(false)\r\n\r\n    const handleAddNew = () => {\r\n        setAddNew(true)\r\n    }\r\n\r\n    return (\r\n        <Dashboardframe title=\"Admin\" subTitle=\"Staff Designation\">\r\n            <Helmet>\r\n                <title>Staff Designation | iEduCare</title>\r\n            </Helmet>\r\n            <div className=\"content-page\">\r\n                <div className=\"session-wrapper\">\r\n                <NewDesignation show={addNew} onHide={() => setAddNew(false)}/>\r\n                    <Container>\r\n                        <div className=\"session-title\">Staff Designation</div>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <button className=\"addnew-btn\" onClick={handleAddNew}> <span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span>  Add New</button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"table-header\">\r\n                                    <div className=\"entries\">\r\n                                        <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                                        <div className=\"entries-input\">\r\n                                            <select className=\"entries-box\" id=\"entries\">\r\n                                                {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                                    <option value={value} key={value}>{value}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </div>\r\n                                        <div className=\"entries-label\"> entries </div>\r\n                                    </div>\r\n                                    <div className=\"search\">\r\n                                        <label htmlFor=\"search\" className=\"search-label\">Filter: </label>\r\n                                        <input type=\"search\" className=\"search-box\" id=\"search\" />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <div className=\"session-table\">\r\n                                    <Table bordered hover responsive>\r\n                                        <thead>\r\n                                            <tr>\r\n                                            <th>S/N</th>\r\n                                            <th>Designation</th>\r\n                                            <th>Description</th>\r\n                                            <th>Category</th>\r\n                                            <th>Action</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                            <td>1</td>\r\n                                            <td>Lecturer</td>\r\n                                            <td>Lecturer</td>\r\n                                            <td>Academic Staff</td>\r\n                                            <td>\r\n                                                <span className=\"btns\">\r\n                                                    <span>\r\n                                                        <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                            <td>2</td>\r\n                                            <td>HOD</td>\r\n                                            <td>Head of Department</td>\r\n                                            <td>Academic Staff</td>\r\n                                            <td>\r\n                                                <span className=\"btns\">\r\n                                                    <span>\r\n                                                        <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                            <td>3</td>\r\n                                            <td>Provost</td>\r\n                                            <td>Provost</td>\r\n                                            <td>Academic Staff</td>\r\n                                            <td>\r\n                                                <span className=\"btns\">\r\n                                                    <span>\r\n                                                        <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                            <td>4</td>\r\n                                            <td>Burser</td>\r\n                                            <td>Burser</td>\r\n                                            <td>Non-Academic Staff</td>\r\n                                            <td>\r\n                                                <span className=\"btns\">\r\n                                                    <span>\r\n                                                        <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"pagination-section\">\r\n                                    <div className=\"page-entry\">\r\n                                        Showing 1 to 2 of 2 entries\r\n                                    </div>\r\n                                    <div className=\"page-nav\">\r\n                                        <PaginationComponent />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n        </Dashboardframe>\r\n    )\r\n}\r\n\r\nexport default StaffDesignation\r\n","import Dashboardframe from './subcomponent/Dashboardframe';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Container, Row, Col, Table} from 'react-bootstrap';\r\nimport {useState} from 'react';\r\nimport PaginationComponent from './subcomponent/PaginationComponent';\r\n\r\nconst LectureManagement = () => {\r\n    const [addNew, setAddNew] = useState(false)\r\n\r\n    const handleAddNew = () => {\r\n        setAddNew(true)\r\n    }\r\n\r\n    return (\r\n        <Dashboardframe title=\"Admin\" subTitle=\"Lecture Management\">\r\n            <Helmet>\r\n                <title>Lecture Management | iEduCare</title>\r\n            </Helmet>\r\n            <div className=\"content-page\">\r\n                <div className=\"session-wrapper\">\r\n                    <Container>\r\n                        <div className=\"session-title\">Lecture Management</div>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <button className=\"addnew-btn\" onClick={handleAddNew}> <span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span>  Add New</button>\r\n                                <button className=\"importExport-btn\"> <span className=\"iconify\" data-icon=\"uil:import\" data-inline=\"false\"></span>  Import Users</button>\r\n                                <button className=\"importExport-btn\"> <span className=\"iconify\" data-icon=\"uil:export\" data-inline=\"false\"></span>  Export Users</button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"table-header\">\r\n                                    <div className=\"entries\">\r\n                                        <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                                        <div className=\"entries-input\">\r\n                                            <select className=\"entries-box\" id=\"entries\">\r\n                                                {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                                    <option value={value} key={value}>{value}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </div>\r\n                                        <div className=\"entries-label\"> entries </div>\r\n                                    </div>\r\n                                    <div className=\"search\">\r\n                                        <label htmlFor=\"search\" className=\"search-label\">Filter: </label>\r\n                                        <input type=\"search\" className=\"search-box\" id=\"search\" />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <div className=\"session-table\">\r\n                                    <Table bordered hover responsive>\r\n                                        <thead>\r\n                                            <tr>\r\n                                            <th> <input type=\"checkbox\" /> </th>\r\n                                            <th>S/N</th>\r\n                                            <th>Username</th>\r\n                                            <th>First Name</th>\r\n                                            <th>Middle Name</th>\r\n                                            <th>Last Name</th>\r\n                                            <th>Gender</th>\r\n                                            <th>Position</th>\r\n                                            <th>School/Faculty</th>\r\n                                            <th>Action</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                            <td><input type=\"checkbox\" /></td>\r\n                                            <td>1</td>\r\n                                            <td>UL-10010</td>\r\n                                            <td>Oluchi</td>\r\n                                            <td>Kelechi</td>\r\n                                            <td>Stephen</td>\r\n                                            <td>Female</td>\r\n                                            <td>School of Technology</td>\r\n                                            <td>Computer Science</td>\r\n                                            <td>\r\n                                                <span className=\"btns\">\r\n                                                    <span>\r\n                                                        <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                            <td><input type=\"checkbox\" /></td>\r\n                                            <td>2</td>\r\n                                            <td>UL-10015</td>\r\n                                            <td>Gbenga</td>\r\n                                            <td>James</td>\r\n                                            <td>Olusegun</td>\r\n                                            <td>Male</td>\r\n                                            <td>School of Statistics</td>\r\n                                            <td>Statistics</td>\r\n                                            <td>\r\n                                                <span className=\"btns\">\r\n                                                    <span>\r\n                                                        <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                    <span>\r\n                                                        <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"pagination-section\">\r\n                                    <div className=\"page-entry\">\r\n                                        Showing 1 to 2 of 2 entries\r\n                                    </div>\r\n                                    <div className=\"page-nav\">\r\n                                        <PaginationComponent />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n        </Dashboardframe>\r\n    )\r\n}\r\n\r\nexport default LectureManagement\r\n","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport * as Yup from 'yup';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {getInstitutionId, getWebUserId} from '../../../utils/Functions';\r\nimport {createProgramLevel} from '../../../services/institutionAdminServices';\r\n\r\nconst NewLevel = (props) => {\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n    const institutionId = getInstitutionId()\r\n    const userId = getWebUserId()\r\n\r\n    \r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try {\r\n            const res = await createProgramLevel(data)\r\n            if (res.status === 200 || res.status === 204){\r\n                setIsSubmit(false)\r\n                setAlertType(\"success\")\r\n                setMessage(\"Program Level Created Successfully\")\r\n                setShowAlert(true)\r\n                props.setContentLength(props.contentLength + 1)\r\n            }\r\n            else{\r\n                setIsSubmit(false)\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Failed to Create Program Level\")\r\n                setShowAlert(true)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setIsSubmit(false)\r\n            setAlertType(\"danger\")\r\n            setMessage(err.message)\r\n            setShowAlert(true)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        levelCode: 0,\r\n        description: '',\r\n        institutionId: institutionId,\r\n        createdBy: userId\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        levelCode: Yup.number().required(\"Level Code is Required\"),\r\n        description: Yup.string().required(\"Description is Required \")\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Add New Level\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        type=\"number\"\r\n                                        name=\"levelCode\" \r\n                                        id=\"levelCode\" \r\n                                        label=\"Level Code\" \r\n                                        margin=\"normal\"\r\n                                        placeholder=\"Level Code\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        inputProps={{   \r\n                                        step: \"100\",\r\n                                        min: \"0\",\r\n                                        max: \"800\"\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.levelCode}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.levelCode && Boolean(formik.errors.levelCode)}\r\n                                        helperText={formik.touched.levelCode && formik.errors.levelCode}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"description\" \r\n                                        id=\"description\" \r\n                                        placeholder=\"Description\"\r\n                                        label=\"Description\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.description}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.description && Boolean(formik.errors.description)}\r\n                                        helperText={formik.touched.description && formik.errors.description}\r\n                                        />\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}> {\r\n                        isSubmit ? \"Submitting...\" : \"Submit\"\r\n                    } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default NewLevel","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport * as Yup from 'yup';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {getWebUserId} from '../../../utils/Functions';\r\nimport {editProgramLevel} from '../../../services/institutionAdminServices';\r\n\r\nconst EditLevel = (props) => {\r\n    const {data} = props\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n    const userId = getWebUserId()\r\n\r\n    \r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try {\r\n            const res = await editProgramLevel(data.id, data.levelCode, data.description, data.institutionId, data.createdBy)\r\n            if (res.status === 200 || res.status === 204){\r\n                setIsSubmit(false)\r\n                setAlertType(\"success\")\r\n                setMessage(\"Program Level Created Successfully\")\r\n                setShowAlert(true)\r\n                props.setContentLength(props.contentLength + 1)\r\n            }\r\n            else{\r\n                setIsSubmit(false)\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Failed to Create Program Level\")\r\n                setShowAlert(true)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setIsSubmit(false)\r\n            setAlertType(\"danger\")\r\n            setMessage(err.message)\r\n            setShowAlert(true)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        id: data.id,\r\n        levelCode: data.levelCode,\r\n        description: data.description,\r\n        institutionId: data.institutionId,\r\n        createdBy: userId\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        levelCode: Yup.number().required(\"Level Code is Required\"),\r\n        description: Yup.string().required(\"Description is Required \")\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Add New Level\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        type=\"number\"\r\n                                        name=\"levelCode\" \r\n                                        id=\"levelCode\" \r\n                                        label=\"Level Code\" \r\n                                        margin=\"normal\"\r\n                                        placeholder=\"Level Code\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        inputProps={{   \r\n                                        step: \"100\",\r\n                                        min: \"0\",\r\n                                        max: \"800\"\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.levelCode}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.levelCode && Boolean(formik.errors.levelCode)}\r\n                                        helperText={formik.touched.levelCode && formik.errors.levelCode}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"description\" \r\n                                        id=\"description\" \r\n                                        placeholder=\"Description\"\r\n                                        label=\"Description\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.description}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.description && Boolean(formik.errors.description)}\r\n                                        helperText={formik.touched.description && formik.errors.description}\r\n                                        />\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}> {\r\n                        isSubmit ? \"Submitting...\" : \"Submit\"\r\n                    } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default EditLevel","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {deleteProgramLevel} from '../../../services/institutionAdminServices';\r\n\r\nconst DeleteProgramLevel = (props) => {\r\n    const {data} = props\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const[isSubmit, setIsSubmit] = useState(false)\r\n\r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await deleteProgramLevel(data.id)\r\n            if (res.status === 200 || res.status === 204){\r\n                setAlertType(\"success\")\r\n                setMessage(\"Program Level Deleted Successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength - 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Delete Program Level\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        id: data.id\r\n    }\r\n\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Delete Program Level\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                <div className=\"form-group\">\r\n                                    Are You Sure you want to Delete?\r\n                                </div> \r\n                            </Col>\r\n                        </Row>  \r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}>{isSubmit ? \"Deleting...\" : \"Delete\" } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default DeleteProgramLevel","import Dashboardframe from './subcomponent/Dashboardframe';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Container, Row, Col, Table} from 'react-bootstrap';\r\nimport {useState, useEffect} from 'react';\r\nimport NewLevels from './subcomponent/NewLevels';\r\nimport EditLevels from './subcomponent/EditLevels';\r\nimport DeleteLevels from './subcomponent/DeleteLevels';\r\nimport PaginationComponent from './subcomponent/PaginationComponent';\r\nimport ContentLoader from '../components/ContentLoader';\r\nimport {getProgramLevel} from '../../services/institutionAdminServices';\r\nimport {getInstitutionId, search, tableIndex} from '../../utils/Functions';\r\n\r\nconst ProgramLevels = () => {\r\n    const [addNew, setAddNew] = useState(false)\r\n    const [addEdit, setAddEdit] = useState(false)\r\n    const [addDelete, setAddDelete] = useState(false)\r\n    const [programLevelData, setProgramLevelData] = useState([])\r\n    const [programLevelEditData, setProgramLevelEditData] = useState([])\r\n    const institutionId = getInstitutionId()\r\n    \r\n    const [slicedData, setSlicedData] = useState([])\r\n    const [searchData, setSearchData] = useState([])\r\n\r\n    const [offset, setOffset] = useState(0)\r\n    const [perPage, setPerPage] = useState(5)\r\n    const [pageCount, setPageCount] = useState(0)\r\n    const [contentLength, setContentLength] = useState(0)\r\n    const [isLoading, setIsLoading] = useState(0)\r\n    const [realIndex, setRealIndex] = useState(1)\r\n\r\n    const handleAddNew = () => {\r\n        setAddNew(true)\r\n    }\r\n\r\n    const handleSearch = (array, searchText) => {\r\n        if (searchText === ''){\r\n            setProgramLevelData(slicedData)\r\n        }\r\n        else{\r\n            setProgramLevelData(search(array, searchText, 'name'))\r\n        } \r\n    }\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        const fetchData = async() => {\r\n            const res = await getProgramLevel(institutionId)\r\n            const data = res.data\r\n            const slicedData = data.slice(offset * perPage, offset + perPage)\r\n            setSlicedData(slicedData)\r\n            setProgramLevelData(slicedData)\r\n            setSearchData(data)\r\n            setContentLength(data.length)\r\n            setPageCount(Math.ceil(data.length / perPage))\r\n            setIsLoading(false)\r\n        } \r\n        fetchData()\r\n    }, [offset, perPage, contentLength, institutionId])\r\n\r\n    const handlePageClick = (e) => {\r\n        const selectedPage = e.selected;\r\n        setRealIndex(offset * perPage + 1)\r\n        setOffset(selectedPage)\r\n    }\r\n\r\n    return (\r\n        <Dashboardframe title=\"Admin\" subTitle=\"Program Levels\">\r\n            <Helmet>\r\n                <title>Program Levels | iEduCare</title>\r\n            </Helmet>\r\n            <NewLevels show={addNew} onHide={() => setAddNew(false)} contentLength={contentLength} setContentLength={setContentLength}/>\r\n            <EditLevels show={addEdit} onHide={() => setAddEdit(false)} contentLength={contentLength} setContentLength={setContentLength} data={programLevelEditData}/>\r\n            <DeleteLevels show={addDelete} onHide={() => setAddDelete(false)} contentLength={contentLength} setContentLength={setContentLength} data={programLevelEditData}/>\r\n            {isLoading ?\r\n            <ContentLoader />\r\n            :   \r\n            <div className=\"content-page\">\r\n                <div className=\"session-wrapper\">\r\n                    <Container>\r\n                        <div className=\"session-title\">Program Levels</div>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <button className=\"addnew-btn\" onClick={handleAddNew}> <span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span>  Add New</button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"table-header\">\r\n                                    <div className=\"entries\">\r\n                                        <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                                        <div className=\"entries-input\">\r\n                                            <select className=\"entries-box\" id=\"entries\" onChange={(e) => setPerPage(e.target.value)}>\r\n                                                {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                                    <option value={value} key={value}>{value}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </div>\r\n                                        <div className=\"entries-label\"> entries </div>\r\n                                    </div>\r\n                                    <div className=\"search\">\r\n                                        <label htmlFor=\"search\" className=\"search-label\">Filter: </label>\r\n                                        <input type=\"search\" className=\"search-box\" id=\"search\" onChange={(event) => handleSearch(searchData, event.target.value)}/>\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <div className=\"session-table\">\r\n                                    <Table bordered hover responsive>\r\n                                        <thead>\r\n                                            <tr>\r\n                                            <th>S/N</th>\r\n                                            <th>Level Code</th>\r\n                                            <th>Description</th>\r\n                                            <th>Action</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                        {programLevelData.map((data, index) => (\r\n                                                <tr key={data.id}>\r\n                                                    <td>{tableIndex(index, realIndex)}</td>\r\n                                                    <td>{data.levelCode}</td>\r\n                                                    <td>{data.description}</td>\r\n                                                    <td>\r\n                                                    <span className=\"btns\">\r\n                                                        <span\r\n                                                            onClick={() => {\r\n                                                                setProgramLevelEditData(data)\r\n                                                                setAddEdit(true)\r\n                                                            }}\r\n                                                        >\r\n                                                            <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                        </span>\r\n                                                        <span\r\n                                                            onClick={() => {\r\n                                                                setProgramLevelEditData(data)\r\n                                                                setAddDelete(true)\r\n                                                            }}\r\n                                                        >\r\n                                                            <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                        </span>\r\n                                                    </span>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            ))}\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"pagination-section\">\r\n                                    <div className=\"page-entry\">\r\n                                        Showing {offset * perPage + 1} to {offset + perPage} of {contentLength} entries\r\n                                    </div>\r\n                                    <div className=\"page-nav\">\r\n                                        <PaginationComponent \r\n                                            pageCount={pageCount} \r\n                                            handlePageClick={handlePageClick} \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n        }\r\n        </Dashboardframe>\r\n    )\r\n}\r\n\r\nexport default ProgramLevels\r\n","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport * as Yup from 'yup';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {getInstitutionId, getWebUserId} from '../../../utils/Functions';\r\nimport {createCourseGrade} from '../../../services/institutionAdminServices';\r\n\r\nconst NewCourseGrade = (props) => {\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n    const institutionId = getInstitutionId()\r\n    const userId = getWebUserId()\r\n\r\n    \r\n    const onSubmit = async(data) => {\r\n        console.log(data)\r\n        setIsSubmit(true)\r\n        try {\r\n            const res = await createCourseGrade(data)\r\n            if (res.status === 200 || res.status === 204){\r\n                setIsSubmit(false)\r\n                setAlertType(\"success\")\r\n                setMessage(\"Course Grade Created Successfully\")\r\n                setShowAlert(true)\r\n                props.setContentLength(props.contentLength + 1)\r\n            }\r\n            else{\r\n                setIsSubmit(false)\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Failed to Create Course Grade\")\r\n                setShowAlert(true)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setIsSubmit(false)\r\n            setAlertType(\"danger\")\r\n            setMessage(err.message)\r\n            setShowAlert(true)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        code: '',\r\n        remark: '',\r\n        gradeScore: 0,\r\n        minimumScore: 0,\r\n        maximumScore: 0,\r\n        institutionId: institutionId,\r\n        createdBy: userId\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        code: Yup.string().required(\"Grade Code is Required\"),\r\n        remark: Yup.string().required(\"Grade Remark is Required \"),\r\n        gradeScore: Yup.number().required(\"Grade Score is Required \"),\r\n        minimumScore: Yup.number().required(\"Grade Score is Required \"),\r\n        maximumScore: Yup.number().required(\"Maximum Score is Required \")\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Add New Course Grade\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"code\" \r\n                                        id=\"code\" \r\n                                        label=\"Grade Code\" \r\n                                        margin=\"normal\"\r\n                                        placeholder=\"Grade Code\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.code}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.code && Boolean(formik.errors.code)}\r\n                                        helperText={formik.touched.code && formik.errors.code}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"remark\" \r\n                                        id=\"remark\" \r\n                                        placeholder=\"Remark\"\r\n                                        label=\"Remark\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.remark}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.remark && Boolean(formik.errors.remark)}\r\n                                        helperText={formik.touched.remark && formik.errors.remark}\r\n                                        />\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        type=\"number\"\r\n                                        name=\"gradeScore\" \r\n                                        id=\"gradeScore\" \r\n                                        label=\"Grade Score\" \r\n                                        margin=\"normal\"\r\n                                        placeholder=\"Grade Score\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        inputProps={{\r\n                                        min: \"0\",\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.gradeScore}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.gradeScore && Boolean(formik.errors.gradeScore)}\r\n                                        helperText={formik.touched.gradeScore && formik.errors.gradeScore}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        type=\"number\"\r\n                                        name=\"minimumScore\" \r\n                                        id=\"minimumScore\" \r\n                                        placeholder=\"Minimum Score\"\r\n                                        label=\"Minimum Score\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.minimumScore}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.minimumScore && Boolean(formik.errors.minimumScore)}\r\n                                        helperText={formik.touched.minimumScore && formik.errors.minimumScore}\r\n                                        />\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        type=\"number\"\r\n                                        name=\"maximumScore\" \r\n                                        id=\"maximumScore\" \r\n                                        placeholder=\"Maximum Score\"\r\n                                        label=\"Maximum Score\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.maximumScore}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.maximumScore && Boolean(formik.errors.maximumScore)}\r\n                                        helperText={formik.touched.maximumScore && formik.errors.maximumScore}\r\n                                        />\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}> {\r\n                        isSubmit ? \"Submitting...\" : \"Submit\"\r\n                    } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default NewCourseGrade","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport * as Yup from 'yup';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {getWebUserId} from '../../../utils/Functions';\r\nimport {editCourseGrade} from '../../../services/institutionAdminServices';\r\n\r\nconst EditCourseGrade = (props) => {\r\n    const {data} = props\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n    const userId = getWebUserId()\r\n\r\n    \r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try {\r\n            const res = await editCourseGrade(data.id, data.code, data.remark, data.gradeScore, data.minimumScore, data.maximumScore, data.institutionId, data.createdBy)\r\n            if (res.status === 200 || res.status === 204){\r\n                setIsSubmit(false)\r\n                setAlertType(\"success\")\r\n                setMessage(\"Course Grade Edited Successfully\")\r\n                setShowAlert(true)\r\n                props.setContentLength(props.contentLength + 1)\r\n            }\r\n            else{\r\n                setIsSubmit(false)\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Failed to Edit Course Grade\")\r\n                setShowAlert(true)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setIsSubmit(false)\r\n            setAlertType(\"danger\")\r\n            setMessage(err.message)\r\n            setShowAlert(true)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        id: data.id,\r\n        code: data.code,\r\n        remark: data.remark,\r\n        gradeScore: data.gradeScore,\r\n        minimumScore: data.minimumScore,\r\n        maximumScore: data.maximumScore,\r\n        institutionId: data.institutionId,\r\n        createdBy: userId\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        code: Yup.string().required(\"Grade Code is Required\"),\r\n        remark: Yup.string().required(\"Grade Remark is Required \"),\r\n        gradeScore: Yup.number().required(\"Grade Score is Required \"),\r\n        minimumScore: Yup.number().required(\"Grade Score is Required \"),\r\n        maximumScore: Yup.number().required(\"Maximum Score is Required \")\r\n    })\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Edit Course Grade\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"code\" \r\n                                        id=\"code\" \r\n                                        label=\"Grade Code\" \r\n                                        margin=\"normal\"\r\n                                        placeholder=\"Grade Code\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.code}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.code && Boolean(formik.errors.code)}\r\n                                        helperText={formik.touched.code && formik.errors.code}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        name=\"remark\" \r\n                                        id=\"remark\" \r\n                                        placeholder=\"Remark\"\r\n                                        label=\"Remark\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.remark}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.remark && Boolean(formik.errors.remark)}\r\n                                        helperText={formik.touched.remark && formik.errors.remark}\r\n                                        />\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        type=\"number\"\r\n                                        name=\"gradeScore\" \r\n                                        id=\"gradeScore\" \r\n                                        label=\"Grade Score\" \r\n                                        margin=\"normal\"\r\n                                        placeholder=\"Grade Score\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        inputProps={{\r\n                                        min: \"0\",\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.gradeScore}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.gradeScore && Boolean(formik.errors.gradeScore)}\r\n                                        helperText={formik.touched.gradeScore && formik.errors.gradeScore}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        type=\"number\"\r\n                                        name=\"minimumScore\" \r\n                                        id=\"minimumScore\" \r\n                                        placeholder=\"Minimum Score\"\r\n                                        label=\"Minimum Score\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.minimumScore}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.minimumScore && Boolean(formik.errors.minimumScore)}\r\n                                        helperText={formik.touched.minimumScore && formik.errors.minimumScore}\r\n                                        />\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                    <div className=\"form-group\" id=\"new-session-textfield\">\r\n                                    <TextField \r\n                                        type=\"number\"\r\n                                        name=\"maximumScore\" \r\n                                        id=\"maximumScore\" \r\n                                        placeholder=\"Maximum Score\"\r\n                                        label=\"Maximum Score\" \r\n                                        margin=\"normal\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                        value={formik.values.maximumScore}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.maximumScore && Boolean(formik.errors.maximumScore)}\r\n                                        helperText={formik.touched.maximumScore && formik.errors.maximumScore}\r\n                                        />\r\n                                    </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}> {\r\n                        isSubmit ? \"Submitting...\" : \"Submit\"\r\n                    } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default EditCourseGrade","import {Modal, Container, Row, Col, Button} from 'react-bootstrap';\r\nimport {useFormik} from 'formik';\r\nimport {useState} from 'react';\r\nimport {PopupAlert} from '../../components/Alert';\r\nimport {deleteCourseGrade} from '../../../services/institutionAdminServices';\r\n\r\nconst DeleteCourseGrade = (props) => {\r\n    const {data} = props\r\n    const[showAlert, setShowAlert] = useState(false) \r\n    const[alertType, setAlertType] = useState(\"\")\r\n    const[message, setMessage] = useState(\"\")\r\n    const[isSubmit, setIsSubmit] = useState(false)\r\n\r\n    \r\n    const onSubmit = async(data) => {\r\n        setIsSubmit(true)\r\n        try{\r\n            const res = await deleteCourseGrade(data.id)\r\n            console.log(res)\r\n            if (res.status === 200 || res.status === 204){\r\n                setAlertType(\"success\")\r\n                setMessage(\"CourseGrade Deleted Successfully\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n                props.setContentLength(props.contentLength - 1)\r\n            }\r\n            else{\r\n                setAlertType(\"danger\")\r\n                setMessage(\"Fail to Delete CourseGrade\")\r\n                setShowAlert(true)\r\n                setIsSubmit(false)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n            setAlertType(\"danger\")\r\n            setMessage(\"Network Error\")\r\n            setShowAlert(true)\r\n            setIsSubmit(false)\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        id: data.id\r\n    }\r\n\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        onSubmit\r\n    })\r\n\r\n\r\n    return (\r\n        <Modal {...props} \r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            centered\r\n            className=\"add-new-modal\"\r\n        >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Delete CourseGrade\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <Modal.Body className=\"\">\r\n                        <Container>        \r\n                        {showAlert && <PopupAlert alertType={alertType} setShowAlert={setShowAlert} message={message}/>}   \r\n                        <Row>\r\n                            <Col lg={12} md={12} sm={12}>\r\n                                <div className=\"form-group\">\r\n                                    Are You Sure you want to Delete?\r\n                                </div> \r\n                            </Col>\r\n                        </Row>  \r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"cancel-btn\">Close</Button>\r\n                    <button type=\"submit\" className=\"submit-btn\" disabled={isSubmit}>{isSubmit ? \"Deleting...\" : \"Delete\" } <span className=\"iconify\" data-icon=\"entypo:arrow-long-right\" data-inline=\"false\"></span></button>\r\n                </Modal.Footer>\r\n            </form>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default DeleteCourseGrade","import Dashboardframe from './subcomponent/Dashboardframe';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Container, Row, Col, Table} from 'react-bootstrap';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {useState, useEffect} from 'react';\r\nimport NewCourseGrade from './subcomponent/NewCourseGrade';\r\nimport EditCourseGrade from './subcomponent/EditCourseGrade';\r\nimport DeleteCourseGrade from './subcomponent/DeleteCourseGrade';\r\nimport PaginationComponent from './subcomponent/PaginationComponent';\r\nimport ContentLoader from '../components/ContentLoader';\r\nimport {getCourseGrade} from '../../services/institutionAdminServices';\r\nimport {getInstitutionId, search, tableIndex} from '../../utils/Functions';\r\n\r\nconst CourseGrade = () => {\r\n    const [addNew, setAddNew] = useState(false)\r\n    const [addEdit, setAddEdit] = useState(false)\r\n    const [addDelete, setAddDelete] = useState(false)\r\n    const [courseGradeData, setCourseGradeData] = useState([])\r\n    const [courseGradeEditData, setCourseGradeEditData] = useState([])\r\n    const institutionId = getInstitutionId()\r\n    \r\n    const [slicedData, setSlicedData] = useState([])\r\n    const [searchData, setSearchData] = useState([])\r\n\r\n    const [offset, setOffset] = useState(0)\r\n    const [perPage, setPerPage] = useState(5)\r\n    const [pageCount, setPageCount] = useState(0)\r\n    const [contentLength, setContentLength] = useState(0)\r\n    const [isLoading, setIsLoading] = useState(0)\r\n    const [realIndex, setRealIndex] = useState(1)\r\n\r\n    const handleAddNew = () => {\r\n        setAddNew(true)\r\n    }\r\n\r\n    const handleSearch = (array, searchText) => {\r\n        if (searchText === ''){\r\n            setCourseGradeData(slicedData)\r\n        }\r\n        else{\r\n            setCourseGradeData(search(array, searchText, 'name'))\r\n        } \r\n    }\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        const fetchData = async() => {\r\n            const res = await getCourseGrade(institutionId)\r\n            const data = res.data\r\n            const slicedData = data.slice(offset * perPage, offset + perPage)\r\n            setSlicedData(slicedData)\r\n            setCourseGradeData(slicedData)\r\n            setSearchData(data)\r\n            setContentLength(data.length)\r\n            setPageCount(Math.ceil(data.length / perPage))\r\n            setIsLoading(false)\r\n        } \r\n        fetchData()\r\n    }, [offset, perPage, contentLength, institutionId])\r\n\r\n    const handlePageClick = (e) => {\r\n        const selectedPage = e.selected;\r\n        setRealIndex(offset * perPage + 1)\r\n        setOffset(selectedPage)\r\n    }\r\n\r\n    return (\r\n        <Dashboardframe title=\"Admin\" subTitle=\"Course Grades\">\r\n            <Helmet>\r\n                <title>Course Grades | iEduCare</title>\r\n            </Helmet>\r\n            <NewCourseGrade show={addNew} onHide={() => setAddNew(false)} contentLength={contentLength} setContentLength={setContentLength}/>\r\n            <EditCourseGrade show={addEdit} onHide={() => setAddEdit(false)} contentLength={contentLength} setContentLength={setContentLength} data={courseGradeEditData}/>\r\n            <DeleteCourseGrade show={addDelete} onHide={() => setAddDelete(false)} contentLength={contentLength} setContentLength={setContentLength} data={courseGradeEditData}/>\r\n            {isLoading ?\r\n            <ContentLoader />\r\n            :\r\n            <div className=\"content-page\">\r\n                <div className=\"session-wrapper\">\r\n                    <Container>\r\n                        <div className=\"session-title\">Course Grades</div>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <button className=\"addnew-btn\" onClick={handleAddNew}> <span className=\"iconify\" data-icon=\"fluent:add-16-filled\" data-inline=\"false\"></span>  Add New</button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"table-header\">\r\n                                    <div className=\"entries\">\r\n                                        <label htmlFor=\"entries\" className=\"entries-label\">Show</label>\r\n                                        <div className=\"entries-input\">\r\n                                            <select className=\"entries-box\" id=\"entries\" onChange={(e) => setPerPage(e.target.value)}>\r\n                                                {[5, 10, 15, 20, 25, 30].map((value) => (\r\n                                                    <option value={value} key={value}>{value}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </div>\r\n                                        <div className=\"entries-label\"> entries </div>\r\n                                    </div>\r\n                                    <div className=\"search\">\r\n                                        <label htmlFor=\"search\" className=\"search-label\">Filter: </label>\r\n                                        <input type=\"search\" className=\"search-box\" id=\"search\" onChange={(event) => handleSearch(searchData, event.target.value)}/>\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-4\">\r\n                            <Col lg={12}>\r\n                                <div className=\"session-table\">\r\n                                    <Table bordered hover responsive>\r\n                                        <thead>\r\n                                            <tr>\r\n                                            <th>S/N</th>\r\n                                            <th>Grade Code</th>\r\n                                            <th>Remark</th>\r\n                                            <th>Grade Score</th>\r\n                                            <th>Minimum Score</th>\r\n                                            <th>Maximum Score</th>\r\n                                            <th>Action</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                        {courseGradeData.map((data, index) => (\r\n                                                <tr key={data.id}>\r\n                                                    <td>{tableIndex(index, realIndex)}</td>\r\n                                                    <td>{data.code}</td>\r\n                                                    <td>{data.remark}</td>\r\n                                                    <td>{data.gradeScore}</td>\r\n                                                    <td>{data.minimumScore}</td>\r\n                                                    <td>{data.maximumScore}</td>\r\n                                                    <td>\r\n                                                    <span className=\"btns\">\r\n                                                        <span\r\n                                                            onClick={() => {\r\n                                                                setCourseGradeEditData(data)\r\n                                                                setAddEdit(true)\r\n                                                            }}\r\n                                                        >\r\n                                                            <span className=\"iconify edit-icon\" data-icon=\"akar-icons:edit\" data-inline=\"false\"></span>\r\n                                                        </span>\r\n                                                        <span\r\n                                                            onClick={() => {\r\n                                                                setCourseGradeEditData(data)\r\n                                                                setAddDelete(true)\r\n                                                            }}\r\n                                                        >\r\n                                                            <span className=\"iconify del-icon\" data-icon=\"fluent:delete-dismiss-24-regular\" data-inline=\"false\"></span>\r\n                                                        </span>\r\n                                                    </span>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            ))}\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <div className=\"pagination-section\">\r\n                                    <div className=\"page-entry\">\r\n                                        Showing {offset * perPage + 1} to {offset + perPage} of {contentLength} entries\r\n                                    </div>\r\n                                    <div className=\"page-nav\">\r\n                                        <PaginationComponent \r\n                                            pageCount={pageCount} \r\n                                            handlePageClick={handlePageClick} \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <div className=\"form-group\" id=\"gradepoint-textfield\">\r\n                                    <TextField \r\n                                        name=\"maxGradePoint\" \r\n                                        id=\"maxGradePoint\" \r\n                                        label=\"Max Grade Point\" \r\n                                        margin=\"normal\"\r\n                                        placeholder=\"Max Grade Point\"\r\n                                        InputLabelProps={{\r\n                                        shrink: true,\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                    <button className=\"save-mgp-btn mt-3\">Save</button>\r\n                                </div>\r\n                            </Col>  \r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n            }\r\n        </Dashboardframe>\r\n    )\r\n}\r\n\r\nexport default CourseGrade\r\n","import { instance } from './httpService';\r\n\r\nconst http = instance;\r\n\r\n// Class Attendance\r\nexport const getStudentClassAttendance = () => {\r\n    return http.get(\"/ClassAttendance/Record/Student/Courses\")\r\n}\r\n\r\n// Exam Attendance\r\nexport const getStudentExamAttendance = () => {\r\n    return http.get(\"/ExamAttendance/Record/Student\")\r\n}","import {Table} from 'react-bootstrap';\r\n\r\nconst ClassAttendanceTable = ({attendance}) => {\r\n    return (\r\n        <div className='mt-4'>\r\n            <Table responsive bordered hover size=\"lg\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>S/N</th>\r\n                        <th>Course</th>\r\n                        <th>Course Unit</th>\r\n                        <th>Total Classes Attended</th>\r\n                        <th>Total Classes Held</th>\r\n                        <th>Attendance(%)</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {attendance.map((data, index) => (\r\n                        <tr key={data.id}>\r\n                            <td>{index + 1}</td>\r\n                            <td>{data.course}</td>\r\n                            <td>{data.courseUnit}</td>\r\n                            <td>{data.totalClassesAttended}</td>\r\n                            <td>{data.totalClassesHeld}</td>\r\n                            <td>{data.attendancePercent}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClassAttendanceTable\r\n","\r\nexport const Present = () => {\r\n    return (\r\n        <div className=\"status-active\">\r\n            Present\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Absent = () => {\r\n    return (\r\n        <div className=\"status-inactive\">\r\n            Absent\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Completed = () => {\r\n    return (\r\n        <div className=\"status-active\">\r\n            Completed\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Incomplete = () => {\r\n    return (\r\n        <div className=\"status-inactive\">\r\n            Incomplete\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const PartPayment = () => {\r\n    return (\r\n        <div className=\"part-payment\">\r\n            Part-Payment\r\n        </div>\r\n    )\r\n}","import {Table} from 'react-bootstrap';\r\nimport { timeConverter } from '../../../utils/Functions';\r\nimport { Present, Absent, Completed, Incomplete } from './AttendanceStatus';\r\n\r\nconst ExamAttendanceTable = ({attendance}) => {\r\n    return (\r\n        <div className='mt-4'>\r\n            <Table responsive bordered hover size=\"lg\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>S/N</th>\r\n                        <th>Course</th>\r\n                        <th>Exam Start Time</th>\r\n                        <th>Exam End Time</th>\r\n                        <th>Exam Start Attendance</th>\r\n                        <th>Exam Start Attendance</th>\r\n                        <th>Status</th>\r\n                        <th>Supervisor</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {attendance.map((data, index) => (\r\n                        <tr key={data.id}>\r\n                            <td>{index + 1}</td>\r\n                            <td>{data.course}</td>\r\n                            <td>{data.startTime ? timeConverter(data.startTime) : \"-\"}</td>\r\n                            <td>{data.endTime ? timeConverter(data.endTime) : \"-\"}</td>\r\n                            <td>{data.startAttendance ? <Present /> : <Absent />}</td>\r\n                            <td> {data.endAttendance ? <Present /> : <Absent />}</td>\r\n                            <td> {data.isCommence ? <Completed /> : <Incomplete />}</td>\r\n                            <td>{data.supervisor}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExamAttendanceTable\r\n","import DashboardFrame from './subcomponents/Dashboard.Frame';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Tab, Tabs} from 'react-bootstrap';\r\nimport {useState, useEffect} from 'react';\r\nimport { getStudentClassAttendance, getStudentExamAttendance } from '../../services/attendanceService';\r\nimport ContentLoader from '../components/ContentLoader';\r\nimport ClassAttendanceTable from './subcomponents/ClassAttendanceTable';\r\nimport ExamAttendanceTable from './subcomponents/ExamAttendanceTable';\r\n\r\n\r\nconst Attendance = () => {\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [classAtt, setClassAtt] = useState([])\r\n    const [examAtt, setExamAtt] = useState([])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n               const res = await getStudentClassAttendance()\r\n               setClassAtt(res.data)\r\n               setIsLoading(false)\r\n            }\r\n            catch (err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n       fetchData()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n               const res = await getStudentExamAttendance()\r\n               setExamAtt(res.data)\r\n            }\r\n            catch (err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n       fetchData()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <DashboardFrame title=\"Student\" subTitle=\"Attendance\">\r\n            <Helmet>\r\n                <title>Attendance | Adeyemi College Of Education</title>\r\n            </Helmet> \r\n            <div className=\"content-page\">\r\n            {isLoading ? \r\n                <ContentLoader />\r\n                :\r\n                <div className=\"institution-section\">\r\n                    <div className=\"institution-table\">\r\n                        <Tabs defaultActiveKey=\"class\" id=\"uncontrolled-tab-example\" className=\"mt-4 session-tab\">\r\n                            <Tab eventKey=\"class\" title=\"Class Attendance\">\r\n                                <ClassAttendanceTable \r\n                                    attendance={classAtt}\r\n                                />\r\n                            </Tab>\r\n                            <Tab eventKey=\"exam\" title=\"Exam Attendance\">\r\n                                <ExamAttendanceTable \r\n                                    attendance={examAtt}\r\n                                />\r\n                            </Tab>\r\n                        </Tabs>\r\n                        </div>\r\n                </div>\r\n            }\r\n            </div>\r\n        </DashboardFrame>\r\n    )\r\n}\r\n\r\nexport default Attendance\r\n","import { instance } from './httpService';\r\n\r\nconst http = instance;\r\n\r\nexport const getStudentTimetable = () => {\r\n    return http.get(\"/ExamTimeTable/Student/Current\")\r\n}","import DashboardFrame from './subcomponents/Dashboard.Frame';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Table} from 'react-bootstrap';\r\nimport {useState, useEffect} from 'react';\r\nimport { getStudentTimetable} from '../../services/examTimetableService';\r\nimport ContentLoader from '../components/ContentLoader';\r\nimport { dateConverter } from '../../utils/Functions';\r\n\r\n\r\nconst Timetable = () => {\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [timetable, setTimetable] = useState([])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n               const res = await getStudentTimetable()\r\n               setTimetable(res.data)\r\n               setIsLoading(false)\r\n            }\r\n            catch (err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n       fetchData()\r\n    }, [])\r\n\r\n    return (\r\n        <DashboardFrame title=\"Student\" subTitle=\"Exam TimeTable\">\r\n            <Helmet>\r\n                <title>Timetable | Adeyemi College Of Education</title>\r\n            </Helmet> \r\n            <div className=\"content-page\">\r\n            {isLoading ? \r\n                <ContentLoader />\r\n                :\r\n                <div className=\"institution-section\">\r\n                    <div className=\"institution-table\">\r\n                        <Table responsive bordered hover size=\"lg\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>S/N</th>\r\n                                    <th>Course</th>\r\n                                    <th>Time</th>\r\n                                    <th>Date</th>\r\n                                    <th>Duration</th>\r\n                                    <th>Venue</th>\r\n                                    <th>Supervisor</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {timetable.map((data, index) => (\r\n                                    data &&\r\n                                    <tr key={data.id}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td>{data.course}</td>\r\n                                        <td>{data.examStartTime}</td>\r\n                                        <td>{dateConverter(data.examDateTime)}</td>\r\n                                        <td>{data.examDuration}</td>\r\n                                        <td>{data.venue}</td>\r\n                                        <td>{data.supervisor}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                </div>\r\n            }\r\n            </div>\r\n        </DashboardFrame>\r\n    )\r\n}\r\n\r\nexport default Timetable\r\n","import { instance } from './httpService';\r\n\r\nconst http = instance;\r\n\r\nexport const getStudentCurrentExamRecords = () => {\r\n    return http.get(\"/ExamRecords/Student/Records/Get\")\r\n}","import DashboardFrame from './subcomponents/Dashboard.Frame';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Table} from 'react-bootstrap';\r\nimport {useState, useEffect} from 'react';\r\nimport { getStudentCurrentExamRecords} from '../../services/examRecordService';\r\nimport ContentLoader from '../components/ContentLoader';\r\nimport { dateConverter } from '../../utils/Functions';\r\n\r\n\r\nconst StudentExamRecords = () => {\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [result, setResult] = useState([])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n               const res = await getStudentCurrentExamRecords()\r\n               setResult(res.data)\r\n               setIsLoading(false)\r\n            }\r\n            catch (err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n       fetchData()\r\n    }, [])\r\n\r\n    return (\r\n        <DashboardFrame title=\"Student\" subTitle=\"Result\">\r\n            <Helmet>\r\n                <title>Result | Adeyemi College Of Education</title>\r\n            </Helmet> \r\n            <div className=\"content-page\">\r\n            {isLoading ? \r\n                <ContentLoader />\r\n                :\r\n                <div className=\"institution-section\">\r\n                    <div className=\"institution-table\">\r\n                        <Table responsive bordered hover size=\"lg\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>S/N</th>\r\n                                    <th>Course</th>\r\n                                    <th>Course Unit</th>\r\n                                    <th>Assessment Score</th>\r\n                                    <th>Exam Score</th>\r\n                                    <th>Total Score</th>\r\n                                    <th>Grade</th>\r\n                                    <th>Grade Point</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {result.map((data, index) => (\r\n                                    data &&\r\n                                    <tr key={data.id}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td>{data.course}</td>\r\n                                        <td>{data.courseUnit}</td>\r\n                                        <td>{data.otherAssessmentScore}</td>\r\n                                        <td>{data.examScore}</td>\r\n                                        <td>{data.totalScore}</td>\r\n                                        <td>{data.letterGrade}</td>\r\n                                        <td>{data.gradePoint}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                </div>\r\n            }\r\n            </div>\r\n        </DashboardFrame>\r\n    )\r\n}\r\n\r\nexport default StudentExamRecords\r\n","const Annoucement = () => {\r\n    return (\r\n        <div>\r\n            Annoucement\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Annoucement\r\n","import DashboardFrame from './subcomponents/Dashboard.Frame';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Table} from 'react-bootstrap';\r\nimport {useState, useEffect} from 'react';\r\nimport { getStudentCurrentExamRecords} from '../../services/examRecordService';\r\nimport ContentLoader from '../components/ContentLoader';\r\nimport Annoucement from '../components/Annoucement';\r\n\r\n\r\nconst StudentAnnoucement = () => {\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [result, setResult] = useState([])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n               const res = await getStudentCurrentExamRecords()\r\n               setResult(res.data)\r\n               setIsLoading(false)\r\n            }\r\n            catch (err){\r\n                console.log(err.message)\r\n            }\r\n        }\r\n       fetchData()\r\n    }, [])\r\n\r\n    return (\r\n        <DashboardFrame title=\"Student\" subTitle=\"Annoucement\">\r\n            <Helmet>\r\n                <title>Annoucement | Adeyemi College Of Education</title>\r\n            </Helmet> \r\n            <div className=\"content-page\">\r\n            {isLoading ? \r\n                <ContentLoader />\r\n                :\r\n                <Annoucement />\r\n            }\r\n            </div>\r\n        </DashboardFrame>\r\n    )\r\n}\r\n\r\nexport default StudentAnnoucement\r\n","import {Switch, Route} from 'react-router-dom';\r\nimport Dashboard from '../Pages/SuperAdmin/Dashboard';\r\nimport Login from '../Pages/SuperAdmin/Login';\r\nimport Institutions from '../Pages/SuperAdmin/Institutions';\r\nimport UserManager from '../Pages/SuperAdmin/UserManager';\r\nimport Modules from '../Pages/SuperAdmin/Modules';\r\nimport LicenseManager from '../Pages/SuperAdmin/LicenseManager';\r\nimport AdminLogin from '../Pages/Admin/AdminLogin';\r\nimport StudentLogin from '../Pages/Student/StudentLogin';\r\nimport StudentDashboard from '../Pages/Student/StudentDashboard';\r\nimport StudentProfile from '../Pages/Student/StudentProfile';\r\nimport Academics from '../Pages/Student/Academics';\r\nimport Courses from '../Pages/Student/Courses';\r\nimport Results from '../Pages/Student/Results';\r\nimport ForgotPassword from '../Pages/SuperAdmin/ForgotPassword';\r\nimport ProtectedRoute from '../Routing/ProtectedRoute';\r\nimport AdminDashboard from '../Pages/Admin/AdminDashboard';\r\nimport SessionManagement from '../Pages/Admin/SessionManagement';\r\nimport SchoolManagement from '../Pages/Admin/SchoolManagement';\r\nimport FacultyManagement from '../Pages/Admin/FacultyManagement';\r\nimport DeptManagement from '../Pages/Admin/DeptManagement';\r\nimport ProgramManagement from '../Pages/Admin/ProgramManagement';\r\nimport CourseManagement from '../Pages/Admin/CourseManagement';\r\nimport StudentManagement from '../Pages/Admin/StudentManagement';\r\nimport StaffManagement from '../Pages/Admin/StaffManagement';\r\nimport StaffRoles from '../Pages/Admin/StaffRoles';\r\nimport StaffDesignation from '../Pages/Admin/StaffDesignation';\r\nimport LectureManagement from '../Pages/Admin/LectureManagement';\r\nimport ProgramLevels from '../Pages/Admin/ProgramLevels';\r\nimport CourseGrade from '../Pages/Admin/CourseGrade';\r\nimport Attendance from '../Pages/Student/Attendance';\r\nimport Timetable from '../Pages/Student/Timetable';\r\nimport StudentExamRecords from '../Pages/Student/StudentExamRecords';\r\nimport StudentAnnoucement from '../Pages/Student/StudentAnnoucement';\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Login/>\r\n          </Route>\r\n          <Route path=\"/forgot-password\">\r\n            <ForgotPassword />\r\n          </Route>\r\n          <Route path=\"/admin-login\">\r\n            <AdminLogin />\r\n          </Route>\r\n          <Route path=\"/student-login\">\r\n            <StudentLogin />\r\n          </Route>\r\n          <ProtectedRoute path=\"/turon-dashboard\">\r\n            <Dashboard/>\r\n          </ProtectedRoute>\r\n          <ProtectedRoute path=\"/institutions\">\r\n            <Institutions/>\r\n          </ProtectedRoute>\r\n          <ProtectedRoute path=\"/attendance\">\r\n            <Attendance />\r\n          </ProtectedRoute>\r\n          <ProtectedRoute path=\"/timetable\">\r\n            <Timetable />\r\n          </ProtectedRoute>\r\n          <ProtectedRoute path=\"/exam-result\">\r\n            <StudentExamRecords />\r\n          </ProtectedRoute>\r\n          <ProtectedRoute path=\"/user-manager\">\r\n            <UserManager />\r\n          </ProtectedRoute>\r\n          <ProtectedRoute path=\"/modules\">\r\n            <Modules/>\r\n          </ProtectedRoute>\r\n          <ProtectedRoute path=\"/license-manager\">\r\n            <LicenseManager />\r\n          </ProtectedRoute>\r\n          <ProtectedRoute path=\"/student-annoucement\">\r\n            <StudentAnnoucement />\r\n          </ProtectedRoute>\r\n          <Route path=\"/mydashboard\">\r\n            <StudentDashboard/>\r\n          </Route>\r\n           <Route path=\"/student-profile\">\r\n            <StudentProfile />\r\n          </Route>\r\n          <Route path=\"/academics\">\r\n            <Academics/>\r\n          </Route>\r\n          <Route path=\"/courses\">\r\n            <Courses/>\r\n          </Route>\r\n          <Route path=\"/results\">\r\n            <Results/>\r\n          </Route>\r\n          <Route path=\"/dashboard\">\r\n            <AdminDashboard />\r\n          </Route>\r\n          <Route path=\"/session-management\">\r\n            <SessionManagement />\r\n          </Route>\r\n          <Route path=\"/school-management\">\r\n            <SchoolManagement />\r\n          </Route>\r\n          <Route path=\"/faculty-management\">\r\n            <FacultyManagement />\r\n          </Route>\r\n          <Route path=\"/dept-management\">\r\n            <DeptManagement />\r\n          </Route>\r\n          <Route path=\"/program-management\">\r\n            <ProgramManagement />\r\n          </Route>\r\n          <Route path=\"/course-management\">\r\n            <CourseManagement />\r\n          </Route>\r\n          <Route path=\"/student-management\">\r\n            <StudentManagement />\r\n          </Route>\r\n          <Route path=\"/all-staff\">\r\n            <StaffManagement />\r\n          </Route>\r\n          <Route path=\"/roles\">\r\n            <StaffRoles />\r\n          </Route>\r\n          <Route path=\"/designation\">\r\n            <StaffDesignation />\r\n          </Route>\r\n          <Route path=\"/lecture-management\">\r\n            <LectureManagement />\r\n          </Route>\r\n          <Route path=\"/program-levels\">\r\n            <ProgramLevels />\r\n          </Route>\r\n          <Route path=\"/course-grades\">\r\n            <CourseGrade />\r\n          </Route>\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Routes\r\n","import {BrowserRouter as Router} from 'react-router-dom';\r\nimport Routes from './Routing/routes';\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    \r\n      <Router>\r\n        <Routes />\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}