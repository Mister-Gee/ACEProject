// <auto-generated />
using System;
using ACE.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ACE.Domain.Migrations
{
    [DbContext(typeof(ACEContext))]
    partial class ACEContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("ACE.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ColumnName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EventDateUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ip")
                        .HasColumnType("TEXT");

                    b.Property<string>("NewValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecordId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TableName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("AuditLogId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ACE.Domain.Entities.ControlledEntities.BloodGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BloodGroup");
                });

            modelBuilder.Entity("ACE.Domain.Entities.ControlledEntities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolID")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SchoolID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ACE.Domain.Entities.ControlledEntities.FlagLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FlagLevels");
                });

            modelBuilder.Entity("ACE.Domain.Entities.ControlledEntities.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("ACE.Domain.Entities.ControlledEntities.Genotype", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genotype");
                });

            modelBuilder.Entity("ACE.Domain.Entities.ControlledEntities.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("ACE.Domain.Entities.ControlledEntities.MaritalStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatus");
                });

            modelBuilder.Entity("ACE.Domain.Entities.ControlledEntities.MedicalCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MedicalConditions");
                });

            modelBuilder.Entity("ACE.Domain.Entities.ControlledEntities.Programme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Programmes");
                });

            modelBuilder.Entity("ACE.Domain.Entities.ControlledEntities.Religion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("ACE.Domain.Entities.ControlledEntities.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("ACE.Domain.Entities.ControlledEntities.StudentCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StudentCategories");
                });

            modelBuilder.Entity("ACE.Domain.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeviceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Logout")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("ACE.Domain.Entities.Flag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FlagLevelID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentID")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FlagLevelID");

                    b.ToTable("Flags");
                });

            modelBuilder.Entity("ACE.Domain.Entities.MedicalRecord", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BloodGroupID")
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyDoctorName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyDoctorPhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GenotypeID")
                        .HasColumnType("TEXT");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherMedicalHistorys")
                        .HasColumnType("TEXT");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("UserId");

                    b.HasIndex("BloodGroupID");

                    b.HasIndex("GenotypeID");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("ACE.Domain.Entities.vUserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleFriendlyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("vUserRoles");
                });

            modelBuilder.Entity("ACE.Domain.Entities.ControlledEntities.Department", b =>
                {
                    b.HasOne("ACE.Domain.Entities.ControlledEntities.School", "School")
                        .WithMany("Departments")
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("ACE.Domain.Entities.Flag", b =>
                {
                    b.HasOne("ACE.Domain.Entities.ControlledEntities.FlagLevel", "FlagLevel")
                        .WithMany()
                        .HasForeignKey("FlagLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlagLevel");
                });

            modelBuilder.Entity("ACE.Domain.Entities.MedicalRecord", b =>
                {
                    b.HasOne("ACE.Domain.Entities.ControlledEntities.BloodGroup", "BloodGroup")
                        .WithMany()
                        .HasForeignKey("BloodGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACE.Domain.Entities.ControlledEntities.Genotype", "Genotype")
                        .WithMany()
                        .HasForeignKey("GenotypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodGroup");

                    b.Navigation("Genotype");
                });

            modelBuilder.Entity("ACE.Domain.Entities.ControlledEntities.School", b =>
                {
                    b.Navigation("Departments");
                });
#pragma warning restore 612, 618
        }
    }
}
